<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack McKew's Blog - Software</title><link href="https://jackmckew.dev/" rel="alternate"></link><link href="https://jackmckew.dev/feeds/software.atom.xml" rel="self"></link><id>https://jackmckew.dev/</id><updated>2020-04-23T00:00:00+10:00</updated><subtitle>Engineer | Software Developer | Data Scientist</subtitle><entry><title>Github Actions for CI/CD</title><link href="https://jackmckew.dev/github-actions-for-cicd.html" rel="alternate"></link><published>2020-04-23T00:00:00+10:00</published><updated>2020-04-23T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-04-23:/github-actions-for-cicd.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;Recently the &lt;a href="https://github.com/JackMcKew/awesome-python-bytes"&gt;Python Bytes Awesome Package List&lt;/a&gt; moved to it's own repository from the &lt;a href="https://jackmckew.dev/python-bytes-awesome-package-list.html#python-bytes-awesome-package-list"&gt;blog post&lt;/a&gt;. This was done to enable the community be able to contribute their packages that they thought were awesome, which was a success with many pull requests already merged.&lt;/p&gt;
&lt;p&gt;After getting a taste of CI â€¦&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;Recently the &lt;a href="https://github.com/JackMcKew/awesome-python-bytes"&gt;Python Bytes Awesome Package List&lt;/a&gt; moved to it's own repository from the &lt;a href="https://jackmckew.dev/python-bytes-awesome-package-list.html#python-bytes-awesome-package-list"&gt;blog post&lt;/a&gt;. This was done to enable the community be able to contribute their packages that they thought were awesome, which was a success with many pull requests already merged.&lt;/p&gt;
&lt;p&gt;After getting a taste of CI/CD principles with &lt;a href="https://travis-ci.com/"&gt;Travis CI&lt;/a&gt; in building this blog, an idea to integrate some CI/CD with the awesome package list repository to ensure spelling errors, broken links, etc are all checked automatically. This was a great opportunity to try out &lt;a href="https://github.com/features/actions"&gt;Github Actions&lt;/a&gt;, so then all the resources/dependencies live in one place, Github.&lt;/p&gt;
&lt;p&gt;Initially, the things to automate were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking the spelling&lt;/li&gt;
&lt;li&gt;Checking all the links work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perfect, this is should be a gentle introduction to Github Actions.&lt;/p&gt;
&lt;p&gt;Here is an example of how GitHub Actions can be used to automatically rebase. Source: &lt;a href="https://github.com/marketplace/actions/automatic-rebase"&gt;https://github.com/marketplace/actions/automatic-rebase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Actions Example" class="img-fluid" src="https://jackmckew.dev/img/example-action.gif"/&gt;&lt;/p&gt;
&lt;h1 id="action-marketplace"&gt;Action Marketplace&lt;/h1&gt;
&lt;p&gt;One amazing feature of Github Actions is that Github hosts a 'marketplace' for actions, &lt;a href="https://github.com/marketplace?type=actions"&gt;https://github.com/marketplace?type=actions&lt;/a&gt;. This is awesome, because now you can just search for pre-made actions which will automate. In comparison to other CI services (let me know if there is anything similar), where you have to scour the internet looking for a post or question by someone else and piece together the action yourself.&lt;/p&gt;
&lt;p&gt;The actions I ended up using were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/check-spelling-js-vue-html-markdown-text"&gt;Check Spelling (JS, Vue, HTML, Markdown, Text)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/link-checker"&gt;Link Checker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even better is most of the actions in marketplace come with a &lt;code&gt;Usage&lt;/code&gt; section, which is a directly example you can copy/paste into the repository and it just works.&lt;/p&gt;
&lt;h1 id="action-format-yaml"&gt;Action Format (.yaml)&lt;/h1&gt;
&lt;p&gt;A Github Action is defined with a &lt;code&gt;&amp;lt;action_name&amp;gt;.yaml&lt;/code&gt; file which must be placed within &lt;code&gt;.github/workflows&lt;/code&gt; from the base of the repository. As many actions as you want can be placed in this folder, and will subsequently run when triggered.&lt;/p&gt;
&lt;p&gt;The base structure of a &lt;code&gt;link_checker.yaml&lt;/code&gt; file is:&lt;/p&gt;
&lt;table class="highlighttable table table-striped"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check links&lt;/span&gt;
&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;push&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;linkChecker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Link Checker&lt;/span&gt;
      &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lc&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/link-checker@v1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-v -r *&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fail if there were link errors&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;exit ${{ steps.lc.outputs.exit_code }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;To break this down:&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Use&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;Name of the action&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;The trigger to run the action (runs whenever a push happens in this example)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jobs&lt;/td&gt;
&lt;td&gt;What to run when triggered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linkChecker&lt;/td&gt;
&lt;td&gt;This is a job name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runs-on&lt;/td&gt;
&lt;td&gt;The operating system to run on&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;steps&lt;/td&gt;
&lt;td&gt;Steps to take once the operating system is set up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uses&lt;/td&gt;
&lt;td&gt;What action to use from the marketplace (or custom specified)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The biggest part of the action, is what the trigger is. Which the documentation behind this is amazing, see this at: &lt;a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows"&gt;https://help.github.com/en/actions/reference/events-that-trigger-workflows&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="actions-on-pull-request"&gt;Actions on Pull Request&lt;/h1&gt;
&lt;p&gt;The original reason for implementing CI/CD is to not only check the spelling &amp;amp; links in the content that the owner contributes, we also want it to run on pull requests from other users. This is captured within an issue (with solution) at: &lt;a href="https://github.com/JackMcKew/awesome-python-bytes/issues/9"&gt;https://github.com/JackMcKew/awesome-python-bytes/issues/9&lt;/a&gt;. The workflow for someone else to contribute to the repository is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fork repository &amp;gt; Make changes &amp;gt; Submit Pull Request with changes &amp;gt; Check changes &amp;gt; Merge into repository&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When the action was first set up for actions to run on pull requests, it kept throwing an error:&lt;/p&gt;
&lt;table class="highlighttable table table-striped"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;The process &lt;span class="s1"&gt;'/usr/bin/git'&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; code &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;This was determined to be intentional design by Github as a mitigation against the possibility that a bad actor could open PRs against your repo and do things like list out secrets or just run up a large bill (once we start charging) on your account.&lt;/p&gt;
&lt;p&gt;After speaking with &lt;a href="https://twitter.com/HamelHusain"&gt;Hamel Husain&lt;/a&gt; from Github on Twitter, he sent some great resources in the solution he found around this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fastpages.fast.ai/actions/markdown/2020/03/06/fastpages-actions.html"&gt;Fastpages Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fastai/fastpages/blob/master/.github/workflows/chatops.yaml"&gt;Chatops.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/github-script#comment-on-an-issue"&gt;Github-Script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essentially, to take 'ownership' of the changes presented in a pull request, the owner (or authorized contributor) drops a comment with a specific command (eg, &lt;code&gt;/check-pr&lt;/code&gt;), which triggers an action. This workflow ended up like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PR Submitted &amp;gt; Owner/Contributor comments keywords (eg &lt;code&gt;/check-pr&lt;/code&gt;) &amp;gt; Action triggers &amp;gt; Clones PR &amp;gt; Runs neccessary Actions &amp;gt; Comments back on PR results&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the Awesome Python Bytes, the action to cover this workflow ended up as (&lt;a href="https://github.com/JackMcKew/awesome-python-bytes/blob/master/.github/workflows/chatops.yaml"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ensure to use &lt;code&gt;if: steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/code&gt; in all subsequent jobs you want triggered if the phrase is found, otherwise the action will become recursive: check for comment, run checks, make a comment, check for comment, etc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="highlighttable table table-striped"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Trigger Checks on Fork&lt;/span&gt;
&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;issue_comment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;label-pr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;listen for PR Comments&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;machine-learning-apps/actions-chatops@master&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;APP_PEM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.APP_PEM }}&lt;/span&gt;
          &lt;span class="nt"&gt;APP_ID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.APP_ID }}&lt;/span&gt;
          &lt;span class="nt"&gt;TRIGGER_PHRASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"/check-pr"&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# you must supply GITHUB_TOKEN&lt;/span&gt;
          &lt;span class="nt"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.manual_github_token }}&lt;/span&gt;
        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prcomm&lt;/span&gt;
        &lt;span class="c1"&gt;# This step clones the branch of the PR associated with the triggering phrase, but only if it is triggered.&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;clone branch of PR&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@master&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.SHA }}&lt;/span&gt;

        &lt;span class="c1"&gt;# This step is a toy example that illustrates how you can use outputs from the pr-command action&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;print variables&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${USERNAME} made a triggering comment on PR# ${PR_NUMBER} for ${BRANCH_NAME}"&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;BRANCH_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.BRANCH_NAME }}&lt;/span&gt;
          &lt;span class="nt"&gt;PR_NUMBER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.PULL_REQUEST_NUMBER }}&lt;/span&gt;
          &lt;span class="nt"&gt;USERNAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.COMMENTER_USERNAME }}&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check Spelling&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;UnicornGlobal/spellcheck-github-actions@master&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Link Checker&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lc&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/link-checker@v1&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-v -r *&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fail if there were link errors&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;exit ${{ steps.lc.outputs.exit_code }}&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Comment on PR if checks pass&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;success() &amp;amp;&amp;amp; steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/github-script@0.9.0&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{secrets.manual_github_token}}&lt;/span&gt;
          &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;github.issues.createComment({&lt;/span&gt;
              &lt;span class="no"&gt;issue_number: context.issue.number,&lt;/span&gt;
              &lt;span class="no"&gt;owner: context.repo.owner,&lt;/span&gt;
              &lt;span class="no"&gt;repo: context.repo.repo,&lt;/span&gt;
              &lt;span class="no"&gt;body: 'ðŸ‘‹ All checks passed!'&lt;/span&gt;
            &lt;span class="no"&gt;})&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Comment on PR if checks fail&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;failure() &amp;amp;&amp;amp; steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/github-script@0.9.0&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{secrets.manual_github_token}}&lt;/span&gt;
          &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;github.issues.createComment({&lt;/span&gt;
              &lt;span class="no"&gt;issue_number: context.issue.number,&lt;/span&gt;
              &lt;span class="no"&gt;owner: context.repo.owner,&lt;/span&gt;
              &lt;span class="no"&gt;repo: context.repo.repo,&lt;/span&gt;
              &lt;span class="no"&gt;body: 'Some checks failled :(, check Github Actions for more details.'&lt;/span&gt;
            &lt;span class="no"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</content><category term="Software"></category><category term="software"></category><category term="cicd"></category></entry></feed>