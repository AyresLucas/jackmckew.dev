<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack McKew's Blog - Software</title><link href="https://jackmckew.dev/" rel="alternate"></link><link href="https://jackmckew.dev/feeds/software.atom.xml" rel="self"></link><id>https://jackmckew.dev/</id><updated>2020-07-10T00:00:00+10:00</updated><subtitle>Engineer | Software Developer | Data Scientist</subtitle><entry><title>Profitable Python Podcast - Show Notes</title><link href="https://jackmckew.dev/profitable-python-podcast-show-notes.html" rel="alternate"></link><published>2020-07-10T00:00:00+10:00</published><updated>2020-07-10T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-07-10:/profitable-python-podcast-show-notes.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;I was recently a guest on the Profitable Python podcast with host Ben McNeill, the episode can be found at: &lt;a href="https://anchor.fm/profitablepythonfm/episodes/Pandas-Alive--Jack-McKew-efui92/a-a2idber"&gt;https://anchor.fm/profitablepythonfm/episodes/Pandas-Alive--Jack-McKew-efui92/a-a2idber&lt;/a&gt;. This blog post serves as the show notes, if I've missed anything, please drop a comment below!&lt;/p&gt;
&lt;h2 id="projects-mentioned"&gt;Projects Mentioned&lt;/h2&gt;
&lt;p&gt;A project where the â€¦&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;I was recently a guest on the Profitable Python podcast with host Ben McNeill, the episode can be found at: &lt;a href="https://anchor.fm/profitablepythonfm/episodes/Pandas-Alive--Jack-McKew-efui92/a-a2idber"&gt;https://anchor.fm/profitablepythonfm/episodes/Pandas-Alive--Jack-McKew-efui92/a-a2idber&lt;/a&gt;. This blog post serves as the show notes, if I've missed anything, please drop a comment below!&lt;/p&gt;
&lt;h2 id="projects-mentioned"&gt;Projects Mentioned&lt;/h2&gt;
&lt;p&gt;A project where the team was investigating the air quality impacts of air show smoke cans. The scenario was where the planes were mounted with smoke cans which leave a trail of smoke behind them while they fly around and complete stunts. We were given the flight path from the black box in GPX format, and the air quality team modelled the scenario per second to export a contour. This contour and flight path data was then passed into &lt;a href="https://plotly.com/"&gt;Plotly&lt;/a&gt; and an interactive visualisation was created. In particular the contour was shown at a fixed height using 3D scatter while the flight path was displayed using lines.&lt;/p&gt;
&lt;p&gt;One of my first experiences automating a real task with Python was in my first engineering position, where we were creating human machine interaces (HMI) for dams &amp;amp; weirs using &lt;a href="https://www.se.com/ww/en/product-range/1054-vijeo-designer/"&gt;Vijeo&lt;/a&gt;. I was tasked with placing buttons on the screens for each and every spillway. As this was monotonous and there was lots of buttons, I decided to automate it. In particular I used &lt;a href="https://pyautogui.readthedocs.io/en/latest/"&gt;&lt;code&gt;pyautogui&lt;/code&gt;&lt;/a&gt;. The script mimicked the mouse and keyboard dragging and dropping the buttons onto the screen and worked a treat.&lt;/p&gt;
&lt;p&gt;After I had been writing this blog for some time, I wanted to count the number of words I had written. These posts are spread across markdown &amp;amp; jupyter notebooks, so I set out to create a Python package to count this figure for me. I have done a previous write up on how this package was created at &lt;a href="https://jackmckew.dev/counting-words-with-python.html"&gt;https://jackmckew.dev/counting-words-with-python.html&lt;/a&gt;. The package &lt;code&gt;wordsum&lt;/code&gt; can also be installed via &lt;code&gt;pip install wordsum&lt;/code&gt; : &lt;a href="https://pypi.org/project/wordsum/"&gt;https://pypi.org/project/wordsum/&lt;/a&gt;. This is how the figure on each page is calculated, and is integrated into TravisCI to update the value whenever the site is built.&lt;/p&gt;
&lt;p&gt;In Home Appliance Scheduler Using Home Area Network, this was my engineering thesis, which can be read in full at: &lt;a href="https://jackmckew.dev/pages/Final_Year_Project_Part_B.pdf"&gt;https://jackmckew.dev/pages/Final_Year_Project_Part_B.pdf&lt;/a&gt;. In particular I used a multi-objective evolutionary algorithm (MOEA) to optimise the price of electricity over a 24hr period by shifting the time when appliances start.&lt;/p&gt;
&lt;h2 id="other-mentions"&gt;Other Mentions&lt;/h2&gt;
&lt;p&gt;LEGO Mindstorms &lt;a href="https://www.lego.com/en-au/product/lego-mindstorms-ev3-31313"&gt;https://www.lego.com/en-au/product/lego-mindstorms-ev3-31313&lt;/a&gt;. I was a participant in &lt;a href="https://www.robocupjunior.org.au/"&gt;RoboCup Junior&lt;/a&gt; when I was in high school and built a LEGO team to play soccer.&lt;/p&gt;
&lt;p&gt;AlphaGo documentary &lt;a href="https://www.youtube.com/watch?v=WXuK6gekU1Y"&gt;https://www.youtube.com/watch?v=WXuK6gekU1Y&lt;/a&gt;. &lt;em&gt;With more board configurations than there are atoms in the universe, the ancient Chinese game of Go has long been considered a grand challenge for artificial intelligence. On March 9, 2016, the worlds of Go and artificial intelligence collided in South Korea for an extraordinary best-of-five-game competition, coined The DeepMind Challenge Match. Hundreds of millions of people around the world watched as a legendary Go master took on an unproven AI challenger for the first time in history.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="concepts"&gt;Concepts&lt;/h2&gt;
&lt;p&gt;Openly sharing learning journey - don't be scared to show your mistakes.&lt;/p&gt;
&lt;p&gt;Users typically don't care how your software works, just as long as it works.&lt;/p&gt;
&lt;p&gt;Building passive income(s), gives you more time in the day to pursue what you enjoy.&lt;/p&gt;
&lt;p&gt;Scalability is core to making a business become extremely profitable.&lt;/p&gt;
&lt;p&gt;If you want to gain a skill, start by spending at least 5 minutes on something a day. In a month, you'll be much further ahead then if you keep putting it off.&lt;/p&gt;
&lt;p&gt;Spend more time upfront when discovering a client's problem. Answer the who, what, why, where and how of the problem statement, will make your life much easier. Get constant feedback and engage with your clients as you are building the solution. This will open up many more avenues for future work as well.&lt;/p&gt;
&lt;p&gt;Demonstrate value in time saved vs upfront cost. It's much easier to sell that someone will save $10,000/year every year going forward than $25,000 upfront to solve it.&lt;/p&gt;
&lt;p&gt;Put yourself in the shoes of the end-user of a data visualisation. If you can relate with your end-users, the data visualisation will be much more engaging. Look out for more examples out there, and note what you like/disliked with the visualisation.&lt;/p&gt;
&lt;p&gt;The more simple &amp;amp; relatable you can make something, the more it will be appreciated. Use relatable analogies if you can!&lt;/p&gt;
&lt;p&gt;Don't feel ashamed to stop something if you aren't engaging with it. If you're halfway through a book and it's not serving you, don't feel any guilt in stopping.&lt;/p&gt;
&lt;p&gt;Live for today, not the past or the present.&lt;/p&gt;
&lt;h3 id="python-packages"&gt;Python Packages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gooey - &lt;a href="https://github.com/chriskiehl/Gooey"&gt;https://github.com/chriskiehl/Gooey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyInstaller - &lt;a href="https://www.pyinstaller.org/"&gt;https://www.pyinstaller.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bokeh - &lt;a href="https://docs.bokeh.org/en/latest/index.html"&gt;https://docs.bokeh.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Plotly - &lt;a href="https://plot.ly/python/"&gt;https://plot.ly/python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matplotlib - &lt;a href="https://matplotlib.org/"&gt;https://matplotlib.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pandas-Bokeh - &lt;a href="https://github.com/PatrikHlobil/Pandas-Bokeh"&gt;https://github.com/PatrikHlobil/Pandas-Bokeh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Folium - &lt;a href="https://python-visualization.github.io/folium/quickstart.html"&gt;https://python-visualization.github.io/folium/quickstart.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Black - &lt;a href="https://github.com/psf/black"&gt;https://github.com/psf/black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pandas_Alive - &lt;a href="https://github.com/JackMcKew/pandas_alive"&gt;https://github.com/JackMcKew/pandas_alive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Poetry - &lt;a href="https://python-poetry.org/"&gt;https://python-poetry.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="resources"&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Crowd Fight COVID-19 - &lt;a href="http://crowdfightcovid19.org/volunteers"&gt;http://crowdfightcovid19.org/volunteers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automate the Boring Stuff - &lt;a href="https://automatetheboringstuff.com/"&gt;https://automatetheboringstuff.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jake VanderPlas Python data visualisation ecosystem - &lt;a href="https://www.youtube.com/watch?v=FytuB8nFHPQ"&gt;https://www.youtube.com/watch?v=FytuB8nFHPQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vega &amp;amp; Vega-lite - &lt;a href="https://vega.github.io/vega-lite/"&gt;https://vega.github.io/vega-lite/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vladimir Illevski Javascript data visualisation ecosystem - &lt;a href="https://medium.com/analytics-vidhya/javascript-visualization-discover-different-visualization-tools-part-1-e4a77595fb97"&gt;https://medium.com/analytics-vidhya/javascript-visualization-discover-different-visualization-tools-part-1-e4a77595fb97&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Courage to be Disliked - &lt;a href="https://jackmckew.dev/book-review-courage-to-be-disliked.html#book-review-courage-to-be-disliked"&gt;https://jackmckew.dev/book-review-courage-to-be-disliked.html#book-review-courage-to-be-disliked&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Never Split the Difference - &lt;a href="https://jackmckew.dev/book-review-never-split-the-difference.html"&gt;https://jackmckew.dev/book-review-never-split-the-difference.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apache Airflow - &lt;a href="https://airflow.apache.org/"&gt;https://airflow.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Harry Stevens - &lt;a href="https://www.washingtonpost.com/graphics/2020/world/corona-simulator/"&gt;https://www.washingtonpost.com/graphics/2020/world/corona-simulator/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sourcery - &lt;a href="https://sourcery.ai/"&gt;https://sourcery.ai/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hunter Data Analytics - &lt;a href="http://data.newwwie.com/"&gt;http://data.newwwie.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ShareX - &lt;a href="https://getsharex.com/"&gt;https://getsharex.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dropbox moving to Rust from Python - &lt;a href="https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine"&gt;https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Software"></category><category term="software"></category><category term="datascience"></category></entry><entry><title>Github Actions for CI/CD</title><link href="https://jackmckew.dev/github-actions-for-cicd.html" rel="alternate"></link><published>2020-04-23T00:00:00+10:00</published><updated>2020-04-23T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-04-23:/github-actions-for-cicd.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;Recently the &lt;a href="https://github.com/JackMcKew/awesome-python-bytes"&gt;Python Bytes Awesome Package List&lt;/a&gt; moved to it's own repository from the &lt;a href="https://jackmckew.dev/python-bytes-awesome-package-list.html#python-bytes-awesome-package-list"&gt;blog post&lt;/a&gt;. This was done to enable the community be able to contribute their packages that they thought were awesome, which was a success with many pull requests already merged.&lt;/p&gt;
&lt;p&gt;After getting a taste of CI â€¦&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;Recently the &lt;a href="https://github.com/JackMcKew/awesome-python-bytes"&gt;Python Bytes Awesome Package List&lt;/a&gt; moved to it's own repository from the &lt;a href="https://jackmckew.dev/python-bytes-awesome-package-list.html#python-bytes-awesome-package-list"&gt;blog post&lt;/a&gt;. This was done to enable the community be able to contribute their packages that they thought were awesome, which was a success with many pull requests already merged.&lt;/p&gt;
&lt;p&gt;After getting a taste of CI/CD principles with &lt;a href="https://travis-ci.com/"&gt;Travis CI&lt;/a&gt; in building this blog, an idea to integrate some CI/CD with the awesome package list repository to ensure spelling errors, broken links, etc are all checked automatically. This was a great opportunity to try out &lt;a href="https://github.com/features/actions"&gt;Github Actions&lt;/a&gt;, so then all the resources/dependencies live in one place, Github.&lt;/p&gt;
&lt;p&gt;Initially, the things to automate were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking the spelling&lt;/li&gt;
&lt;li&gt;Checking all the links work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perfect, this is should be a gentle introduction to Github Actions.&lt;/p&gt;
&lt;p&gt;Here is an example of how GitHub Actions can be used to automatically rebase. Source: &lt;a href="https://github.com/marketplace/actions/automatic-rebase"&gt;https://github.com/marketplace/actions/automatic-rebase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Actions Example" class="img-fluid" src="https://jackmckew.dev/img/example-action.gif"/&gt;&lt;/p&gt;
&lt;h1 id="action-marketplace"&gt;Action Marketplace&lt;/h1&gt;
&lt;p&gt;One amazing feature of Github Actions is that Github hosts a 'marketplace' for actions, &lt;a href="https://github.com/marketplace?type=actions"&gt;https://github.com/marketplace?type=actions&lt;/a&gt;. This is awesome, because now you can just search for pre-made actions which will automate. In comparison to other CI services (let me know if there is anything similar), where you have to scour the internet looking for a post or question by someone else and piece together the action yourself.&lt;/p&gt;
&lt;p&gt;The actions I ended up using were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/check-spelling-js-vue-html-markdown-text"&gt;Check Spelling (JS, Vue, HTML, Markdown, Text)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/link-checker"&gt;Link Checker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even better is most of the actions in marketplace come with a &lt;code&gt;Usage&lt;/code&gt; section, which is a directly example you can copy/paste into the repository and it just works.&lt;/p&gt;
&lt;h1 id="action-format-yaml"&gt;Action Format (.yaml)&lt;/h1&gt;
&lt;p&gt;A Github Action is defined with a &lt;code&gt;&amp;lt;action_name&amp;gt;.yaml&lt;/code&gt; file which must be placed within &lt;code&gt;.github/workflows&lt;/code&gt; from the base of the repository. As many actions as you want can be placed in this folder, and will subsequently run when triggered.&lt;/p&gt;
&lt;p&gt;The base structure of a &lt;code&gt;link_checker.yaml&lt;/code&gt; file is:&lt;/p&gt;
&lt;table class="highlighttable table table-striped"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check links&lt;/span&gt;
&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;push&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;linkChecker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Link Checker&lt;/span&gt;
      &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lc&lt;/span&gt;
      &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/link-checker@v1&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-v -r *&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fail if there were link errors&lt;/span&gt;
      &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;exit ${{ steps.lc.outputs.exit_code }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;To break this down:&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Use&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;Name of the action&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;td&gt;The trigger to run the action (runs whenever a push happens in this example)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jobs&lt;/td&gt;
&lt;td&gt;What to run when triggered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linkChecker&lt;/td&gt;
&lt;td&gt;This is a job name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;runs-on&lt;/td&gt;
&lt;td&gt;The operating system to run on&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;steps&lt;/td&gt;
&lt;td&gt;Steps to take once the operating system is set up&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uses&lt;/td&gt;
&lt;td&gt;What action to use from the marketplace (or custom specified)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The biggest part of the action, is what the trigger is. Which the documentation behind this is amazing, see this at: &lt;a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows"&gt;https://help.github.com/en/actions/reference/events-that-trigger-workflows&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="actions-on-pull-request"&gt;Actions on Pull Request&lt;/h1&gt;
&lt;p&gt;The original reason for implementing CI/CD is to not only check the spelling &amp;amp; links in the content that the owner contributes, we also want it to run on pull requests from other users. This is captured within an issue (with solution) at: &lt;a href="https://github.com/JackMcKew/awesome-python-bytes/issues/9"&gt;https://github.com/JackMcKew/awesome-python-bytes/issues/9&lt;/a&gt;. The workflow for someone else to contribute to the repository is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fork repository &amp;gt; Make changes &amp;gt; Submit Pull Request with changes &amp;gt; Check changes &amp;gt; Merge into repository&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When the action was first set up for actions to run on pull requests, it kept throwing an error:&lt;/p&gt;
&lt;table class="highlighttable table table-striped"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;The process &lt;span class="s1"&gt;'/usr/bin/git'&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; code &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;This was determined to be intentional design by Github as a mitigation against the possibility that a bad actor could open PRs against your repo and do things like list out secrets or just run up a large bill (once we start charging) on your account.&lt;/p&gt;
&lt;p&gt;After speaking with &lt;a href="https://twitter.com/HamelHusain"&gt;Hamel Husain&lt;/a&gt; from Github on Twitter, he sent some great resources in the solution he found around this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fastpages.fast.ai/actions/markdown/2020/03/06/fastpages-actions.html"&gt;Fastpages Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fastai/fastpages/blob/master/.github/workflows/chatops.yaml"&gt;Chatops.yaml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/github-script#comment-on-an-issue"&gt;Github-Script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essentially, to take 'ownership' of the changes presented in a pull request, the owner (or authorized contributor) drops a comment with a specific command (eg, &lt;code&gt;/check-pr&lt;/code&gt;), which triggers an action. This workflow ended up like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PR Submitted &amp;gt; Owner/Contributor comments keywords (eg &lt;code&gt;/check-pr&lt;/code&gt;) &amp;gt; Action triggers &amp;gt; Clones PR &amp;gt; Runs neccessary Actions &amp;gt; Comments back on PR results&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the Awesome Python Bytes, the action to cover this workflow ended up as (&lt;a href="https://github.com/JackMcKew/awesome-python-bytes/blob/master/.github/workflows/chatops.yaml"&gt;source&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ensure to use &lt;code&gt;if: steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/code&gt; in all subsequent jobs you want triggered if the phrase is found, otherwise the action will become recursive: check for comment, run checks, make a comment, check for comment, etc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="highlighttable table table-striped"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Trigger Checks on Fork&lt;/span&gt;
&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;issue_comment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;label-pr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;listen for PR Comments&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;machine-learning-apps/actions-chatops@master&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;APP_PEM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.APP_PEM }}&lt;/span&gt;
          &lt;span class="nt"&gt;APP_ID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.APP_ID }}&lt;/span&gt;
          &lt;span class="nt"&gt;TRIGGER_PHRASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"/check-pr"&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# you must supply GITHUB_TOKEN&lt;/span&gt;
          &lt;span class="nt"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.manual_github_token }}&lt;/span&gt;
        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prcomm&lt;/span&gt;
        &lt;span class="c1"&gt;# This step clones the branch of the PR associated with the triggering phrase, but only if it is triggered.&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;clone branch of PR&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@master&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.SHA }}&lt;/span&gt;

        &lt;span class="c1"&gt;# This step is a toy example that illustrates how you can use outputs from the pr-command action&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;print variables&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${USERNAME} made a triggering comment on PR# ${PR_NUMBER} for ${BRANCH_NAME}"&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;BRANCH_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.BRANCH_NAME }}&lt;/span&gt;
          &lt;span class="nt"&gt;PR_NUMBER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.PULL_REQUEST_NUMBER }}&lt;/span&gt;
          &lt;span class="nt"&gt;USERNAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.prcomm.outputs.COMMENTER_USERNAME }}&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check Spelling&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;UnicornGlobal/spellcheck-github-actions@master&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Link Checker&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lc&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peter-evans/link-checker@v1&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-v -r *&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Fail if there were link errors&lt;/span&gt;
        &lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;exit ${{ steps.lc.outputs.exit_code }}&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Comment on PR if checks pass&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;success() &amp;amp;&amp;amp; steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/github-script@0.9.0&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{secrets.manual_github_token}}&lt;/span&gt;
          &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;github.issues.createComment({&lt;/span&gt;
              &lt;span class="no"&gt;issue_number: context.issue.number,&lt;/span&gt;
              &lt;span class="no"&gt;owner: context.repo.owner,&lt;/span&gt;
              &lt;span class="no"&gt;repo: context.repo.repo,&lt;/span&gt;
              &lt;span class="no"&gt;body: 'ðŸ‘‹ All checks passed!'&lt;/span&gt;
            &lt;span class="no"&gt;})&lt;/span&gt;

      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Comment on PR if checks fail&lt;/span&gt;
        &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;failure() &amp;amp;&amp;amp; steps.prcomm.outputs.BOOL_TRIGGERED == 'true'&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/github-script@0.9.0&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;github-token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{secrets.manual_github_token}}&lt;/span&gt;
          &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;github.issues.createComment({&lt;/span&gt;
              &lt;span class="no"&gt;issue_number: context.issue.number,&lt;/span&gt;
              &lt;span class="no"&gt;owner: context.repo.owner,&lt;/span&gt;
              &lt;span class="no"&gt;repo: context.repo.repo,&lt;/span&gt;
              &lt;span class="no"&gt;body: 'Some checks failled :(, check Github Actions for more details.'&lt;/span&gt;
            &lt;span class="no"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</content><category term="Software"></category><category term="software"></category><category term="cicd"></category></entry></feed>