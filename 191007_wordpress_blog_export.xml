<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.2.3" created="2019-10-06 23:34" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Jack McKew&#039;s Blog</title>
	<link>https://jmckew.com</link>
	<description>Python enthusiast, electrical engineer and tinkerer</description>
	<pubDate>Sun, 06 Oct 2019 23:34:23 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://jmckew.com</wp:base_site_url>
	<wp:base_blog_url>https://jmckew.com</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[admin]]></wp:author_login><wp:author_email><![CDATA[jackmckew2@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Jack McKew]]></wp:author_display_name><wp:author_first_name><![CDATA[Jack]]></wp:author_first_name><wp:author_last_name><![CDATA[McKew]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[code-fridays]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Code Fridays]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[projects]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Projects]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>7</wp:term_id>
		<wp:category_nicename><![CDATA[python]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[python]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>5</wp:term_id>
		<wp:tag_slug><![CDATA[code-fridays]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Code Fridays]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>6</wp:term_id>
		<wp:tag_slug><![CDATA[projects]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Projects]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[pyconau]]></wp:tag_slug>
		<wp:tag_name><![CDATA[pyconau]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[python]]></wp:tag_slug>
		<wp:tag_name><![CDATA[python]]></wp:tag_name>
	</wp:tag>
				<wp:term><wp:term_id>2</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[navigator]]></wp:term_slug><wp:term_name><![CDATA[Navigator]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.2.3</generator>
<site xmlns="com-wordpress:feed-additions:1">155863555</site>
		<item>
		<title>cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original</title>
		<link>https://jmckew.com/2018/11/23/episode-1-optimization/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original/</link>
		<pubDate>Wed, 19 Dec 2018 02:52:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://box5742.temp.domains/~jmckewco/wp-content/uploads/2018/12/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 02:52:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 02:52:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>13</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2018/12/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:989;s:6:"height";i:670;s:4:"file";s:57:"2018/12/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:57:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:57:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-300x203.png";s:5:"width";i:300;s:6:"height";i:203;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:57:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-768x520.png";s:5:"width";i:768;s:6:"height";i:520;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original</title>
		<link>https://jmckew.com/2018/11/23/episode-1-optimization/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-2/</link>
		<pubDate>Wed, 19 Dec 2018 03:02:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://box5742.temp.domains/~jmckewco/wp-content/uploads/2018/12/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 03:02:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 03:02:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>13</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2018/12/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:989;s:6:"height";i:670;s:4:"file";s:59:"2018/12/cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:59:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:59:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1-300x203.png";s:5:"width";i:300;s:6:"height";i:203;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:59:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1-768x520.png";s:5:"width";i:768;s:6:"height";i:520;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:59:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1-300x203.png";s:5:"width";i:300;s:6:"height";i:203;s:9:"mime-type";s:9:"image/png";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:59:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1-350x230.png";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:24:"responsiveblogily-slider";a:4:{s:4:"file";s:59:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1-850x576.png";s:5:"width";i:850;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:59:"cf08591b-7f2b-47bd-8d0c-8a4d27c0d72d-original-1-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>9c5b47f0-80d1-4806-8e3c-968e46604b29-original</title>
		<link>https://jmckew.com/2018/11/30/episode-2-kew-it/9c5b47f0-80d1-4806-8e3c-968e46604b29-original/</link>
		<pubDate>Wed, 19 Dec 2018 03:08:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://box5742.temp.domains/~jmckewco/wp-content/uploads/2018/12/9c5b47f0-80d1-4806-8e3c-968e46604b29-original.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 03:08:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 03:08:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[9c5b47f0-80d1-4806-8e3c-968e46604b29-original]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>22</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2018/12/9c5b47f0-80d1-4806-8e3c-968e46604b29-original.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/9c5b47f0-80d1-4806-8e3c-968e46604b29-original.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:689;s:6:"height";i:862;s:4:"file";s:57:"2018/12/9c5b47f0-80d1-4806-8e3c-968e46604b29-original.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:57:"9c5b47f0-80d1-4806-8e3c-968e46604b29-original-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:57:"9c5b47f0-80d1-4806-8e3c-968e46604b29-original-240x300.png";s:5:"width";i:240;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:57:"9c5b47f0-80d1-4806-8e3c-968e46604b29-original-300x375.png";s:5:"width";i:300;s:6:"height";i:375;s:9:"mime-type";s:9:"image/png";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:57:"9c5b47f0-80d1-4806-8e3c-968e46604b29-original-350x230.png";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:57:"9c5b47f0-80d1-4806-8e3c-968e46604b29-original-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>1507940147251-drlcss</title>
		<link>https://jmckew.com/2018/12/14/episode-4-visualization/1507940147251-drlcss/</link>
		<pubDate>Wed, 19 Dec 2018 03:12:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://box5742.temp.domains/~jmckewco/wp-content/uploads/2018/12/1507940147251-drlcss.mp4</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 03:12:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 03:12:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1507940147251-drlcss]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>27</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2018/12/1507940147251-drlcss.mp4]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/1507940147251-drlcss.mp4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:10:{s:7:"bitrate";i:1438494;s:8:"filesize";i:4151432;s:9:"mime_type";s:15:"video/quicktime";s:6:"length";i:23;s:16:"length_formatted";s:4:"0:23";s:5:"width";i:1258;s:6:"height";i:720;s:10:"fileformat";s:3:"mp4";s:10:"dataformat";s:9:"quicktime";s:17:"created_timestamp";i:-2082844800;}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ezgif.com-video-to-gif</title>
		<link>https://jmckew.com/2018/12/21/episode-5-android-multi-touch/ezgif-com-video-to-gif/</link>
		<pubDate>Thu, 20 Dec 2018 10:05:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2018-12-20 10:05:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-20 10:05:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ezgif-com-video-to-gif]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>47</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/ezgif.com-video-to-gif.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:640;s:4:"file";s:34:"2018/12/ezgif.com-video-to-gif.gif";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"ezgif.com-video-to-gif-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:34:"ezgif.com-video-to-gif-169x300.gif";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:34:"ezgif.com-video-to-gif-300x533.gif";s:5:"width";i:300;s:6:"height";i:533;s:9:"mime-type";s:9:"image/gif";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:34:"ezgif.com-video-to-gif-350x230.gif";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/gif";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:34:"ezgif.com-video-to-gif-300x180.gif";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ezgif.com-video-to-gif</title>
		<link>https://jmckew.com/2018/12/21/episode-5-android-multi-touch/ezgif-com-video-to-gif-2/</link>
		<pubDate>Thu, 20 Dec 2018 10:06:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date><![CDATA[2018-12-20 10:06:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-20 10:06:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ezgif-com-video-to-gif-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>47</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif-1.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/ezgif.com-video-to-gif-1.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:640;s:4:"file";s:36:"2018/12/ezgif.com-video-to-gif-1.gif";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-1-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-1-169x300.gif";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-1-300x533.gif";s:5:"width";i:300;s:6:"height";i:533;s:9:"mime-type";s:9:"image/gif";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-1-350x230.gif";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/gif";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-1-300x180.gif";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ezgif.com-video-to-gif</title>
		<link>https://jmckew.com/2018/12/21/episode-5-android-multi-touch/ezgif-com-video-to-gif-3/</link>
		<pubDate>Thu, 20 Dec 2018 10:10:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif-2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2018-12-20 10:10:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-20 10:10:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ezgif-com-video-to-gif-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>47</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif-2.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/ezgif.com-video-to-gif-2.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:360;s:6:"height";i:640;s:4:"file";s:36:"2018/12/ezgif.com-video-to-gif-2.gif";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-2-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-2-169x300.gif";s:5:"width";i:169;s:6:"height";i:300;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-2-300x533.gif";s:5:"width";i:300;s:6:"height";i:533;s:9:"mime-type";s:9:"image/gif";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-2-350x230.gif";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/gif";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:36:"ezgif.com-video-to-gif-2-300x180.gif";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ezgif.com-video-to-gif (1)</title>
		<link>https://jmckew.com/2018/12/14/episode-4-visualization/ezgif-com-video-to-gif-1/</link>
		<pubDate>Thu, 20 Dec 2018 10:14:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif-1-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date><![CDATA[2018-12-20 10:14:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-20 10:14:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ezgif-com-video-to-gif-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>27</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif-1-1.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018/12/ezgif.com-video-to-gif-1-1.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:343;s:4:"file";s:38:"2018/12/ezgif.com-video-to-gif-1-1.gif";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"ezgif.com-video-to-gif-1-1-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:38:"ezgif.com-video-to-gif-1-1-300x172.gif";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:38:"ezgif.com-video-to-gif-1-1-300x172.gif";s:5:"width";i:300;s:6:"height";i:172;s:9:"mime-type";s:9:"image/gif";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:38:"ezgif.com-video-to-gif-1-1-350x230.gif";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/gif";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:38:"ezgif.com-video-to-gif-1-1-300x180.gif";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Fritzing_FEKX395tbZ</title>
		<link>https://jmckew.com/2019/01/18/episode-9-web-enabled-universal-remote-part-1/fritzing_fekx395tbz/</link>
		<pubDate>Wed, 16 Jan 2019 06:58:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/Fritzing_FEKX395tbZ.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2019-01-16 16:58:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-16 06:58:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[fritzing_fekx395tbz]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>104</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/Fritzing_FEKX395tbZ.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/Fritzing_FEKX395tbZ.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:866;s:6:"height";i:649;s:4:"file";s:31:"2019/01/Fritzing_FEKX395tbZ.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"Fritzing_FEKX395tbZ-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"Fritzing_FEKX395tbZ-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:31:"Fritzing_FEKX395tbZ-768x576.png";s:5:"width";i:768;s:6:"height";i:576;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"Fritzing_FEKX395tbZ-300x225.png";s:5:"width";i:300;s:6:"height";i:225;s:9:"mime-type";s:9:"image/png";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:31:"Fritzing_FEKX395tbZ-350x230.png";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:24:"responsiveblogily-slider";a:4:{s:4:"file";s:31:"Fritzing_FEKX395tbZ-850x637.png";s:5:"width";i:850;s:6:"height";i:637;s:9:"mime-type";s:9:"image/png";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:31:"Fritzing_FEKX395tbZ-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Fritzing_LqJjWJppSm</title>
		<link>https://jmckew.com/2019/01/18/episode-9-web-enabled-universal-remote-part-1/fritzing_lqjjwjppsm/</link>
		<pubDate>Wed, 16 Jan 2019 07:02:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/Fritzing_LqJjWJppSm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date><![CDATA[2019-01-16 17:02:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-16 07:02:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[fritzing_lqjjwjppsm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>104</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/Fritzing_LqJjWJppSm.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/Fritzing_LqJjWJppSm.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:782;s:6:"height";i:669;s:4:"file";s:31:"2019/01/Fritzing_LqJjWJppSm.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"Fritzing_LqJjWJppSm-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"Fritzing_LqJjWJppSm-300x257.png";s:5:"width";i:300;s:6:"height";i:257;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:31:"Fritzing_LqJjWJppSm-768x657.png";s:5:"width";i:768;s:6:"height";i:657;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:31:"Fritzing_LqJjWJppSm-300x257.png";s:5:"width";i:300;s:6:"height";i:257;s:9:"mime-type";s:9:"image/png";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:31:"Fritzing_LqJjWJppSm-350x230.png";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:31:"Fritzing_LqJjWJppSm-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Harmonic1_2</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/harmonic1_2/</link>
		<pubDate>Wed, 30 Jan 2019 07:43:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/Harmonic1_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 17:43:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 07:43:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[harmonic1_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/Harmonic1_2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/Harmonic1_2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:908;s:4:"file";s:23:"2019/01/Harmonic1_2.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"Harmonic1_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"Harmonic1_2-300x142.png";s:5:"width";i:300;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:23:"Harmonic1_2-768x363.png";s:5:"width";i:768;s:6:"height";i:363;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:24:"Harmonic1_2-1024x484.png";s:5:"width";i:1024;s:6:"height";i:484;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:23:"Harmonic1_2-300x142.png";s:5:"width";i:300;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:23:"Harmonic1_2-350x230.png";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:24:"responsiveblogily-slider";a:4:{s:4:"file";s:23:"Harmonic1_2-850x402.png";s:5:"width";i:850;s:6:"height";i:402;s:9:"mime-type";s:9:"image/png";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:23:"Harmonic1_2-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Harmonic1_2_Combined</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/harmonic1_2_combined/</link>
		<pubDate>Wed, 30 Jan 2019 07:49:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/Harmonic1_2_Combined.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 17:49:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 07:49:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[harmonic1_2_combined]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/Harmonic1_2_Combined.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/Harmonic1_2_Combined.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1920;s:6:"height";i:908;s:4:"file";s:32:"2019/01/Harmonic1_2_Combined.png";s:5:"sizes";a:8:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"Harmonic1_2_Combined-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"Harmonic1_2_Combined-300x142.png";s:5:"width";i:300;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:32:"Harmonic1_2_Combined-768x363.png";s:5:"width";i:768;s:6:"height";i:363;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:33:"Harmonic1_2_Combined-1024x484.png";s:5:"width";i:1024;s:6:"height";i:484;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:32:"Harmonic1_2_Combined-300x142.png";s:5:"width";i:300;s:6:"height";i:142;s:9:"mime-type";s:9:"image/png";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:32:"Harmonic1_2_Combined-350x230.png";s:5:"width";i:350;s:6:"height";i:230;s:9:"mime-type";s:9:"image/png";}s:24:"responsiveblogily-slider";a:4:{s:4:"file";s:32:"Harmonic1_2_Combined-850x402.png";s:5:"width";i:850;s:6:"height";i:402;s:9:"mime-type";s:9:"image/png";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:32:"Harmonic1_2_Combined-300x180.png";s:5:"width";i:300;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn/</link>
		<pubDate>Wed, 30 Jan 2019 08:05:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 18:05:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 08:05:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/CodeCogsEqn.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:464;s:6:"height";i:43;s:4:"file";s:23:"2019/01/CodeCogsEqn.gif";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"CodeCogsEqn-150x43.gif";s:5:"width";i:150;s:6:"height";i:43;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:22:"CodeCogsEqn-300x28.gif";s:5:"width";i:300;s:6:"height";i:28;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:22:"CodeCogsEqn-300x28.gif";s:5:"width";i:300;s:6:"height";i:28;s:9:"mime-type";s:9:"image/gif";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:22:"CodeCogsEqn-350x43.gif";s:5:"width";i:350;s:6:"height";i:43;s:9:"mime-type";s:9:"image/gif";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:22:"CodeCogsEqn-300x43.gif";s:5:"width";i:300;s:6:"height";i:43;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn-2/</link>
		<pubDate>Wed, 30 Jan 2019 08:31:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 18:31:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 08:31:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-1.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/CodeCogsEqn-1.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:464;s:6:"height";i:43;s:4:"file";s:25:"2019/01/CodeCogsEqn-1.gif";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-1-150x43.gif";s:5:"width";i:150;s:6:"height";i:43;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:24:"CodeCogsEqn-1-300x28.gif";s:5:"width";i:300;s:6:"height";i:28;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-1-300x28.gif";s:5:"width";i:300;s:6:"height";i:28;s:9:"mime-type";s:9:"image/gif";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:24:"CodeCogsEqn-1-350x43.gif";s:5:"width";i:350;s:6:"height";i:43;s:9:"mime-type";s:9:"image/gif";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:24:"CodeCogsEqn-1-300x43.gif";s:5:"width";i:300;s:6:"height";i:43;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn (1)</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn-1/</link>
		<pubDate>Wed, 30 Jan 2019 08:31:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-1-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 18:31:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 08:31:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-1-1.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/CodeCogsEqn-1-1.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:357;s:6:"height";i:20;s:4:"file";s:27:"2019/01/CodeCogsEqn-1-1.gif";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"CodeCogsEqn-1-1-150x20.gif";s:5:"width";i:150;s:6:"height";i:20;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:26:"CodeCogsEqn-1-1-300x17.gif";s:5:"width";i:300;s:6:"height";i:17;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"CodeCogsEqn-1-1-300x17.gif";s:5:"width";i:300;s:6:"height";i:17;s:9:"mime-type";s:9:"image/gif";}s:22:"responsiveblogily-grid";a:4:{s:4:"file";s:26:"CodeCogsEqn-1-1-350x20.gif";s:5:"width";i:350;s:6:"height";i:20;s:9:"mime-type";s:9:"image/gif";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:26:"CodeCogsEqn-1-1-300x20.gif";s:5:"width";i:300;s:6:"height";i:20;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn (2)</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn-2-2/</link>
		<pubDate>Wed, 30 Jan 2019 08:32:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 18:32:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 08:32:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn-2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-2.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/CodeCogsEqn-2.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:222;s:6:"height";i:20;s:4:"file";s:25:"2019/01/CodeCogsEqn-2.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-2-150x20.gif";s:5:"width";i:150;s:6:"height";i:20;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn (3)</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn-3/</link>
		<pubDate>Wed, 30 Jan 2019 08:35:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-3.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 18:35:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 08:35:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-3.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/CodeCogsEqn-3.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:244;s:6:"height";i:34;s:4:"file";s:25:"2019/01/CodeCogsEqn-3.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-3-150x34.gif";s:5:"width";i:150;s:6:"height";i:34;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn (4)</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn-4/</link>
		<pubDate>Wed, 30 Jan 2019 08:37:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-4.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 18:37:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 08:37:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-4.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/CodeCogsEqn-4.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:272;s:6:"height";i:18;s:4:"file";s:25:"2019/01/CodeCogsEqn-4.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-4-150x18.gif";s:5:"width";i:150;s:6:"height";i:18;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn (5)</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn-5/</link>
		<pubDate>Wed, 30 Jan 2019 08:39:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-5.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 18:39:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 08:39:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn-5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-5.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/CodeCogsEqn-5.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:341;s:6:"height";i:34;s:4:"file";s:25:"2019/01/CodeCogsEqn-5.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-5-150x34.gif";s:5:"width";i:150;s:6:"height";i:34;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:24:"CodeCogsEqn-5-300x30.gif";s:5:"width";i:300;s:6:"height";i:30;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-5-300x30.gif";s:5:"width";i:300;s:6:"height";i:30;s:9:"mime-type";s:9:"image/gif";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:24:"CodeCogsEqn-5-300x34.gif";s:5:"width";i:300;s:6:"height";i:34;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn (6)</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn-6/</link>
		<pubDate>Wed, 30 Jan 2019 08:40:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-6.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 18:40:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 08:40:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn-6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-6.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/CodeCogsEqn-6.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:289;s:6:"height";i:18;s:4:"file";s:25:"2019/01/CodeCogsEqn-6.gif";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-6-150x18.gif";s:5:"width";i:150;s:6:"height";i:18;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn (7)</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn-7/</link>
		<pubDate>Wed, 30 Jan 2019 08:41:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-7.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2019-01-30 18:41:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-30 08:41:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn-7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-7.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/01/CodeCogsEqn-7.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:337;s:6:"height";i:22;s:4:"file";s:25:"2019/01/CodeCogsEqn-7.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-7-150x22.gif";s:5:"width";i:150;s:6:"height";i:22;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:24:"CodeCogsEqn-7-300x20.gif";s:5:"width";i:300;s:6:"height";i:20;s:9:"mime-type";s:9:"image/gif";}s:14:"post-thumbnail";a:4:{s:4:"file";s:24:"CodeCogsEqn-7-300x20.gif";s:5:"width";i:300;s:6:"height";i:20;s:9:"mime-type";s:9:"image/gif";}s:23:"responsiveblogily-small";a:4:{s:4:"file";s:24:"CodeCogsEqn-7-300x22.gif";s:5:"width";i:300;s:6:"height";i:22;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CodeCogsEqn</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/codecogseqn-8/</link>
		<pubDate>Mon, 04 Feb 2019 21:14:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/02/CodeCogsEqn.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date><![CDATA[2019-02-05 07:14:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-04 21:14:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[codecogseqn-8]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>123</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/02/CodeCogsEqn.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/02/CodeCogsEqn.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:455;s:6:"height";i:43;s:4:"file";s:23:"2019/02/CodeCogsEqn.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"CodeCogsEqn-150x43.gif";s:5:"width";i:150;s:6:"height";i:43;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:22:"CodeCogsEqn-300x28.gif";s:5:"width";i:300;s:6:"height";i:28;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Current Transformer Diagram</title>
		<link>https://jmckew.com/2019/03/01/episode-15-what-is-a-c-t/trans53/</link>
		<pubDate>Thu, 28 Feb 2019 21:19:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/03/trans53.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[https://www.electronics-tutorials.ws/transformer/current-transformer.html]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date><![CDATA[2019-03-01 07:19:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-28 21:19:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[trans53]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>171</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/03/trans53.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/trans53.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:510;s:6:"height";i:264;s:4:"file";s:19:"2019/03/trans53.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"trans53-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:19:"trans53-300x155.gif";s:5:"width";i:300;s:6:"height";i:155;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>nettopo</title>
		<link>https://jmckew.com/2019/03/08/episode-16-networking-basics/nettopo/</link>
		<pubDate>Thu, 07 Mar 2019 06:22:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/03/nettopo.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2019-03-07 16:22:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-07 06:22:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nettopo]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>185</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/03/nettopo.gif]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/nettopo.gif]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:583;s:6:"height";i:391;s:4:"file";s:19:"2019/03/nettopo.gif";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"nettopo-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:19:"nettopo-300x201.gif";s:5:"width";i:300;s:6:"height";i:201;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>JackMcKewResumeTranscript (4)</title>
		<link>https://jmckew.com/cv-professional/jackmckewresumetranscript-4/</link>
		<pubDate>Wed, 13 Mar 2019 11:37:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/03/JackMcKewResumeTranscript-4.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 21:37:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 11:37:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jackmckewresumetranscript-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/03/JackMcKewResumeTranscript-4.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/JackMcKewResumeTranscript-4.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"JackMcKewResumeTranscript-4-pdf-106x150.jpg";s:5:"width";i:106;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:43:"JackMcKewResumeTranscript-4-pdf-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:44:"JackMcKewResumeTranscript-4-pdf-724x1024.jpg";s:5:"width";i:724;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:35:"JackMcKewResumeTranscript-4-pdf.jpg";s:5:"width";i:1058;s:6:"height";i:1497;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>JackMcKewResumeTranscript (4)</title>
		<link>https://jmckew.com/cv-professional/jackmckewresumetranscript-4-2/</link>
		<pubDate>Wed, 13 Mar 2019 11:38:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/03/JackMcKewResumeTranscript-4-1.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 21:38:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 11:38:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jackmckewresumetranscript-4-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/03/JackMcKewResumeTranscript-4-1.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/JackMcKewResumeTranscript-4-1.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:45:"JackMcKewResumeTranscript-4-1-pdf-106x150.jpg";s:5:"width";i:106;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:45:"JackMcKewResumeTranscript-4-1-pdf-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:46:"JackMcKewResumeTranscript-4-1-pdf-724x1024.jpg";s:5:"width";i:724;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:37:"JackMcKewResumeTranscript-4-1-pdf.jpg";s:5:"width";i:1058;s:6:"height";i:1497;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>JackMcKewResume</title>
		<link>https://jmckew.com/cv-professional/jackmckewresume/</link>
		<pubDate>Wed, 13 Mar 2019 11:40:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/03/JackMcKewResume.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 21:40:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 11:40:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jackmckewresume]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/03/JackMcKewResume.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/JackMcKewResume.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"JackMcKewResume-pdf-106x150.jpg";s:5:"width";i:106;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:31:"JackMcKewResume-pdf-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:32:"JackMcKewResume-pdf-724x1024.jpg";s:5:"width";i:724;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:23:"JackMcKewResume-pdf.jpg";s:5:"width";i:1058;s:6:"height";i:1497;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Jack-McKew-resume</title>
		<link>https://jmckew.com/cv-professional/jack-mckew-resume/</link>
		<pubDate>Wed, 13 Mar 2019 11:42:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/03/Jack-McKew-resume.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 21:42:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 11:42:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jack-mckew-resume]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/03/Jack-McKew-resume.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/Jack-McKew-resume.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"Jack-McKew-resume-pdf-106x150.jpg";s:5:"width";i:106;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:33:"Jack-McKew-resume-pdf-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:34:"Jack-McKew-resume-pdf-724x1024.jpg";s:5:"width";i:724;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:25:"Jack-McKew-resume-pdf.jpg";s:5:"width";i:1058;s:6:"height";i:1497;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Final_Year_Project_Part_B (1)</title>
		<link>https://jmckew.com/cv-professional/final_year_project_part_b-1/</link>
		<pubDate>Wed, 13 Mar 2019 11:43:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/03/Final_Year_Project_Part_B-1.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 21:43:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 11:43:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[final_year_project_part_b-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/03/Final_Year_Project_Part_B-1.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/Final_Year_Project_Part_B-1.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"Final_Year_Project_Part_B-1-pdf-116x150.jpg";s:5:"width";i:116;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:43:"Final_Year_Project_Part_B-1-pdf-232x300.jpg";s:5:"width";i:232;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:44:"Final_Year_Project_Part_B-1-pdf-791x1024.jpg";s:5:"width";i:791;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:35:"Final_Year_Project_Part_B-1-pdf.jpg";s:5:"width";i:1088;s:6:"height";i:1408;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Jack-McKew-resume</title>
		<link>https://jmckew.com/cv-professional/jack-mckew-resume-2/</link>
		<pubDate>Wed, 13 Mar 2019 12:02:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/03/Jack-McKew-resume-1.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 22:02:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 12:02:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jack-mckew-resume-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/03/Jack-McKew-resume-1.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/Jack-McKew-resume-1.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"Jack-McKew-resume-1-pdf-106x150.jpg";s:5:"width";i:106;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"Jack-McKew-resume-1-pdf-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:36:"Jack-McKew-resume-1-pdf-724x1024.jpg";s:5:"width";i:724;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:27:"Jack-McKew-resume-1-pdf.jpg";s:5:"width";i:1058;s:6:"height";i:1497;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Jack McKew Photo</title>
		<link>https://jmckew.com/contact/jack-mckew-photo/</link>
		<pubDate>Fri, 22 Mar 2019 07:30:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/03/Jack-McKew-Photo.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2019-03-22 17:30:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-22 07:30:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[jack-mckew-photo]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>220</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/03/Jack-McKew-Photo.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/03/Jack-McKew-Photo.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:591;s:6:"height";i:591;s:4:"file";s:28:"2019/03/Jack-McKew-Photo.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"Jack-McKew-Photo-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:28:"Jack-McKew-Photo-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>https://jmckew.com/2019/04/12/python-for-the-finance-industry/image/</link>
		<pubDate>Thu, 11 Apr 2019 07:48:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date><![CDATA[2019-04-11 17:48:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-11 07:48:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>256</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:484;s:6:"height";i:175;s:4:"file";s:17:"2019/04/image.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"image-300x108.png";s:5:"width";i:300;s:6:"height";i:108;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/image.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Figure_1</title>
		<link>https://jmckew.com/2019/04/12/python-for-the-finance-industry/figure_1/</link>
		<pubDate>Thu, 11 Apr 2019 07:51:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/Figure_1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date><![CDATA[2019-04-11 17:51:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-11 07:51:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[figure_1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>256</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/Figure_1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/Figure_1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1400;s:6:"height";i:694;s:4:"file";s:20:"2019/04/Figure_1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"Figure_1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"Figure_1-300x149.png";s:5:"width";i:300;s:6:"height";i:149;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"Figure_1-768x381.png";s:5:"width";i:768;s:6:"height";i:381;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"Figure_1-1024x508.png";s:5:"width";i:1024;s:6:"height";i:508;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Figure_1</title>
		<link>https://jmckew.com/2019/04/12/python-for-the-finance-industry/figure_1-2/</link>
		<pubDate>Thu, 11 Apr 2019 07:52:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/Figure_1-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date><![CDATA[2019-04-11 17:52:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-11 07:52:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[figure_1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>256</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/Figure_1-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/Figure_1-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1400;s:6:"height";i:694;s:4:"file";s:22:"2019/04/Figure_1-1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"Figure_1-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"Figure_1-1-300x149.png";s:5:"width";i:300;s:6:"height";i:149;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"Figure_1-1-768x381.png";s:5:"width";i:768;s:6:"height";i:381;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:23:"Figure_1-1-1024x508.png";s:5:"width";i:1024;s:6:"height";i:508;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Figure_2</title>
		<link>https://jmckew.com/2019/04/12/python-for-the-finance-industry/figure_2/</link>
		<pubDate>Thu, 11 Apr 2019 07:53:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/Figure_2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date><![CDATA[2019-04-11 17:53:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-11 07:53:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[figure_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>256</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/Figure_2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/Figure_2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1400;s:6:"height";i:694;s:4:"file";s:20:"2019/04/Figure_2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"Figure_2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:20:"Figure_2-300x149.png";s:5:"width";i:300;s:6:"height";i:149;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:20:"Figure_2-768x381.png";s:5:"width";i:768;s:6:"height";i:381;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:21:"Figure_2-1024x508.png";s:5:"width";i:1024;s:6:"height";i:508;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>https://jmckew.com/2019/04/19/portfolio-balancing-with-historical-stock-data/image-2/</link>
		<pubDate>Wed, 17 Apr 2019 11:54:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2019-04-17 21:54:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-17 11:54:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>264</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:591;s:6:"height";i:290;s:4:"file";s:19:"2019/04/image-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x147.png";s:5:"width";i:300;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>https://jmckew.com/2019/04/19/portfolio-balancing-with-historical-stock-data/image-3/</link>
		<pubDate>Wed, 17 Apr 2019 11:55:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/image-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date><![CDATA[2019-04-17 21:55:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-17 11:55:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>264</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/image-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/image-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:870;s:6:"height";i:662;s:4:"file";s:19:"2019/04/image-2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"image-2-300x228.png";s:5:"width";i:300;s:6:"height";i:228;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-2-768x584.png";s:5:"width";i:768;s:6:"height";i:584;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>chrome_dUqVqnTloj</title>
		<link>https://jmckew.com/2019/04/26/efficient-frontier-for-balancing-portfolios/chrome_duqvqntloj/</link>
		<pubDate>Thu, 25 Apr 2019 06:37:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/chrome_dUqVqnTloj.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 16:37:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 06:37:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[chrome_duqvqntloj]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>276</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/chrome_dUqVqnTloj.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/chrome_dUqVqnTloj.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:524;s:6:"height";i:224;s:4:"file";s:29:"2019/04/chrome_dUqVqnTloj.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"chrome_dUqVqnTloj-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"chrome_dUqVqnTloj-300x128.png";s:5:"width";i:300;s:6:"height";i:128;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Code_lDUKAxc9JU</title>
		<link>https://jmckew.com/2019/04/26/efficient-frontier-for-balancing-portfolios/code_ldukaxc9ju/</link>
		<pubDate>Thu, 25 Apr 2019 07:01:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/Code_lDUKAxc9JU.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 17:01:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 07:01:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[code_ldukaxc9ju]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>276</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/Code_lDUKAxc9JU.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/Code_lDUKAxc9JU.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:615;s:6:"height";i:284;s:4:"file";s:27:"2019/04/Code_lDUKAxc9JU.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"Code_lDUKAxc9JU-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"Code_lDUKAxc9JU-300x139.png";s:5:"width";i:300;s:6:"height";i:139;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Code_R2bA54PriC</title>
		<link>https://jmckew.com/2019/04/26/efficient-frontier-for-balancing-portfolios/code_r2ba54pric/</link>
		<pubDate>Thu, 25 Apr 2019 07:02:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/Code_R2bA54PriC.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 17:02:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 07:02:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[code_r2ba54pric]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>276</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/Code_R2bA54PriC.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/Code_R2bA54PriC.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:863;s:6:"height";i:660;s:4:"file";s:27:"2019/04/Code_R2bA54PriC.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"Code_R2bA54PriC-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"Code_R2bA54PriC-300x229.png";s:5:"width";i:300;s:6:"height";i:229;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:27:"Code_R2bA54PriC-768x587.png";s:5:"width";i:768;s:6:"height";i:587;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Code_3sKudlcKG6</title>
		<link>https://jmckew.com/2019/04/26/efficient-frontier-for-balancing-portfolios/code_3skudlckg6/</link>
		<pubDate>Thu, 25 Apr 2019 08:40:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/04/Code_3sKudlcKG6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date><![CDATA[2019-04-25 18:40:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 08:40:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[code_3skudlckg6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>276</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/04/Code_3sKudlcKG6.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/04/Code_3sKudlcKG6.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:951;s:6:"height";i:720;s:4:"file";s:27:"2019/04/Code_3sKudlcKG6.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"Code_3sKudlcKG6-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"Code_3sKudlcKG6-300x227.png";s:5:"width";i:300;s:6:"height";i:227;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:27:"Code_3sKudlcKG6-768x581.png";s:5:"width";i:768;s:6:"height";i:581;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>python_Dh0hFJKqDx</title>
		<link>https://jmckew.com/2019/05/31/distributing-python-code/python_dh0hfjkqdx/</link>
		<pubDate>Thu, 30 May 2019 10:32:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/05/python_Dh0hFJKqDx.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date><![CDATA[2019-05-30 20:32:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-30 10:32:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python_dh0hfjkqdx]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>310</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/05/python_Dh0hFJKqDx.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/python_Dh0hFJKqDx.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:302;s:6:"height";i:199;s:4:"file";s:29:"2019/05/python_Dh0hFJKqDx.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"python_Dh0hFJKqDx-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"python_Dh0hFJKqDx-300x198.png";s:5:"width";i:300;s:6:"height";i:198;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>cmd_PXbANiLF4N</title>
		<link>https://jmckew.com/2019/05/31/distributing-python-code/cmd_pxbanilf4n/</link>
		<pubDate>Thu, 30 May 2019 10:42:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/05/cmd_PXbANiLF4N.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date><![CDATA[2019-05-30 20:42:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-30 10:42:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cmd_pxbanilf4n]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>310</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/05/cmd_PXbANiLF4N.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/cmd_PXbANiLF4N.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1348;s:6:"height";i:766;s:4:"file";s:26:"2019/05/cmd_PXbANiLF4N.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"cmd_PXbANiLF4N-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:26:"cmd_PXbANiLF4N-300x170.png";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:26:"cmd_PXbANiLF4N-768x436.png";s:5:"width";i:768;s:6:"height";i:436;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:27:"cmd_PXbANiLF4N-1024x582.png";s:5:"width";i:1024;s:6:"height";i:582;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>explorer_409CFHxhyh</title>
		<link>https://jmckew.com/2019/05/31/distributing-python-code/explorer_409cfhxhyh/</link>
		<pubDate>Thu, 30 May 2019 10:48:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/05/explorer_409CFHxhyh.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date><![CDATA[2019-05-30 20:48:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-30 10:48:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[explorer_409cfhxhyh]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>310</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/05/explorer_409CFHxhyh.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/explorer_409CFHxhyh.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:522;s:6:"height";i:720;s:4:"file";s:31:"2019/05/explorer_409CFHxhyh.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"explorer_409CFHxhyh-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"explorer_409CFHxhyh-218x300.png";s:5:"width";i:218;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>pyinstall_example_w5KP1B327W</title>
		<link>https://jmckew.com/2019/05/31/distributing-python-code/pyinstall_example_w5kp1b327w/</link>
		<pubDate>Thu, 30 May 2019 10:50:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/05/pyinstall_example_w5KP1B327W.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date><![CDATA[2019-05-30 20:50:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-30 10:50:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pyinstall_example_w5kp1b327w]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>310</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/05/pyinstall_example_w5KP1B327W.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/05/pyinstall_example_w5KP1B327W.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1348;s:6:"height";i:766;s:4:"file";s:40:"2019/05/pyinstall_example_w5KP1B327W.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"pyinstall_example_w5KP1B327W-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:40:"pyinstall_example_w5KP1B327W-300x170.png";s:5:"width";i:300;s:6:"height";i:170;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:40:"pyinstall_example_w5KP1B327W-768x436.png";s:5:"width";i:768;s:6:"height";i:436;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:41:"pyinstall_example_w5KP1B327W-1024x582.png";s:5:"width";i:1024;s:6:"height";i:582;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>example</title>
		<link>https://jmckew.com/2019/06/28/python-and-ocr/example/</link>
		<pubDate>Thu, 27 Jun 2019 06:11:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/06/example.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date><![CDATA[2019-06-27 16:11:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-27 06:11:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>342</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/06/example.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/06/example.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:475;s:6:"height";i:205;s:4:"file";s:19:"2019/06/example.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"example-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"example-300x129.png";s:5:"width";i:300;s:6:"height";i:129;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>example_2</title>
		<link>https://jmckew.com/2019/06/28/python-and-ocr/example_2/</link>
		<pubDate>Thu, 27 Jun 2019 06:31:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/06/example_2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date><![CDATA[2019-06-27 16:31:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-27 06:31:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example_2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>342</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/06/example_2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/06/example_2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:1109;s:4:"file";s:21:"2019/06/example_2.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"example_2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"example_2-216x300.jpg";s:5:"width";i:216;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:22:"example_2-768x1065.jpg";s:5:"width";i:768;s:6:"height";i:1065;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:22:"example_2-739x1024.jpg";s:5:"width";i:739;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>example_3</title>
		<link>https://jmckew.com/2019/06/28/python-and-ocr/example_3/</link>
		<pubDate>Thu, 27 Jun 2019 06:34:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/06/example_3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date><![CDATA[2019-06-27 16:34:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-27 06:34:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[example_3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>342</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/06/example_3.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/06/example_3.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:600;s:6:"height";i:335;s:4:"file";s:21:"2019/06/example_3.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"example_3-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"example_3-300x168.jpg";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>https://jmckew.com/2019/08/06/pycon-au-2019-saturday-in-summary/image-4/</link>
		<pubDate>Mon, 05 Aug 2019 09:53:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/08/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date><![CDATA[2019-08-05 19:53:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-05 09:53:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>371</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/08/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1667;s:6:"height";i:733;s:4:"file";s:17:"2019/08/image.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"image-300x132.png";s:5:"width";i:300;s:6:"height";i:132;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"image-768x338.png";s:5:"width";i:768;s:6:"height";i:338;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:18:"image-1024x450.png";s:5:"width";i:1024;s:6:"height";i:450;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/image.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>190819_JackMcKewResume</title>
		<link>https://jmckew.com/cv-professional/190819_jackmckewresume/</link>
		<pubDate>Mon, 19 Aug 2019 10:57:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/08/190819_JackMcKewResume.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date><![CDATA[2019-08-19 20:57:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-19 10:57:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[190819_jackmckewresume]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/08/190819_JackMcKewResume.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/190819_JackMcKewResume.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:38:"190819_JackMcKewResume-pdf-106x150.jpg";s:5:"width";i:106;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:38:"190819_JackMcKewResume-pdf-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:39:"190819_JackMcKewResume-pdf-724x1024.jpg";s:5:"width";i:724;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:30:"190819_JackMcKewResume-pdf.jpg";s:5:"width";i:1058;s:6:"height";i:1497;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>190819_JackMcKewResume</title>
		<link>https://jmckew.com/cv-professional/190819_jackmckewresume-2/</link>
		<pubDate>Mon, 19 Aug 2019 10:57:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/08/190819_JackMcKewResume-1.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date><![CDATA[2019-08-19 20:57:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-19 10:57:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[190819_jackmckewresume-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/08/190819_JackMcKewResume-1.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/190819_JackMcKewResume-1.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"190819_JackMcKewResume-1-pdf-106x150.jpg";s:5:"width";i:106;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:40:"190819_JackMcKewResume-1-pdf-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:41:"190819_JackMcKewResume-1-pdf-724x1024.jpg";s:5:"width";i:724;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:32:"190819_JackMcKewResume-1-pdf.jpg";s:5:"width";i:1058;s:6:"height";i:1497;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>190819_JackMcKewResume</title>
		<link>https://jmckew.com/cv-professional/190819_jackmckewresume-3/</link>
		<pubDate>Mon, 19 Aug 2019 11:00:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/08/190819_JackMcKewResume-2.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date><![CDATA[2019-08-19 21:00:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-19 11:00:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[190819_jackmckewresume-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/08/190819_JackMcKewResume-2.pdf]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/190819_JackMcKewResume-2.pdf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:40:"190819_JackMcKewResume-2-pdf-106x150.jpg";s:5:"width";i:106;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:40:"190819_JackMcKewResume-2-pdf-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:41:"190819_JackMcKewResume-2-pdf-724x1024.jpg";s:5:"width";i:724;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:4:"full";a:4:{s:4:"file";s:32:"190819_JackMcKewResume-2-pdf.jpg";s:5:"width";i:1058;s:6:"height";i:1497;s:9:"mime-type";s:10:"image/jpeg";}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-1</title>
		<link>https://jmckew.com/2019/08/30/python-project-workflow/image-1/</link>
		<pubDate>Thu, 29 Aug 2019 12:10:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/08/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date><![CDATA[2019-08-29 22:10:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-29 12:10:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>416</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/08/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:960;s:6:"height";i:480;s:4:"file";s:19:"2019/08/image-1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-1-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-2</title>
		<link>https://jmckew.com/2019/08/30/python-project-workflow/image-2-2/</link>
		<pubDate>Thu, 29 Aug 2019 12:15:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/08/image-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date><![CDATA[2019-08-29 22:15:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-29 12:15:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-2-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>416</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/08/image-2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/image-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:904;s:6:"height";i:500;s:4:"file";s:19:"2019/08/image-2.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"image-2-300x166.png";s:5:"width";i:300;s:6:"height";i:166;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-2-768x425.png";s:5:"width";i:768;s:6:"height";i:425;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-3</title>
		<link>https://jmckew.com/2019/08/30/python-project-workflow/image-3-2/</link>
		<pubDate>Thu, 29 Aug 2019 12:32:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/08/image-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date><![CDATA[2019-08-29 22:32:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-29 12:32:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-3-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>416</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/08/image-3.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/image-3.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:960;s:6:"height";i:480;s:4:"file";s:19:"2019/08/image-3.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-3-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"image-3-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-3-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-4</title>
		<link>https://jmckew.com/2019/08/30/python-project-workflow/image-4-2/</link>
		<pubDate>Thu, 29 Aug 2019 12:58:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/08/image-4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>424</wp:post_id>
		<wp:post_date><![CDATA[2019-08-29 22:58:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-29 12:58:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-4-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>416</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/08/image-4.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/image-4.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:960;s:6:"height";i:480;s:4:"file";s:19:"2019/08/image-4.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"image-4-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-4-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-5</title>
		<link>https://jmckew.com/2019/08/30/python-project-workflow/image-5/</link>
		<pubDate>Thu, 29 Aug 2019 13:07:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/08/image-5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>427</wp:post_id>
		<wp:post_date><![CDATA[2019-08-29 23:07:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-29 13:07:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>416</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/08/image-5.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/image-5.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:960;s:6:"height";i:480;s:4:"file";s:19:"2019/08/image-5.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"image-5-300x150.png";s:5:"width";i:300;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-5-768x384.png";s:5:"width";i:768;s:6:"height";i:384;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>https://jmckew.com/2019/09/20/introduction-to-pytest-pipenv/image-6/</link>
		<pubDate>Wed, 18 Sep 2019 13:18:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/09/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date><![CDATA[2019-09-18 23:18:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-18 13:18:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>464</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/09/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:955;s:6:"height";i:154;s:4:"file";s:17:"2019/09/image.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:16:"image-300x48.png";s:5:"width";i:300;s:6:"height";i:48;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"image-768x124.png";s:5:"width";i:768;s:6:"height";i:124;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-1</title>
		<link>https://jmckew.com/2019/09/20/introduction-to-pytest-pipenv/image-1-2/</link>
		<pubDate>Wed, 18 Sep 2019 13:36:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/09/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date><![CDATA[2019-09-18 23:36:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-18 13:36:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>464</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/09/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/09/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:956;s:6:"height";i:194;s:4:"file";s:19:"2019/09/image-1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"image-1-300x61.png";s:5:"width";i:300;s:6:"height";i:61;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-1-768x156.png";s:5:"width";i:768;s:6:"height";i:156;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image</title>
		<link>https://jmckew.com/2019/10/04/intro-to-games-in-python-with-pyglet/image-7/</link>
		<pubDate>Thu, 03 Oct 2019 11:31:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/10/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>481</wp:post_id>
		<wp:post_date><![CDATA[2019-10-03 21:31:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-03 11:31:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>478</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/10/image.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/10/image.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1202;s:6:"height";i:948;s:4:"file";s:17:"2019/10/image.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"image-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:17:"image-300x237.png";s:5:"width";i:300;s:6:"height";i:237;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:17:"image-768x606.png";s:5:"width";i:768;s:6:"height";i:606;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:18:"image-1024x808.png";s:5:"width";i:1024;s:6:"height";i:808;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Privacy Policy</title>
		<link>https://jmckew.com/?page_id=3</link>
		<pubDate>Wed, 19 Dec 2018 02:32:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http:/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading --><h2>Who we are</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Our website address is: http:.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What personal data we collect and why we collect it</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>Comments</h3><!-- /wp:heading --><!-- wp:paragraph --><p>When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor&#8217;s IP address and browser user agent string to help spam detection.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>An anonymized string created from your email address (also called a hash) may be provided to the Gravatar service to see if you are using it. The Gravatar service privacy policy is available here: https://automattic.com/privacy/. After approval of your comment, your profile picture is visible to the public in the context of your comment.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Media</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you upload images to the website, you should avoid uploading images with embedded location data (EXIF GPS) included. Visitors to the website can download and extract any location data from images on the website.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Contact forms</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>Cookies</h3><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment on our site you may opt-in to saving your name, email address and website in cookies. These are for your convenience so that you do not have to fill in your details again when you leave another comment. These cookies will last for one year.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you have an account and you log in to this site, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>When you log in, we will also set up several cookies to save your login information and your screen display choices. Login cookies last for two days, and screen options cookies last for a year. If you select &quot;Remember Me&quot;, your login will persist for two weeks. If you log out of your account, the login cookies will be removed.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you edit or publish an article, an additional cookie will be saved in your browser. This cookie includes no personal data and simply indicates the post ID of the article you just edited. It expires after 1 day.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Embedded content from other websites</h3><!-- /wp:heading --><!-- wp:paragraph --><p>Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>These websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>Analytics</h3><!-- /wp:heading --><!-- wp:heading --><h2>Who we share your data with</h2><!-- /wp:heading --><!-- wp:heading --><h2>How long we retain your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you leave a comment, the comment and its metadata are retained indefinitely. This is so we can recognize and approve any follow-up comments automatically instead of holding them in a moderation queue.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>For users that register on our website (if any), we also store the personal information they provide in their user profile. All users can see, edit, or delete their personal information at any time (except they cannot change their username). Website administrators can also see and edit that information.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>What rights you have over your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>If you have an account on this site, or have left comments, you can request to receive an exported file of the personal data we hold about you, including any data you have provided to us. You can also request that we erase any personal data we hold about you. This does not include any data we are obliged to keep for administrative, legal, or security purposes.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Where we send your data</h2><!-- /wp:heading --><!-- wp:paragraph --><p>Visitor comments may be checked through an automated spam detection service.</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Your contact information</h2><!-- /wp:heading --><!-- wp:heading --><h2>Additional information</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>How we protect your data</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>What data breach procedures we have in place</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>What third parties we receive data from</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>What automated decision making and/or profiling we do with user data</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>Industry regulatory disclosure requirements</h3><!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2018-12-19 02:32:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-19 02:32:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[privacy-policy]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 1 - Optimization</title>
		<link>https://jmckew.com/2018/11/23/episode-1-optimization/</link>
		<pubDate>Fri, 23 Nov 2018 02:49:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://box5742.temp.domains/~jmckewco/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Recently I had to opportunity to optimize some workflows that involved heavy data processing, before the users were completing calculations/statistics by hand on up to 10 million rows in Excel, causing many complications (and crashes). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With the use of Python this data analysis has been reduced to a matter of seconds speeding up workflows in some cases down from a whole working day to a matter of seconds allowing users to work on more important tasks and almost eliminating risk of human error.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date><![CDATA[2018-11-23 02:49:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-23 02:49:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-1-optimization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018-11-30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 2 - Kew-It</title>
		<link>https://jmckew.com/2018/11/30/episode-2-kew-it/</link>
		<pubDate>Fri, 30 Nov 2018 03:08:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://box5742.temp.domains/~jmckewco/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Yesterday, I submitted my Electrical Engineering honours thesis.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My project consisted of creating a hardware/software solution to schedule appliances in home to minimize energy costs through time of use pricing. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The hardware is a "black box" that monitors power usage of appliances and logs this data through Wi-Fi to a database hosted locally. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The software utilized an multi-objective evolutionary algorithm to then determine what the most beneficial time for each of the appliances to run. By using python for these computations, directly when the results are determined, a control strategy sends control messages back out to the "black boxes" to control the appliances automatically.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By scheduling appliances in this manner, showed up to 50% reduction in cost of energy daily. As this can be scaled to any size of implementation, this project could show significant savings in cost of energy for any building/business. The project has an estimated payback period of 5 months, comparable to that of solar with 4-5 years.<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date><![CDATA[2018-11-30 03:08:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-30 03:08:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-2-kew-it]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="category" nicename="projects"><![CDATA[Projects]]></category>
		<category domain="post_tag" nicename="projects"><![CDATA[Projects]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018-12-19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Susan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[susanbaita@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.164.39.14]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-12-20 08:58:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-12-20 08:58:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting and informative J]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>Episode 3 - Open Mind</title>
		<link>https://jmckew.com/2018/12/07/episode-3-open-mind/</link>
		<pubDate>Fri, 07 Dec 2018 03:10:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://box5742.temp.domains/~jmckewco/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>While it always may seem to be easiest to keep using what you've always used in the past, sometimes it pays off to keep an open mind about how you approach problems.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Recently was asked to create a database with minute interval data from 600-700 data recording stations for up to the past 60 years, truly a lot of a data to handle.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My first pass over was to use the python pandas module, with great success, however iterating over the data sets took around a week. By looking out for new ways to tackle problems, I was able to increase the speed 450 times faster by using dask to parallelize my data frames and multiprocessing allowing multiple workers to work across many cores of the PC. This meant going from around 60,000 rows per second to 1.5 million rows/second and 18 workers at one time. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For the next version I am planning to investigate how to utilize influxDB and Apache Spark/Hadoop to try and optimize this process further.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2018-12-07 03:10:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-07 03:10:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-3-open-mind]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018-12-19]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 4 - Visualization</title>
		<link>https://jmckew.com/2018/12/14/episode-4-visualization/</link>
		<pubDate>Fri, 14 Dec 2018 03:11:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://box5742.temp.domains/~jmckewco/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":78,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif-1-1.gif" alt="" class="wp-image-78"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In an ever growing world of data, every person perceives data in their own personalized way. This calls for data analysis to be visualized in a clear straightforward way so that it is accessible by anyone may come into contact with the system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By further making the data analysis system interactive, this adds an extreme amount of personalization to the analysis. Allowing the user to interact with the data set in their own way.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With the help of python, it was simple to create an interactive map from a data set containing geographic co-ordinates allowing users to visually determine where they would like to select their data set from. This can then be embedding into any web browser or mobile device allowing for extreme flexibility and interactivity.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2018-12-14 03:11:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-14 03:11:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-4-visualization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018-12-19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 5 - Android Multi-Touch</title>
		<link>https://jmckew.com/2018/12/21/episode-5-android-multi-touch/</link>
		<pubDate>Thu, 20 Dec 2018 15:30:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=47</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":74,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2018/12/ezgif.com-video-to-gif-2.gif" alt="" class="wp-image-74"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This week's episode of Code Fridays will go into detail on how to handle multi-touch inputs within Android. Firstly to handle the location on where the screen in being touched we need to create a class to handle the interaction. By creating a public class like Finger.java as can be seen below it contains 3 values: x_pos, y_pos and id. It is also useful to create a constructor so that other classes can easily construct the Finger class.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"java"} -->
<pre class="wp-block-syntaxhighlighter-code brush: java; notranslate">public class Finger
{
    public float x_pos;
    public float y_pos;
    public int id;

    Finger(float init_x,float init_y,int init_id)
    {
        x_pos = init_x;
        y_pos = init_y;
        id = init_id;
    }
}
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that we have a class to store our details on how each finger is touching the screen, we now need to interact with some base level Java. Firstly we need to extend a view within the Android application so that the application knows what boundaries to deal, in my test application, I've just used the entire screen as a view.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After that an array is needed to store the data of multiple inputs touching the screen. I've used a TreeMap in this example as this allows for ease later on so that they are in order on how they were input, however this comes with a downside to this example as lifting a input in the middle of the order touched crashes the array, this will be fixed in a later episode.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A paint is initialized for both the stroke paint for drawing lines between the touches and a paint for the text that is to come. Generic constructors for the view are also listed below.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"java"} -->
<pre class="wp-block-syntaxhighlighter-code brush: java; notranslate">public class TouchView extends View {
private TreeMap&lt;Integer, Finger> lineMap = new TreeMap&lt;>();

@SuppressLint("UseSparseArrays")
private HashMap&lt;Integer, Path> fingerMap = new HashMap&lt;>();
private Paint myPaint;
private Paint textPaint;

public TouchView(Context context) {
    super(context);
    init();
}

public TouchView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
    init();
}

public TouchView(Context context, AttributeSet attrs) {
    super(context, attrs);
    init();
}

private void init() {
        myPaint = new Paint();
        myPaint.setStyle(Paint.Style.FILL_AND_STROKE);
        myPaint.setStrokeWidth(5);
        myPaint.setColor(Color.RED);

        textPaint = new Paint();
        textPaint.setTextSize(50);
    }</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that everything is initialized and ready to draw some graphics on the screen so that the application is interactive, now we have to interface with touch events. This is done by creating a new function within our View class, that takes in a MotionEvent on the View so that we can detect different types of touch events. Documentation on this can be found (<a href="https://developer.android.com/training/graphics/opengl/touch#java">https://developer.android.com/training/graphics/opengl/touch#java</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"java"} -->
<pre class="wp-block-syntaxhighlighter-code brush: java; notranslate">@SuppressLint("ClickableViewAccessibility")
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        int action = event.getAction() &amp; MotionEvent.ACTION_MASK;
        switch(action) {
            case MotionEvent.ACTION_DOWN : {
                int id = event.getPointerId(0);
                fingerMap.put(id, createCirPath(event.getX(), event.getY(), id));
                lineMap.put(id,createFinger(event.getX(),event.getY(),id));
                break;
            }
            case MotionEvent.ACTION_MOVE : {

                int touchCounter = event.getPointerCount();
                for (int t = 0; t &lt; touchCounter; t++) {
                    int id = event.getPointerId(t);
                    fingerMap.remove(id);
                    lineMap.remove(id);
                    fingerMap.put(id, createCirPath(event.getX(t), event.getY(t), id));
                    lineMap.put(id,createFinger(event.getX(t), event.getY(t), id));
                }
            }
            case MotionEvent.ACTION_POINTER_DOWN : {
                int id = event.getPointerId(getIndex(event));
                fingerMap.put(id, createCirPath(event.getX(getIndex(event)), event.getY(getIndex(event)), getIndex(event)));
                lineMap.put(id,createFinger(event.getX(getIndex(event)), event.getY(getIndex(event)), getIndex(event)));
                break;
            }
            case MotionEvent.ACTION_POINTER_UP : {
                int id = event.getPointerId(getIndex(event));
                fingerMap.remove(id);
                lineMap.remove(id);
                break;
            }
            case MotionEvent.ACTION_UP : {
                int id = event.getPointerId(0);
                fingerMap.remove(id);
                lineMap.remove(id);
                break;
            }
        }

        invalidate();
        return true;
    }

private int getIndex(MotionEvent event) {
        return (event.getAction() &amp; MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
    }

private Finger createFinger(float x, float y, int id)
    {
        return new Finger(x,y,id);
    }
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that we've created a new Finger class inside our TreeMap by the order that the screen is touched in and we're removing that class when the screen input has been released, we are now ready to draw on the screen from our inputs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By iterating through the TreeMap, in each loop we know what the previous and what the next value in the array we can draw a circle for where the input is and a line between. This also allows us to determine whereabouts is the point in between these two points so we can write text. For this example, I've chosen to write the length of the distance between the two inputs to demonstrate that this can also be dynamic in nature.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"java"} -->
<pre class="wp-block-syntaxhighlighter-code brush: java; notranslate">private Path createCirPath(float x, float y, int id) {
        Path p = new Path();
        p.addCircle(x, y, 50, Path.Direction.CW);
        return p;
    }

    @Override
    protected void onDraw(Canvas canvas) {
        for (Integer key : fingerMap.keySet()) {
            Path p = fingerMap.get(key);
            canvas.drawPath(p, myPaint);
        }
        if(lineMap.size() > 1)
        {
            Integer key = lineMap.firstKey();
            for(int i = 0; i &lt; lineMap.size(); i = i + 1)
            {
                Finger start_fin = lineMap.get(key);
                if(key + 1 != lineMap.size()) {
                    Integer new_key = lineMap.higherKey(key);
                    Finger end_fin = lineMap.get(new_key);
                    canvas.drawLine(start_fin.x_pos, start_fin.y_pos, end_fin.x_pos, end_fin.y_pos, myPaint);
                    String lineText = "Length: " + new DecimalFormat("#.##").format(Math.sqrt(Math.pow(end_fin.x_pos - start_fin.x_pos,2) + Math.pow(end_fin.y_pos - start_fin.y_pos,2)));
                    canvas.drawText(lineText,((start_fin.x_pos + end_fin.x_pos) / 2), ((start_fin.y_pos + end_fin.y_pos) / 2),textPaint);
                    key = new_key;
                }
            }
        }
    }</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>In summary, it is quite simple to develop multi-touch interactions between the user and the application to enhance usability and interactivity. This is part of a application that I am developing at the moment and hope to share more insights into development as I progress on. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date><![CDATA[2018-12-21 01:30:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-20 15:30:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-5-android-multi-touch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="projects"><![CDATA[Projects]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 6 - Containerization</title>
		<link>https://jmckew.com/2018/12/28/episode-6-containerization/</link>
		<pubDate>Thu, 27 Dec 2018 22:30:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Recently I was researching into ways to more efficiently and effectively distribute software and I stumbled across containerization of applications. Containerization of application is when an application is run on an OS-level virtualization without spinning up an entire virtual machine for the application. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Previously the way I had been distributing software I had been developing in my preferred language (Python) was by using PyInstaller (https://pyinstaller.readthedocs.io/en/stable/). However I was running into issues with distributing a single executable throughout users, although since the software was only used by a small userbase at this stage, I was able to continue to use PyInstaller. I started researching containerization as in the future the software I will be developing will be used by a larger userbase. This will hopefully be more effective at managing versions and distributing updates to said userbase.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most other professionals in the software space have been constantly mentioning the use of Docker (https://www.docker.com/), I am now integrating my projects into Docker and have had no issues thus far.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By utilizing OS-level containerization this also allows the developer to run on any OS they wish. For multiple projects of mine, I had been intending to use influxDB (https://www.influxdata.com/), however was limited to a strictly Windows only network. I see Docker as a solution to this problem, by being able to create a linux based container to run an instance of an influxDB that can be spun up within a Windows environment and communicate back to the Windows users in the network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lastly, I'd like to wish a happy holidays to everyone reading and will be bringing more weekly content in the new year. Please do not hesitate to comment below if there is any topics/projects that you would like for me to research and write about my findings.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2018-12-28 08:30:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-27 22:30:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-6-containerization]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 6 - Containerization

Recently I was researching into ways to more efficiently and effectively distribute software and I stumbled across containerization of applications.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 7 – Planning</title>
		<link>https://jmckew.com/2019/01/04/episode-7-planning/</link>
		<pubDate>Thu, 03 Jan 2019 21:30:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>With 2018 coming to an end, we welcome in the new year with the first episode of Code Fridays for 2018. Continuing with the theme of things starting a new, this episode is dedicated to a major factor or stage in any type of development, planning. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Planning is one of the most crucial steps when beginning to tackle a project or even a problem. One of the most effective ways to deal with a problem coming from a time or financial perspective is prevention of the problem. By considering what problems may arise in a project’s lifetime, the developer or designer can implement prevention before the problem comes to fruition.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Being an effective planner can help you in all walks of life. Not only can one just plan for problems that may arise in a project, one can also plan to educate themselves with the knowledge to tackle unforeseen problems within a project. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With an entire new year ahead of us all, I’d like to plan on what I’d like to learn in 2019 and in turn share what I learn with you all through this blog. </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Containerization – integrating containerization as mentioned in Episode 6 into projects </li><li>Javascript – javascript is still an enigma to me at this point, I plan to work on beginner projects and hopefully integrate some of them to enhance this website</li><li>Developing, deploying and maintaining an Android Application – I am currently midway through developing an Android application, in future episodes I will write tutorials on how to develop certain elements with an Android application to make it more interactive</li><li>Big Data tools – Apache arrow and Hadoop are also new to me at this point, hoping to integrate these elements into projects that I’m currently working on</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>This is only just a small taste of what I am
planning to cover at the very least on my weekly updates in this blog so stay
tuned throughout the whole year!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2019-01-04 07:30:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-03 21:30:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-7-planning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 7 – Planning

With 2018 coming to an end, we welcome in the new year with the first episode of Code Fridays for 2018.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 8 - Anaconda</title>
		<link>https://jmckew.com/2019/01/11/episode-8-anaconda/</link>
		<pubDate>Thu, 10 Jan 2019 21:00:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=92</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Python is one of my favourite languages to develop in (if you haven't noticed yet). My favourite feature of Python is how easy it is to share your work with others and integrate other's code into your own projects. However as a project grows and gets older as time goes on it can be cumbersome to keep track of hundreds of dependencies that your project relies on to work. Even more so when all of these package dependencies are also being updated and changing functionality.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One elegant solution that I always use when first starting a new project is to use Anaconda (https://www.anaconda.com/). Anaconda is a free, easy-to-install package and environment manager for Python. It is very simple to use in that when you are starting a new project, you just need to create a new environment (within the Anaconda navigator) with the python version you wish to use and then activate it. Simple as that.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">conda create --name new_environment_name python=3.5 </pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>In one single line, we have just created a new environment named "new_environment_name" and specified that this environment will use Python version 3.5. Now to activate the environment it is as simple as typing "activate new_environment_name".</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">activate new_environment_name</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now to see what packages are contained within our newly created environment, or to ever see what packages and their versions are listed the command is:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">conda list</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that we have created, activated and peeked inside our newly created environment we need to add some packages that we might use! This is as simple as the command "conda install PACKAGENAME", for example we might want to install matplotlib, a widely used data visualization package. Installing matplotlib into our environment is done by the command:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">conda install matplotlib</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>You will note that when this runs, it also asks to install all the dependancies that matplotlib relies on and will also notify you later when you have more packages that some might clash and need to be upgraded/downgraded so that all packages have a common version to work with.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With regards to working with certain version numbers of packages within an Anaconda environment, to install a specific version of a package, or even if you know what the minimum requirement is, can by following the table below:</p>
<!-- /wp:paragraph -->

<!-- wp:table {"className":"is-style-stripes"} -->
<table class="wp-block-table is-style-stripes"><tbody><tr><td><strong>Constraint Type</strong></td><td><strong>Specification</strong></td><td><strong>Result</strong></td></tr><tr><td>Fuzzy</td><td>numpy=1.11</td><td>1.11.0, 1.11.1, 1.11.2, 1.11.18, etc</td></tr><tr><td>Exact</td><td>numpy==1.11</td><td>1.11.0</td></tr><tr><td>Greater than or equal to</td><td>"numpy&gt;=1.11"</td><td>1.11.0 or higher</td></tr><tr><td>OR</td><td>"numpy=1.11.1|1.11.3</td><td>1.11.1,1.11.3</td></tr><tr><td>AND</td><td>"numpy&gt;=1.8,&lt;2"</td><td>1.8, 1.9, not 2.0</td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>By following these simple constraint rules, it is very easy to manage package version to maintain dependencies within your project without tearing your hair out when packages update and break your project.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another major benefit of using Anaconda to manage your project's package dependencies is that when you're developing simultaneously with other projects and you may discover some bugs and wish to share them with your colleagues. To share all the dependencies (and their respective versions) with your colleague is as easy as generating an "environment file" and sharing the file with them so they have exactly the same environment as you. This is done by the following command:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">conda env export > environment.yml</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Similarly, if you colleague sends you their "environment file", the command to reproduce their environment is (Please note that the name of the environment is encoded within the first line of the .yml file):</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">conda env create -f environment.yml</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>In Summary, Anaconda can be used to easily manage packages and dependencies across a project and fast track test/bug reproduction across multiple machines seamlessly. Personally, I would always advise to use a package manager across projects no matter the size.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date><![CDATA[2019-01-11 07:00:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-10 21:00:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-8-anaconda]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 8 - Anaconda

Python is one of my favourite languages to develop in (if you haven't noticed yet). 

My favourite feature of Python is how easy it is to share your work with others and integrate other's code into your own projects. ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 9 - Web Enabled Universal Remote - Part 1</title>
		<link>https://jmckew.com/2019/01/18/episode-9-web-enabled-universal-remote-part-1/</link>
		<pubDate>Thu, 17 Jan 2019 21:30:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=104</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I have a habit of misplacing all kinds of remotes within the house, TV, air conditioner, fans, etc, and having a different remote for everything can be quite annoying at times. So I decided to re-use some leftover components from a previous project to make a web enabled universal remote.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since most existing remotes use infrared to send the signal from the remote to the device, I figured it would be simple enough to create a infrared signal 'decoder' and then use a infrared diode to then replicate this signal back to the device. Next consideration was what do hardware is needed to get this project up and running.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After researching a few other DIY remote control guides on the internet, I came up with a plan to use a wifi-enabled microcontroller together with an infrared receiver and an infrared diode. After rummaging through my spare hardware box, I happened to find a spare NodeMCU (ESP8266) that I could use for this project, this brings my part list to:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Wifi-Enabled Microcontroller (NodeMCU)</li><li>A resistor to dampen the diode signal (100 ohm)</li><li>A transistor to boost the current from the NodeMCU so the diode signal gets to the device (2N222)</li><li>Infrared receiver (TSOP4136)</li><li>Infrared diode (L-7113F3BT)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now before connecting the entire circuit together, one should always test that components work in an expected way. To achieve this for the infrared receiver, a basic program to interface between the receiver and the microcontroller is needed. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For a basic test, an LED would light up whenever the infrared is receiving a signal. By following the circuit diagram with the corresponding code for the NodeMCU, this test for the receiver should be reproduce-able at home, please note that for other infrared receivers you will need to check the pin outs.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":108} -->
<figure class="wp-block-image"><img src="https://jmckew.com/wp-content/uploads/2019/01/Fritzing_FEKX395tbZ.png" alt="" class="wp-image-108"/></figure>
<!-- /wp:image -->

<!-- wp:syntaxhighlighter/code {"language":"cpp"} -->
<pre class="wp-block-syntaxhighlighter-code">#define ledPin D0 //Connection at GPIO16 (D0) for the builtin LED on the NodeMCU board
#define inputPin D5 //Connection at GPIO14 (D5) for the infrared receiver
int val = 0; // variable for reading the pin status 
void setup() 
{ 
   pinMode(ledPin, OUTPUT); // declare LED as output 
   pinMode(inputPin, INPUT); // declare Infrared sensor as input
} 
void loop()
{ 
   val = digitalRead(inputPin); // read input value 
   if (val == HIGH)
   { // check if the input is HIGH
      digitalWrite(ledPin, LOW); // turn LED OFF   
   } 
   else 
   { 
      digitalWrite(ledPin, HIGH); // turn LED ON 
   }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>In the code above, this defines the pins that the sensor and LED are connected to, checks if the sensor is receiving a signal and then switches the builtin LED accordingly. Since the microcontroller loops without delay and an infrared remote control sends signals very quickly with delay in between, the LED only flickers when a remote is aimed at it, however proving the component works as expected.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now that we have confirmed the receiver works as expected, we have to integrate and interface the infrared diode with the microcontroller such that we are able to send the decoded signals back at the device. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since the NodeMCU can only pass a maximum current of 12mA through the GPIO pins, this will not be enough for the infrared diode peak spectrum which occurs at 20mA. To boost the current up from 12mA to 20mA+, it is best to use a simple transistor, for this project I had some 2N2222 transistors lying around so decided to use them. The following circuit diagram shows how the infrared diode, transistor and microcontroller integrate together.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":109} -->
<figure class="wp-block-image"><img src="https://jmckew.com/wp-content/uploads/2019/01/Fritzing_LqJjWJppSm.png" alt="" class="wp-image-109"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Since the human eye cannot see the infrared diode turning on/off, this creates a challenge for testing this component before implementing the project. I did not create a test specifically for the diode, and will test whether it works correctly later on in some function testing of the project.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This completes the hardware component of this project, the next part of this project will be the software. I am planning to utilise both docker and django on my home Raspberry Pi to act as a webserver that will issue commands to the microcontroller over a network to mimic the device's remote control. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date><![CDATA[2019-01-18 07:30:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-17 21:30:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-9-web-enabled-universal-remote-part-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="projects"><![CDATA[Projects]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 9 - Web Enabled Universal Remote - Part 1 Hardware

I have a habit of misplacing all kinds of remotes within the house, and having a different remote for everything can be quite annoying at times. So I decided make a DIY web-based universal remote.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 10 - Python Package Cheat Sheet</title>
		<link>https://jmckew.com/2019/01/25/episode-10-python-package-cheat-sheet/</link>
		<pubDate>Thu, 24 Jan 2019 21:00:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=114</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>One of the biggest skills in any career path comes solely from knowing where to look and what to look for when breaking down a problem. The same principle applies for Python programming. Since there are millions of different packages out there that all serve different purposes, it is often difficult to even know if there is a package out there that will solve your problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I will be updating this table in the future as well as I personally find more and more solutions to my problems, and hope to share this insight with everyone. I will not be including packages from Python's standard library.</p>
<!-- /wp:paragraph -->

<!-- wp:table {"hasFixedLayout":true,"align":"center","className":"is-style-stripes"} -->
<table class="wp-block-table aligncenter has-fixed-layout is-style-stripes"><tbody><tr><td><strong>Package Name</strong></td><td><strong>Description</strong></td><td><strong>Used For</strong></td></tr><tr><td><a href="https://pandas.pydata.org/">Pandas</a></td><td><em>pandas</em> is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the <a href="https://www.python.org/">Python</a> programming language.</td><td>Data Analysis</td></tr><tr><td><a href="https://www.numpy.org/#">Numpy</a></td><td>NumPy is the fundamental package for scientific computing with Python.</td><td>Data Analysis</td></tr><tr><td><a href="https://www.scipy.org/">SciPy</a></td><td> <br>SciPy (pronounced “Sigh Pie”) is a Python-based ecosystem of open-source software for mathematics, science, and engineering. </td><td>Data Analysis</td></tr><tr><td><a href="https://matplotlib.org/">Matplotlib</a></td><td>Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms.</td><td>Data Visualisation</td></tr><tr><td><a href="https://www.spyder-ide.org/">Spyder</a></td><td> <br>Spyder is a powerful scientific environment written in Python, for Python, and designed by and for scientists, engineers and data analysts.  </td><td>Data Visualisation/Data Analysis</td></tr><tr><td><a href="https://github.com/python-visualization/folium">Folium</a></td><td>folium builds on the data wrangling strengths of the Python ecosystem and the mapping strengths of the Leaflet.js library. Manipulate your data in Python, then visualize it in a Leaflet map via folium.</td><td>Data Visualiation</td></tr><tr><td><a href="https://bokeh.pydata.org/en/latest/">Bokeh</a></td><td>Bokeh is an interactive visualization library that targets modern web browsers for presentation.</td><td>Data Visualisation</td></tr><tr><td><a href="https://github.com/socialcopsdev/camelot">Camelot</a></td><td> <br><strong>Camelot</strong> is a Python library that makes it easy for <em>anyone</em> to extract tables from PDF files! </td><td>PDF Manipulation</td></tr><tr><td> <br><a href="https://tqdm.github.io/ ">tqdm</a> </td><td>tqdm is a lightweight package for displaying progress bars within a console </td><td> <br>General </td></tr><tr><td><a href="https://www.seleniumhq.org/">Selenium</a></td><td> <br><em>Selenium automates browsers</em>. That's it! What you do with that power is entirely up to you.  </td><td>Web Automation</td></tr><tr><td><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautiful Soup</a></td><td> <br><a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a> is a Python library for pulling data out of HTML and XML files. </td><td>Web Scraping</td></tr><tr><td><a href="https://scrapy.org/">Scrapy</a></td><td>An open source and collaborative framework for extracting the data you need from websites.<br>In a fast, simple, yet extensible way. </td><td>Web Scraping</td></tr><tr><td><a href="http://docs.python-requests.org/en/master/">Requests</a></td><td> <br>Requests is an elegant and simple HTTP library for Python, built for human beings. </td><td>Web Interaction</td></tr><tr><td><a href="http://flask.pocoo.org/">Flask</a></td><td> <br><em>Flask is a microframework for Python based on Werkzeug, Jinja 2 and good intentions. And before you ask: It's </em><a href="http://flask.pocoo.org/docs/license/">BSD licensed</a><em>!</em> </td><td>Web Development</td></tr><tr><td><a href="https://www.djangoproject.com/">Django</a></td><td> <br>Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.  </td><td>Web Development</td></tr><tr><td><a href="https://opencv.org/">Opencv</a></td><td> <br>OpenCV (Open Source Computer Vision Library) is released under a BSD license and hence it’s free for both academic and commercial use. </td><td>Image Analysis</td></tr><tr><td><a href="https://www.pygame.org/wiki/about">Pygame</a></td><td> <br>pygame (<strong>the library</strong>) is a Free and Open Source <a href="https://www.python.org/">python</a> programming language library for making multimedia applications like games built on top of the excellent <a href="http://www.libsdl.org/">SDL</a> library. </td><td>Game Development</td></tr><tr><td><a href="https://www.pyinstaller.org/">Pyinstaller</a></td><td> <br>PyInstaller<strong> </strong>freezes (packages) Python applications into stand-alone executables, under Windows, GNU/Linux, Mac OS X, FreeBSD, Solaris and AIX. </td><td>Distribution</td></tr><tr><td><a href="https://anthony-tuininga.github.io/cx_Freeze/">cx_freeze</a></td><td> <br><strong>cx_Freeze</strong> is a set of scripts and modules for freezing Python scripts into executables </td><td>Distribution</td></tr><tr><td><a href="https://www.riverbankcomputing.com/software/pyqt/download5">PyQt5</a></td><td> <br>Qt is set of cross-platform C++ libraries that implement high-level APIs for accessing many aspects of modern desktop and mobile systems. </td><td>GUI Development</td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date><![CDATA[2019-01-25 07:00:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-24 21:00:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-10-python-package-cheat-sheet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 10 - Python Package Cheat Sheet

One of the biggest skills in any career path comes solely from knowing where to look and what to look for when breaking down a problem. The same principle applies for Python programming. #python]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 11 - Power Quality Explained</title>
		<link>https://jmckew.com/2019/02/01/episode-11-power-quality-explained/</link>
		<pubDate>Thu, 31 Jan 2019 20:30:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I've always lived by the rule that if you can't explain something to a 5 year old then you don't know it well enough. I was asked recently by some (non-electrical focused) colleagues on a handful of electrical terms and components. One of the biggest things that kept popping up that I found difficult to explain clearly was power quality and it's issues. So I decided why not dedicate a blog post about it and write a basic example power factor capacitor calculator in Python.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Power quality is defined as "the concept of powering and grounding sensitive electronic equipment in a manner suitable for the equipment with precise wiring system and other connected equipment" by the IEEE (The Institute of Electrical and Electronics Engineers). In a simplistic view this is just trying to say that electrical equipment is to be installed/configured in a way that is operates as intended.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Quality of power is not determined by the one who produces it, it's defined by the end user of the power. Eg, like a physical product, if you buy something from a store and it's poor quality, that's being defined by the end user. Similar to that of a physical product, quality of power can be lost in a variety of forms/ways.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Issues with power quality can be categorized into three main categories:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Harmonic voltages and currents</li><li>Poor power factor</li><li>Voltage instability</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Harmonics</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>AC (Alternating Current) electricity is generated as a sinusoidal waveform, and harmonics are signals/waves whose frequency is a whole number multiple of the frequency of the reference signal/wave.  To visualize this phenomenon, we can use packages like NumPy and Matplotlib, to calculate and plot our base signal and it's harmonics (I encourage you to run this code and change the harmonics to see what they look like).</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">import numpy as np
import matplotlib.pyplot as plt

def Harmonic(i):
    x=np.linspace(0,2*np.pi,2000)
    y = [0 for _ in x] 
    for n in range(0,i):
        y += np.sin((2*n+1)*(2*np.pi)*(x))/(2*n+1)
    plt.plot(x,y)
    plt.grid()
    

Harmonic(1)
Harmonic(2)
# Harmonic(3)
# Harmonic(4)
# Harmonic(5)
plt.show()</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>The example above shows us the base signal (fundamental frequency), and it's first harmonic (harmonic of 2 or twice as fast as the fundamental frequency).</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":129,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i0.wp.com/jmckew.com/wp-content/uploads/2019/01/Harmonic1_2.png?fit=640%2C303&amp;ssl=1" alt="" class="wp-image-129"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When these two signals are superimposed on each other, they produce a distorted waveform. Electrical equipment is designed to operate at the base signal (50Hz here in Australia), and typically does not cope with distorted wave like seen below when we superimpose a base signal with it's first harmonic.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":130,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i2.wp.com/jmckew.com/wp-content/uploads/2019/01/Harmonic1_2_Combined.png?fit=640%2C303&amp;ssl=1" alt="" class="wp-image-130"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Luckily, these issues are now easily detected and rectified by harmonic analyzers and active/passive harmonic filters.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Power Factor</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Power factor is a measure of how effectively power is being used in an electrical system, and is defined as the ratio of real (useful) to apparent (total) power. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Real power (kW) is the power that actually powers the equipment to produce useful work (such as spinning a motor). It can also be called actual, active or working power. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Reactive power (kVAR) is the power required by (some) equipment (eg, motors), to produce a magnetic field to enable the useful work to be produce. It's necessary to operate the equipment, however you don't see any result from the reactive power.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Apparent power (kVA) is the vector sum of the real power (kW) and reactive power (kVAR) and is the total power supplied from the mains power required to produce the right amount of real power.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Suppose you are running a store, you have to spend an amount of money X (cost) on buying products to sell in the future for a larger amount of money Y, meaning your profit will be P = Y - X. X is not lost money, without spending X you will not be able to make any profit P. The profit P is comparable to the active power, the earnings Y are the equivalent of apparent power and the initial cost X is the reactive power.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":145,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/02/CodeCogsEqn.gif" alt="" class="wp-image-145"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Therefore, for a given power supply (kVA):<br></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The more cost you have (higher percentage of kVAR), the lower the ratio of kW (profit) to kVA (profit + cost), meaning a poorer power factor.</li><li> The less cost you have (lower percentage of kVAR), the higher your ratio of kW (profit) to kVA (profit + cost) becomes, and the better you power factor. As your cost (kVAR) approaches zero, your power factor approaches 1 (unity).</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Voltage Instability</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A stable voltage is when every piece of equipment connected to a network is operating under normal condition without issues, however when a fault or disturbance (harmonics) occurs in this system, the voltage becomes unstable.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Due to voltage instability, the electrical system's voltage may collapse, if the voltage is below acceptable limits. Voltage collapse may be a total or partial black, the terms voltage instability and voltage collapse are interchangeable.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, if 10 generators are running to keep 10 machines working. Suddenly 3 of the generators run out of fuel, but the 10 machines keep going. This would cause a loss of generation, not being able to maintain the power required to keep all the machines working and consequentially since there is not enough power to share between any of the machines, all 10 machines will turn off, causing a total blackout.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Capacitor Calculator - Python</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Correcting power factor from a lagging (&lt;1) power factor, can be as simple as reducing reactive power (kVAR) in the system such that the ratio of real power (kW) to apparent power (kVA) is still as close to unity (1) as possible. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since motors require inductive or lagging power for magnetizing before useful work beings, this brings makes the power factor of the system lagging (&lt;1). Capacitors provide capacitive or leading reactive power that cancels out the lagging power when used for power-factor improvement. The improved power factor changes the current requirements of the system, but not the one required by the motor.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":136,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-1-1.gif" alt="" class="wp-image-136"/><figcaption>Power factor calculation</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {"id":137,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-2.gif" alt="" class="wp-image-137"/><figcaption>Apparent power calculation</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {"id":138,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-3.gif" alt="" class="wp-image-138"/><figcaption>Reactive power calculation</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Using these formulas we can calculate just how big of a capacitor we require:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":139,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-4.gif" alt="" class="wp-image-139"/></figure></div>
<!-- /wp:image -->

<!-- wp:image {"id":140,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-5.gif" alt="" class="wp-image-140"/></figure></div>
<!-- /wp:image -->

<!-- wp:image {"id":141,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-6.gif" alt="" class="wp-image-141"/></figure></div>
<!-- /wp:image -->

<!-- wp:image {"id":142,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/01/CodeCogsEqn-7.gif" alt="" class="wp-image-142"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Once we input all these required formulas, and our initial data points, we are now able to easily compute the required size of capacitor to amend power factor issues.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">from math import sqrt,pi

real_power = 2.2     #Real power in kW
current = 10         #Current in amps
voltage = 240        #Voltage in volts
frequency = 50       #Frequency in hertz
corrected_pf = 0.95  #Target power factor

#Calculate current power factor and apparent power
current_pf = 1000 * real_power / (voltage * current)
S_current = (voltage * current) / 1000

#Power factors greater than 1 will give imaginary Q_current, alert user
try:
    #Calculate current reactive power
    Q_current = sqrt(pow(abs(S_current),2) - pow(real_power,2))

    #Calculate target apparent power
    S_corrected = real_power / corrected_pf

    #Calculate required reactive power compensation
    Q_corrected = sqrt(pow(S_corrected,2) - pow(real_power,2))

    #Calculate size of capacitor required for reactive power
    Q_c = Q_current - Q_corrected
    C_f = 1000 * Q_c / (2*pi*frequency*voltage)

    #Print results to user
    print("Current power factor {0:.3f}".format(current_pf))
    print("Current apparent power {0:.3f} kVA".format(S_current))
    print("Current reactive power {0:.3f} kVAR".format(Q_current))
    print("Capacitor required {0:.3f} Farads".format(C_f))

except ValueError:
    print("Current power factor > 1")</pre>
<!-- /wp:syntaxhighlighter/code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[I've always lived by the rule that if you can't explain something to a 5 year old then you don't know it well enough. I was asked recently by some (non-electrical focused) colleagues on a handful of electrical terms and components. One of the biggest things that kept popping up that I found difficult to explain clearly was power quality and it's issues. So I decided why not dedicate a blog post about it and write a basic example power factor capacitor calculator in Python.]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date><![CDATA[2019-02-01 06:30:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-31 20:30:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-11-power-quality-explained]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 11 - Power Quality Explained

I was asked recently by some colleagues to explain power quality, it's issues and how to fix them. So I decided to write a post (and some code) to help explain and automate a basic power quality calculation. #python]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>CV/Professional</title>
		<link>https://jmckew.com/cv-professional/</link>
		<pubDate>Wed, 13 Mar 2019 11:18:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?page_id=196</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>My CV and honours thesis are linked below (PDF download). My experience thus far within the electrical industry is:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>2016-2018 at Hunter H2O as an undergraduate working on PLC programming, PLC systems, radio network system design, SCADA systems, HMI development, cable schedules, electrical protection schemes</li><li>2017 - Current at AECOM as an graduate electrical engineer (undergraduate from 2017-2018) working on lighting design, reticulation design, earthing system design, switchboard/switchroom design, communication network design, lightning protection system design and site inspections </li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Within AECOM, I have also developed several in-house automated data workflows (preparing, visualizing and summarising data sets) software within Python and packaging/distributing software across multiple offices (even made it to Japan!) along with support and documentation maintenance.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you have any opportunities you think I would be a good fit for, please don’t hesitate to contact me by emailing me directly at <a href="mailto:jackmckew2@gmail.com">jackmckew2@gmail.com</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:file {"id":393,"href":"https://jmckew.com/wp-content/uploads/2019/08/190819_JackMcKewResume-2.pdf"} -->
<div class="wp-block-file"><a href="https://jmckew.com/wp-content/uploads/2019/08/190819_JackMcKewResume-2.pdf">Curriculum Vitae</a><a href="https://jmckew.com/wp-content/uploads/2019/08/190819_JackMcKewResume-2.pdf" class="wp-block-file__button" download>Download</a></div>
<!-- /wp:file -->

<!-- wp:file {"id":212,"href":"https://jmckew.com/wp-content/uploads/2019/03/Final_Year_Project_Part_B-1.pdf"} -->
<div class="wp-block-file"><a href="https://jmckew.com/wp-content/uploads/2019/03/Final_Year_Project_Part_B-1.pdf">Honour's Thesis: "In Home Appliance Scheduler Using Home Area Network"</a><a href="https://jmckew.com/wp-content/uploads/2019/03/Final_Year_Project_Part_B-1.pdf" class="wp-block-file__button" download>Download</a></div>
<!-- /wp:file -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 21:18:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 11:18:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cv-professional]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_customize_changeset_uuid]]></wp:meta_key>
		<wp:meta_value><![CDATA[3a032f67-2fec-49c5-9fc6-5f9e7b1f50fd]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://jmckew.com/2019/03/13/199/</link>
		<pubDate>Wed, 13 Mar 2019 11:18:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/2019/03/13/199/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 21:18:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 11:18:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[199]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="navigator"><![CDATA[Navigator]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[196]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Contact</title>
		<link>https://jmckew.com/contact/</link>
		<pubDate>Wed, 13 Mar 2019 12:01:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?page_id=220</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"id":235,"align":"center","width":192,"height":192} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://jmckew.com/wp-content/uploads/2019/03/Jack-McKew-Photo.jpg" alt="" class="wp-image-235" width="192" height="192"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Hey there! I’m Jack. I recently completed my bachelor of Electrical Engineering at the University of Newcastle. I like to play guitar/drums, make things, and getting in or under the water. This site is just meant to function as half blog, half showcase of a few things I like to do. Please look around, and if you’d like to contact me about anything at all, please do! </p>
<!-- /wp:paragraph -->

<!-- wp:wpforms/form-selector {"formId":"222"} /-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 22:01:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 12:01:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[contact]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_customize_draft_post_name]]></wp:meta_key>
		<wp:meta_value><![CDATA[contact]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_customize_changeset_uuid]]></wp:meta_key>
		<wp:meta_value><![CDATA[61661e12-463d-4da5-b6cc-e0f07e44d3c6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://jmckew.com/2019/03/13/228/</link>
		<pubDate>Wed, 13 Mar 2019 12:04:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/2019/03/13/228/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2019-03-13 22:04:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-13 12:04:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[228]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="navigator"><![CDATA[Navigator]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[220]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>All Posts</title>
		<link>https://jmckew.com/?page_id=396</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?page_id=396</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>396</wp:post_id>
		<wp:post_date><![CDATA[2019-08-20 22:26:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>All Posts</title>
		<link>https://jmckew.com/all-posts/</link>
		<pubDate>Tue, 20 Aug 2019 12:35:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?page_id=398</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>[display-posts posts_per_page="1000" order="DESC"]</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date><![CDATA[2019-08-20 22:35:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-20 12:35:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[all-posts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title></title>
		<link>https://jmckew.com/2019/08/20/403/</link>
		<pubDate>Tue, 20 Aug 2019 12:36:25 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/2019/08/20/403/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>403</wp:post_id>
		<wp:post_date><![CDATA[2019-08-20 22:36:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-20 12:36:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[403]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="navigator"><![CDATA[Navigator]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[398]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>image-1</title>
		<link>https://jmckew.com/2019/10/04/intro-to-games-in-python-with-pyglet/image-1-3/</link>
		<pubDate>Thu, 03 Oct 2019 11:44:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/wp-content/uploads/2019/10/image-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>482</wp:post_id>
		<wp:post_date><![CDATA[2019-10-03 21:44:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-03 11:44:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-1-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>478</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[https://jmckew.com/wp-content/uploads/2019/10/image-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/10/image-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1202;s:6:"height";i:948;s:4:"file";s:19:"2019/10/image-1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"image-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:19:"image-1-300x237.png";s:5:"width";i:300;s:6:"height";i:237;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:19:"image-1-768x606.png";s:5:"width";i:768;s:6:"height";i:606;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:20:"image-1-1024x808.png";s:5:"width";i:1024;s:6:"height";i:808;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 12 - What is Git?</title>
		<link>https://jmckew.com/2019/02/08/episode-12-what-is-git/</link>
		<pubDate>Thu, 07 Feb 2019 20:30:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=153</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>One of the biggest issues when working on any project regardless of what industry, discipline or context, as soon as a new 'version' of design or update comes along, the issue of version control appears. When this change(s) come along in the life cycle of a project, it is within everyone involved's best interests to maintain some type of version control, to manage and track changes between versions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When it comes to software development version control, the most well-known and commonly used system is Git. Git is a actively maintained open source project originally developed by Linus Torvalds (creator of the Linux OS kernel) in 2005. Multitudes of software projects depend on git for version control, including both commercial and open source.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Git has a distributed architecture, meaning rather than having one single location for the full version history of the project, every developer's working copy of the project is also a location that can contain the full history. This also comes with the benefit that if one developer happens to lose the entire project, it can be restored from other developers (pending they have/are working on the latest version).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Flexibility</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Git is flexible in several respects: efficiency at maintaining version control for both small and large projects, capable at handling numerous types of non-linear development workflows and compatibility with existing protocols and systems.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Git supports branching and tagging (unlike other commonly used version control systems), and operations that affect branches and tags such as reverting or merging are stored as part of the change history. This level of tracking is not available in many other version control systems.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Security</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The integrity of the source code of the project was identified as a top priority when Git was design. Cryptographically secure hashing algorithms are used to secure: file contents, file and directory relationships, versions, tags and commits. This defends the project's source files and change history against both malicious and accidental changes and ensures that all modifications is fully traceable.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Use-case</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Bob wants to implement a new feature to the project he is working on in anticipation of the upcoming 3.0 release, and commits the new feature with descriptive messages. After being inspired by the new feature, he works on a second new feature and commits those modifications as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Naturally, these two new features are logged as separate entities within the change history of the project. Bob then returns back to version 2.6 of the same project to fix a problem that only affects version 2.6. This allow Bob (and his team) to distribute that fix release (version 2.6.1), before version 3.0 is ready. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Bob can then return to the upcoming version 3.0 'branch' to continue implementing new features. Since Bob has his own copy of the entire project, all of these changes can occur without an network access, thus being reliable and fast. To submit all these committed features and fixes to the remote copy of the project, it simply done by the use of the 'push' command.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date><![CDATA[2019-02-08 06:30:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-07 20:30:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-12-what-is-git]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 12 - What is Git?
One of the biggest issues when working on any project regardless of what industry, discipline or context, as soon as a new update comes along, the issue of version control appears. Git aims to alleviate this issue
#opensource #git]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 13 - Lighting Design</title>
		<link>https://jmckew.com/2019/02/15/episode-13-lighting-design/</link>
		<pubDate>Thu, 14 Feb 2019 20:30:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=155</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Before I started in a more buildings-focused electrical engineering position, I didn't think that much went into selecting lights for buildings. Once you first get started in lighting design, it is like opening a can of worms, there is so much detail that goes into lighting design, it's unfathomable.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First of all, lighting design in Australia is dictated by AS1158. Not only does the Australian standard explicitly state illuminance requirements for rooms based on their task (eg 320 lux for office based tasks), it also clearly defines how to calculate these levels based on the environment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What really is lux? Lux is the SI derived unit of illuminance and luminous emittance, measuring luminous flux per unit area. It is equal to one lumen per square meter. Luminous flux? Lumens? What do all these terms mean? A lumen is the SI derived unit of luminous flux, which is a measure of the total amount of visible light emitted by a source.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now when it comes to designing lighting for a building/area, multiple large considerations must be taken. Once you have determined what tasks will be completed within the area you are designing, you must then go to AS1158 and determine the required lux requirements. Following this, you must ensure you have accurate dimensions of the area you are designing for, along with all reflectance (colour) of surfaces within the area.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you have got all these parameters, it is time to begin modelling the area within any lighting design software package (eg AGI-32). Now the designer must select lights (luminaires) to be specified for the area. The designer must take into consideration the ceiling (if there is one) type, this will dictate how the luminaires are to be mounted, be it: surface, recessed, suspended or pole mounted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most luminaire fitting manufacturers will provide photometric files (IES files) detailing how their respective lights would behave if they were installed in the design area. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once the designer has verified that the specified luminaires will meet required lux levels in the area, this design must be passed to the electrical designer as they must factor in how much power all the luminaires will require to operate and how the cable routes must be laid out to suit the luminaires on the site.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Please note, that this is a very simplistic view at lighting design. Just like any area of work, there is an art to doing a proper job.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date><![CDATA[2019-02-15 06:30:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-14 20:30:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-13-lighting-design]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="projects"><![CDATA[Projects]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 13 - Lighting Design

Before I started in a more buildings-focused electrical engineering position, I didn't think that much went into selecting lights for buildings. Once you first get started in lighting design, it is like opening a can of worms.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 14 - Types of Machine Learning</title>
		<link>https://jmckew.com/2019/02/22/episode-13-types-of-machine-learning/</link>
		<pubDate>Thu, 21 Feb 2019 20:33:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>With AI and Machine Learning becoming the buzzwords in technology for 2018 and the real world applications now maturing to show the benefits of this technology. It can be very confusing when first entering the world of AI and machine learning with new techniques coming out every other day in search of improving the technology. Hopefully this article will help break down the barriers of the jargon and explain the types of machine learning algorithms out in the wild simplistically.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In general, there are 3 different broad categories that current machine learning algorithms fit into:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Supervised learning</li><li>Unsupervised learning</li><li>Reinforcement learning</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Supervised Learning</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Most practical machine learning algorithms use supervised learning. Supervised learning is where you have one or more input variables (x) and output variable(s) (y), and you use an algorithm to learn the mapping function from the input to the output.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"latex"} -->
<pre class="wp-block-syntaxhighlighter-code">y = f(x)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>The end goal of this algorithm is to approximate the mapping function accurately such that then you have a new data input (x), you can predict what the result (y) for that data would be.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The name supervised learning comes from the algorithm first learning from a training data set before we present the algorithm to a new data set. The training data set can be thought as the teacher who is supervising the learning process, and learning only stops when the algorithm reaches an acceptable level of performance on predicting the result.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Unsupervised Learning</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Unsupervised learning is when you only have the input variable(s) (x) and no respective output (y). The end goal for unsupervised learning is to model the distribution or structure of the data in order to discover and learn about the data set.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unsupervised learning in contrast to supervised learning is where the omnipresent teacher in supervised learning is gone and there is no correct answers. The algorithm is left alone to discover and present the distribution/structure in the data that it determines.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Reinforcement Learning</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Reinforcement learning is the third broad category that a machine learning algorithm can fall into, where the algorithm has the input variable(s) (x) and through interacting with the input data set receives rewards for performing favoured actions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Learning from interactions with the environment around us comes from our natural experiences in the world. For example, imagine you're a child in a room with a fire. You move closer to the fire and feel it's warmth and it makes you feel good, this is a positive reward; then you try a touch the fire and it burns you hand, this is a negative reward.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Reinforcement learning is just a computational approach to learning from interactions to achieve the most favourable result, in our example, we learnt that being close to the fire is a positive thing but too close is a negative thing so our result is to maintain a sufficient distance away to be warm but no burnt.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date><![CDATA[2019-02-22 06:33:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-21 20:33:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-13-types-of-machine-learning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 13 - Types of Machine Learning

With AI and Machine Learning becoming the buzzwords in technology for 2018, it can be very confusing when first entering the world of AI and machine learning. This article breaks it down for you.

#machinelearning]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 15 - What is a C.T?</title>
		<link>https://jmckew.com/2019/03/01/episode-15-what-is-a-c-t/</link>
		<pubDate>Thu, 28 Feb 2019 19:30:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=171</guid>
		<description></description>
		<content:encoded><![CDATA[<p>A C.T is the abbreviated form for a current transformer in electrical terms. It is a simple but effective use of magnetic circuits and transformer characteristics to monitor how power is behaving in a conductor. The C.T works by wrapping a coil of conductor around a core (typically silicon steel) shaped like a ring, the 'power' wire or the active is then passed through the core. When alternating current passes through the active conductor, this then generates a magnetic field around the wire, inducing a current proportional to the number of turns the wire is wrapped around the core.</p>
<p>The C.T is a very widely used piece of equipment in instrument electrical/electronics as it allows for an indirect way of monitoring for the power flow unlike a 'flow' meter that must be a part of the pipework to directly measure flow. While it is still possible to monitor current in a 'flow' meter type fashion, it is far less risk to implement a C.T solution.</p>
<p>Possibly the frequent implementation of C.Ts in everyday life is within power meter solutions. By attaching a C.T to the active conductor that is powering a piece of equipment, we are then able to measure the power the equipment is using in real time. This can then be further digitised and utilised in a network fashion to provide asset owners with real time energy usage of their equipment.</p>
<p>It must be noted when using C.Ts on alternating current systems that the C.T must only have a single conductor pass through it (the active); if both the active and the neutral are passed through the C.T then (in an ideal world) the C.T will have an output of 0. If you also pass through the earth wire to the equipment, it is possible to measure earth leakage or earth fault current (provided the measurement can handle it).</p>

<!-- wp:image {"id":173,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/03/trans53.gif" alt="" class="wp-image-173"/><figcaption>https://www.electronics-tutorials.ws/transformer/current-transformer.html</figcaption></figure></div>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date><![CDATA[2019-03-01 05:30:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-28 19:30:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-15-what-is-a-c-t]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[173]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 15 - What is a C.T?

A C.T is the abbreviated form for a current transformer in electrical terms. It is a simple but effective use of magnetic circuits and transformer characteristics to monitor how power is behaving in a conductor.

#electrical]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 16 - Networking Basics</title>
		<link>https://jmckew.com/2019/03/08/episode-16-networking-basics/</link>
		<pubDate>Thu, 07 Mar 2019 20:30:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=185</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A network is defined as “A network is a collection of computers, servers, mainframes, network devices, peripherals, or other devices connected to one another to allow the sharing of data”. There are various configurations of networks for specific design scenarios as represented in:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":186,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/03/nettopo.gif" alt="" class="wp-image-186"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Typical residential home networks are configured in a tree topology that is connected to the internet. This typically consists of a single router/modem that serves all the end-user devices on the network with internet connection. The router also acts as a gateway for the devices connected on the network to communicate with one another. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Packets of data that are generated by the devices are encapsulated with destination routing information; which is passed to the router at the center which directs the data to it’s destination in the network. For example, a user connects to the router to gain access to a wider network that is the internet to load this webpage.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If there was a higher risk on losing the communications medium between two devices (cable failure), then bus would be at disadvantage here but ring might prove more beneficial although transmission would be slower as the network connection would be further away (go around the ring in the case of the picture above).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Mesh Topology</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>By explaining network topologies by comparing to a basic Wi-Fi network normally gets the message across. A mesh network can prove beneficial to areas in which a star network isn't covering the area you wish it to, for example, if you have 'dark' spots where you don't receive Wi-Fi signal, a mesh network might be better suited. A practical implementation of a mesh network can be seen in shopping centre's Wi-Fi networks where multiple routers are placed strategically such that you can walk around the entire property and not lose signal.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Ring Topology</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While star is a very popular configuration of network, it however is not the most ideal configuration for some types of networks. For example, if you had a series of devices that all needed to talk to each other, even if one was to fail, then a ring/bus/mesh would be more applicable where there is always a path to everyone else if a device was to fall offline. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Star Topology</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you consider a home Wi-Fi network that doesn't connect out further (no internet connection) then you have a basic star network. The center of the star in this scenario would be the Wi-Fi router, you can still connect to the other devices but not outside of your network and all messages have to travel through the router.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Tree Topology</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A tree topology is just creating multiple star networks off the back of another network. For example, if you considered the network that is your internet connection from the street (or satellite), then connecting to your modem (gateway) then furthering to your devices in your home, you have a basic tree network.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Bus Topology</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Where devices are connected to a single medium (cable) to communicate with each other, you now have a bus network. A bus network proves it's advantages by less cabling than star networks, ease of installation of linear networks and works well with small networks. It is easy enough to add new devices to the network and if one fails (but the medium doesn't) then all devices can still communicate. Disadvantages arise when problems occur as it difficult to determine the cause of an issue on a bus network.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date><![CDATA[2019-03-08 06:30:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-07 20:30:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-16-networking-basics]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[186]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 16 - Networking Basics

This post aims to explain network configurations to help beginners understand the framework behind networks. I believe that topologies should be the first thing to learn for networking.

#networking]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Episode 17 – Networking Routing &amp; Addressing</title>
		<link>https://jmckew.com/2019/03/15/episode-17-networking-routing-addressing/</link>
		<pubDate>Thu, 14 Mar 2019 20:30:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=229</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Following last weeks post around network topologies, I believe the next topic to cover is routing and addressing. Routing is the process of selecting a path for traffic to flow through in a network while addressing is marking elements within a network. A real-world example of routing and addressing is the postal system, each element (person) is marked with an address (eg, a street address) and the mail makes it to that address from routing it from the sender to the receiver.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While the goal for routing may be simple (“go from sender to receiver in the most efficient/quickest way possible”), the techniques used to achieve this can be very complex and confusing but when solutions are found that make a network work efficiently, it is a very rewarding experience for all users.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Routing can be broken into three broad categories:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Protocols – the medium that allows information to move through a network</li><li>Algorithms – to determine paths between sender and receiver</li><li>Databases – to store information that the algorithms determine</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The whole premise around routers in a network (<a href="https://jmckew.com/2019/03/08/episode-16-networking-basics/">Networking Basics</a>) is that they will “pass it on”, either to their smarter peers or in the correct direction. For example in a star/tree network, devices pass information to their closest ‘router’ which then decides either to pass it directly to the correct address or to another router which may have a better idea on where the information is intended on going.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Protocols</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In industry,
some of the most common networking protocols are MODBUS and DNP3. Modbus being
a de-facto standard for interconnecting electrical equipment and DNP3
(Distributed Network Protocol) commonly being used in the water/electric industries
for their flexibility during outages or broken links in a network. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Algorithms</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Routing
tables is the most prevalent type of routing algorithms with their fixed nature
meaning once the routing decisions for how information travels have been decided,
they do not change. The other type of routing algorithms (which are much more
exciting) are known as adaptive algorithms, which means the routing changes
depending on: topology, delay, load, etc, to try and reach the most efficient path
from sender to receiver.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Databases</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Following
algorithms, databases can either hold the entire routing table and a router
looks up where it wants to go and it which path to take (similar to a bus
timetable), or, forwarding tables (technically can be apart of routing tables
as well) which detail the communications pathways to utilize for types of
traffic.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2019-03-15 06:30:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-14 20:30:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[episode-17-networking-routing-addressing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Episode 17 – Networking Routing & Addressing

Following last weeks post around network topologies, I believe the next topic to cover is routing and addressing.

#networking #computers #networks #protocols #modbus #dnp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Introduction to ESP32/ESP8266</title>
		<link>https://jmckew.com/2019/03/22/introduction-to-esp32-esp8266/</link>
		<pubDate>Thu, 21 Mar 2019 20:30:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=233</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>What is an ESP32/ESP8266?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The ESP32 and ESP8266 are low-cost Wi-Fi modules, which are perfect for DIY Internet of Things (IoT) projects. They both come with general purpose input/output pins (GPIOs), support a variety of protocols such as SPI, I2C, UART and many more. The most attractive part of the ESP range is that they come with wireless networking included, separating them from their Arduino microcontroller counterparts. All in all, the ESP series allows you to easily control/monitor devices remotely using Wi-Fi for a very low price.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>ESP32 vs ESP8266</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The ESP32 is the later ‘model’ of the ESP8266. It added a whole suite of new functionality such as: touch sensitive pins, built-in temperature and hall effect sensors and upgraded from single core CPU to a dual core, faster Wi-FI, more GPIOs and now supports Bluetooth and BLE (Bluetooth Low Energy). While both boards are very low-cost, the ESP32 costs slightly more, the ESP8266 (here in Australia) costs around ~$10AU, and the ESP32 around ~$22AU.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://lh5.googleusercontent.com/YEn9Lm0l_QN1jP9Ea6uZmsv35BVp1tqf5hzIZxX3FrVzfZ1MeN6k5pgU-gR6sWmydMCJr0s0pgN8yDBWOQ3-7FqAmAd2ic81lL-QyWsL_Vmu7DAObpqPS3KbeOCC6-ZVT_yV8F9x" alt=""/><figcaption> <br><strong>ESP8266</strong> <br></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://lh4.googleusercontent.com/yDWgNpn3xMkKX994_b1IzbLWxbo83S2DDKlgS9y4wVbp37ADfVuJwF2EX6H_UWEzcmHfxe_cuABMR920dr0Ebx5WNOwtj0mhoIZjPwiBQcEp0HI1_ZeB4RoL9xaDqCDd4h9651Cv" alt=""/><figcaption> <br><strong>ESP32</strong><br></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Flavours of ESP boards</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are currently many different varieties of ESP flavours you can buy off the shelf, while if you are more into developing the board around your ESP module (the pictures above) you can simply just purchase the relevant ESP module, or if you are like me and don’t want to bother soldering and developing your own board there is a solutions for you!<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>ESP32 Development Boards</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>ESP32 Thing - Sparkfun</h4>
<!-- /wp:heading -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://lh4.googleusercontent.com/KbaOiY3Ua8m_lSgC-RJu8arkN7Ao77SkRh8GBIqHYs13cJz4QD50ZNfJ7LzQh8OLUvmOvbwI1aABuY5airc2IlLBnV23U-I6PoX14HuFPBe4xHEEh8RR11TWp0ZTaINXCUoYJNC4" alt=""/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The ESP32 Thing comes with all the functionalities to easily communication and program the ESP32 with your computer (including a on-board USB-Serial). It also features a LiPo charger, so your ESP32 project can use rechargeable batteries without having to solder any terminals and make it easy to replace/disconnect the battery pack.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Espressif ESP32 Development Board - Developer Edition</h4>
<!-- /wp:heading -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://lh4.googleusercontent.com/nEUzBIo2o0em3J1qshFFcl5j8nhsyrQ3u6hMco2gW590xiJhmjhOd7dRu8IUcCzu5yuKfOS43gEOaHSsNYRGIvLKSc1Yb3MjRL8vIZT5LNkTXud_DWZqL7paMXOPYx9eLzR2fPgX" alt=""/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If you’re not confident on soldering the header pins on the Sparkfun Thing board, then the Espressif board comes with that done for you! The header pins are also nicely spaced out so if you are a breadboard enthusiast, you can just plug and play on your breadboard and start connecting all your header wires.<br><br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>ESP8266 Development Boards</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>NodeMCU</h4>
<!-- /wp:heading -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://lh4.googleusercontent.com/8uW0VTOhEuA6ILjpw2C2Mfv34emw8jjj9rIpuWjbedNzku76cVO6hBoScNNPpx1Ei0P4ci31B0gYeaO2hfvOER1v67J1PXAfkey9cFzvPWIU4qPL4Q3bb3vcnK5GBlIZu8hr2ujm" alt=""/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The NodeMCU is my personal favourite ESP flavour board because it is friendly to your breadboard, has an on-board USB-Serial and can be powered by USB. This all means that you can test and develop your board straight out of the box without fiddling around with soldering pins, voltages or getting any extra components (except a Micro-usb cable).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Adafruit Huzzah ESP8266 Breakout</h4>
<!-- /wp:heading -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://lh6.googleusercontent.com/BN-_9XEuEPYw5wl_AiDR5OfcwF2ulK7SQMrpnmglXTe41m7ssb22kARsw8zyzmBJFeFQgHXG4jZQu1RN4Lj0itUJgeqqosQN7zZ4pzavsBPtguSzM819r2W7l-uBixDY4ZwRHDqq" alt=""/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Huzzah board is Adafruits answer to other development boards that weren’t friendly to breadboards, didn’t have on-board voltage regulators and weren’t CE or FCC emitter certified. The Huzzah board comes with all these functionalities, although unlike the NodeMCU you will need to get a USB-Serial cable to able to program your Huzzah board.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date><![CDATA[2019-03-22 06:30:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-21 20:30:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[introduction-to-esp32-esp8266]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Introduction to ESP32/ESP8266

The ESP32 and ESP8266 are low-cost Wi-Fi modules, which are perfect for DIY Internet of Things (IoT) projects. 

#IoT #microcontroller #wifi #network #control #electronics #embedded]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>What is MicroPython?</title>
		<link>https://jmckew.com/2019/03/29/what-is-micropython/</link>
		<pubDate>Thu, 28 Mar 2019 20:39:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=239</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>From the MicroPython docs
themselves <em>“</em><em>MicroPython is a lean and efficient
implementation of the </em><a href="http://www.python.org/"><em>Python 3</em></a><em> programming language that includes a small
subset of the Python standard library and is optimised to run on
microcontrollers and in constrained environments.”. </em>But what does all this mean? Python 3 is one of
the most widely used, easy to write/read programming languages in the world
that is rapidly growing. By default Python comes with a ‘standard library’
which includes basic functions such as if statements, loops, printing, etc. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Where MicroPython comes in is that the standard library for Python might
take up valuable space/computations to run as efficiently it does on a PC, so
MicroPython is a slice of the standard library that is able to run more
efficiently and take up less space on a microcontroller (RAM and space is
crucial when working with microcontrollers).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>MicroPython also comes with an interactive REPL (Read-Evaluate-Print Loop), which is an often overlooked amazing feature of MicroPython. The REPL allows you to connect to a microcontroller, execute code quickly without the need to compile or upload code. Which gives immediate feedback on whether your program is working as intended.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><strong>Differences between MicroPython &amp; Python</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There
obviously had to be some changes between Python and MicroPython to make it work
efficiently on processors a fraction of the power, but what are they? If you
are a beginner-intermediate Python programmer, you’ll only run into trouble in
very specific scenarios, which can be easily worked around. For example you
cannot delete from a list with a step greater than 1.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Sample
Python Code</strong></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">L = [1,2,3,4]
del(L[0:4:2])
print(L)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>You’d
expect for the output here in Python normally to be:</p>
<!-- /wp:paragraph -->

<!-- wp:table {"align":"center"} -->
<table class="wp-block-table aligncenter"><tbody><tr><td><strong>Python Output</strong></td><td><strong>MicroPython Output</strong></td></tr><tr><td>[2,4]</td><td>TypeError: object 'range' isn't a tuple or list</td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p><strong>Python
Output&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MicroPython
Output</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"align":"right"} -->
<p style="text-align:right">            [2,4]                                                     TypeError: object ‘range’ isn’t a              tuple or list</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However
this can be easily worked around with an explicit loop for example:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Sample
MicroPython/Python Code</strong></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">L = [1,2,3,4]
for i in L:
    if(i%2==0):
        del(L[i])</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>For more
information on differences between Python (in particular CPython) and
MicroPython you can find the MicroPython documentation here: <a href="http://docs.micropython.org/en/latest/genrst/index.html">http://docs.micropython.org/en/latest/genrst/index.html</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date><![CDATA[2019-03-29 06:39:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-28 20:39:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-is-micropython]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[What is MicroPython?

#python #micropython #embedded #IoT #microcontroller #electronics]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>How to Program an ESP8266 with MicroPython</title>
		<link>https://jmckew.com/2019/04/05/how-to-program-an-esp8266-with-micropython/</link>
		<pubDate>Thu, 04 Apr 2019 20:30:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=248</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Following the previous two weeks of topics, <a href="https://jmckew.com/2019/03/22/introduction-to-esp32-esp8266/">Introduction to ESP32/ESP8266</a> <br>and <a href="https://jmckew.com/2019/03/29/what-is-micropython/">What is MicroPython?</a>. &nbsp;I wrote an&nbsp;<a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://maker.pro/esp8266/tutorial/how-to-program-an-esp8266-with-micropython" target="_blank">article on maker.pro</a> in which I describe how to program the ESP8266 with MicroPython in detail. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2019-04-05 06:30:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-04 20:30:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-program-an-esp8266-with-micropython]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_21735434]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_21735437]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Python for the Finance Industry</title>
		<link>https://jmckew.com/2019/04/12/python-for-the-finance-industry/</link>
		<pubDate>Thu, 11 Apr 2019 20:30:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=256</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This is the first post in a series of posts dedicated for
demonstrating how Python can be applied in the finance industry. Personally,
the first thing that comes to mind when I think of the finance industry is the
stock market. For fellow Australians, our main stock exchange is the Australian
Securities Exchange (ASX). For those who are reading who are not familiar with
stocks, there is a plethora of information around stocks across the internet.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When it comes to using Python with stocks, the very first
thing that you will require, is data. Thankfully, there are multitudes of
services out there which provide this data through application programming
interfaces (APIs). The data is provided through APIs in a few common formats:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>JSON,</li><li>XML,</li><li>CSV.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For this post, I will be utilising the free service, Alpha Vantage, to request historical records of stock information on the ASX. For access to Alpha Vantage’s API, head to <a href="http://www.alphavantage.co/support/#api-key">http://www.alphavantage.co/support/#api-key</a> and register for a free API key. There is also documentation around testing if your API key is operational on the Alpha Vantage website. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now that we have access to an API in which we can extract historical records of stock information in the ASX, it’s time to manipulate and analyse the data. As in my previous post <a href="https://jmckew.com/2019/01/11/episode-8-anaconda/">Episode 8 – Anaconda</a>, I recommend setting up a virtual environment or anaconda environment to install &amp; manage dependencies of external libraries. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The packages required for this post in the series are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://pandas.pydata.org/">Pandas</a> (For manipulating the data),</li><li><a href="https://github.com/RomelTorres/alpha_vantage">Alpha_vantage</a> (To access the historical records through an API),</li><li><a href="https://www.numpy.org/">NumPy</a> (For processing across the data),</li><li><a href="https://matplotlib.org/">Matplotlib</a> (For visualising and generate plots of the data).</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>To import these libraries into our Python code the following
code is required:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">import pandas as pd
from alpha_vantage.timeseries import TimeSeries
import matplotlib.pyplot as plt
import numpy as np</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that we have imported the packages required to extract,
process and display the data. The first step is to extract the data in a useful
format from the Alpha Vantage API.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First declare a list with all the companies ASX names with the suffix “.AX” to denominate that it’s from the ASX. After that initialise an empty pandas dataframe to be filled with the data to analyse. Now iterate over the list, calling a request through the API to request the data that is required. There are multiple formats of data to be extracted through the API which is detailed in the <a href="https://alpha-vantage.readthedocs.io/en/latest/">Alpha_Vantage documentation</a>. For this post, I have used the get_daily function from the timeseries object in alpha_vantage to extract the daily information on a stock for the past 20 years, in particular, the closing value.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">companies = ['NAB.AX','WOW.AX','TLS.AX','BHP.AX']

stocks_df = pd.DataFrame()

for company in companies:
    data, meta_data = ts.get_daily(symbol=company,outputsize='full')
    print(data.head())
    stocks_df[company] = pd.Series(data['4. close'])

print(stocks_df.head())</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:image {"id":257,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/04/image.png" alt="" class="wp-image-257"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now that the dataframe is full of closing values for the companie’s stock’s closing values, it’s time to begin processing. First of all, for any missing data or erroneous 0 values, the ffill() function is used to fill any missing value by propagating the last valid observation forward. After that, the timestamp on each row is forced to become the index of the dataframe and converted to a datetime type.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">stocks_df = stocks_df.replace(0,pd.np.nan).ffill()
stocks_df.index = pd.to_datetime(stocks_df["date"])
stocks_df = stocks_df.drop("date",axis=1)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that the data has gone through it’s pre-processing phase, it’s time to begin plotting some figures. To begin, a basic figure, plotting a single for each company’s stock price over the past 20 years on a single line graph to enable comparison between the companies. </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">plt.figure(figsize=(14,7))
    for column in stocks_df.columns.values:
        plt.plot(stocks_df.index,stocks_df[column],lw=3,alpha=0.8,label=c)
plt.legend(loc='upper left',fontsize=12)
plt.ylabel('price in $')
plt.show()</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:image {"id":259,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i2.wp.com/jmckew.com/wp-content/uploads/2019/04/Figure_1-1.png?fit=640%2C318&amp;ssl=1" alt="" class="wp-image-259"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Another way to plot this data is to show it as the percentage change from the day before AKA daily returns. By plotting the data in this way, instead of showing the actual prices, the graph is showing the stocks’ volatility.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">returns = stocks_df.pct_change()

plt.figure(figsize=(14,7))
for column in returns.columns.values:
    plt.plot(returns.index,returns[column],lw=3,alpha=0.8,label=c)
plt.legend(loc='upper left',fontsize=12)
plt.ylabel('daily returns')
plt.show()</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:image {"id":260,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i0.wp.com/jmckew.com/wp-content/uploads/2019/04/Figure_2.png?fit=640%2C318&amp;ssl=1" alt="" class="wp-image-260"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now that we have some insight to the stocks’ data, the next
post in this series will demonstrate a way to calculate a balanced portfolio
from historical records using Modern Portfolio Theory.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2019-04-12 06:30:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-11 20:30:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-for-the-finance-industry]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Python for the Finance Industry

This is the first post in a series of posts dedicated for demonstrating how Python can be applied in the finance industry. This post demonstrates how to extract, process and present historical records from the ASX.

]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Portfolio Balancing with Historical Stock Data</title>
		<link>https://jmckew.com/2019/04/19/portfolio-balancing-with-historical-stock-data/</link>
		<pubDate>Thu, 18 Apr 2019 20:30:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=264</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Following last weeks' post (<a href="https://jmckew.com/2019/04/12/python-for-the-finance-industry/">Python for the Finance Industry</a>). This post is to demonstrate a method of determining an optimized portfolio based on historical stock price data. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First of all while attempting to tackle this problem, I stumbled across many very informative articles in which based on what I learned throughout reading them, and trying to replicate their findings with the ASX stocks' data.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Ricky Kim (<a href="https://towardsdatascience.com/efficient-frontier-portfolio-optimisation-in-python-e7844051e7f">Efficient Frontier Portfolio Optimisation in Python)</a></li><li>Bernard Brenyah (<a href="https://medium.com/python-data/effient-frontier-in-python-34b0c3043314">Markowitz’s Efficient Frontier in Python)</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now I will not be going into how Markowit'z Efficient Frontier Portfolio Optimization &amp; Sharpe Ratios works as these techniques are extremely well documented across this internet and very easily found. This post will be for implementing these techniques in Python to apply them to an ASX based portfolio.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Picking up from the end of the previous post, we had just plotted the percentage change over the time period for our stocks' data. For the sake of this post we will be using a technique called random optimization, where will be taking a number of random attempts and selecting the best one. Further posts will show a more detailed approach to this optimization problem. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now there are multiple steps before we get to the desired outcome of a balanced portfolio.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Generate X number of 'random' portfolios,</li><li>Rate their performance against one another,</li><li>Pick the desired solution.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>To generate random portfolios, we define a function such that we can pass it differing variables as to tweak our outcomes in the future.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def generate_portfolios(num_portfolios,average_returns,covariance_matrix,risk_free_rate):
    results = np.zeros((3,num_portfolios))
    weights_record = []
    for portfolio in range(num_portfolios):
        weights = np.random.random(len(companies) - 1)
        weights /= np.sum(weights)
        weights_record.append(weights)
        returns, volatility = portfolio_performance(weights,average_returns,covariance_matrix)
        results[0,portfolio] = volatility
        results[1,portfolio] = returns
        results[2,portfolio] = (returns - risk_free_rate) / volatility
    return results, weights_record</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>To step through this function:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Define empty location for our portfolio performance results to be stored along with recording weights so we can extract them once selected,</li><li>For each portfolio to be generated, give a random 'weighting' for each of the company that we have historical data on (eg, 23% NAB.AX),</li><li>Even out the distribution of the weights such that the sum of the weightings is 100% (eg, total budget),</li><li>Record the weightings generated in our memory location,</li><li>Determine the performance of our randomly generated portfolio (more on that soon),</li><li>Fill in the portfolio performance results for this generated portfolio and repeat for X number of portfolios.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In step 5 above, we have to determine how to rank the generated portfolios against each other to work out how to filter our results. To do this, we calculate volatility of the portfolio using the following formula:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://cdn-images-1.medium.com/max/1600/1*IabrYvsgHE07z2CJwoE9Zw.jpeg" alt="Image result for portfolio volatility formula"/><figcaption> <br><a href="http:// https://medium.com/python-data/assessing-the-riskiness-of-a-portfolio-with-python-6444c727c474 ">Assessing the riskiness of a portfolio with Python</a></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p><a rel="noreferrer noopener" href="https://medium.com/@bbrenyah" target="_blank">Bernard Brenyah</a>, whom I mentioned at the beginning of the post, has provided a clear explanation of how the above formula can be expressed in matrix calculation in one of&nbsp;<a rel="noreferrer noopener" href="https://medium.com/python-data/assessing-risks-and-return-with-probabilities-of-events-with-python-c564d9be4db4" target="_blank">his blog post</a>s. In which we just take the matrix calculation and multiply by 253 for number of trading days in Australia.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def portfolio_performance(weights,average_returns,covariance_matrix):
    returns = np.sum(weights*average_returns) * 253
    variance = np.dot(weights.T,np.dot(covariance_matrix,weights))
    volatility = np.sqrt(variance) * np.sqrt(253)
    return returns, volatility</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that we have X number of randomly generated portfolios, all ranked against one another, it's time to plot so that our results can be visualized.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def display_random_efficient_frontier(average_returns,covariance_matrix,num_portfolios,risk_free_rate):
    results, weights = generate_portfolios(num_portfolios,average_returns,covariance_matrix,risk_free_rate)

    max_sharpe_index = np.argmax(results[2])
    max_volatility = results[0,max_sharpe_index]
    max_return = results[1,max_sharpe_index]
    max_sharpe_allocations = allocations(max_sharpe_index,weights,stocks_df).T

    print("MAX SHARPE RATIO\n")
    print("Return: {0:.2f}".format(max_return))
    print("Volatility: {0:.2f}".format(max_volatility))
    print(max_sharpe_allocations)

    min_vol_index = np.argmin(results[0])
    min_volatility = results[0,min_vol_index]
    min_return = results[1,min_vol_index]
    min_vol_allocations = allocations(min_vol_index,weights,stocks_df).T

    print("\nMINIMUM VOLATILITY\n")
    print("Return: {0:.2f}".format(min_return))
    print("Volatility: {0:.2f}".format(min_volatility))
    print(min_vol_allocations)

    plt.figure(figsize=(10, 7))
    plt.scatter(results[0,:],results[1,:],c=results[2,:],cmap='YlGnBu', marker='o', s=10, alpha=0.3)
    plt.colorbar()
    plt.scatter(max_volatility,max_return,marker='X',color='r',s=400, label='Maximum Sharpe ratio')
    plt.scatter(min_volatility,min_return,marker='X',color='y',s=400, label='Minimum volatility')
    plt.title('Simulated Portfolio Optimization based on Efficient Frontier')
    plt.xlabel('Volatility')
    plt.ylabel('Returns')
    plt.legend(labelspacing=0.8)

def allocations(index,weights,stocks_df):
    allocation = pd.DataFrame(weights[index],index=stocks_df.columns,columns=['allocation'])
    return allocation</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Using the above function 'display_random_efficient_frontier', this will determine our max sharpe ratio portfolio generated and the minimum volatility portfolio with their respective returns. Now it is entirely up to the trader on how much risk they are willing to take on board with their portfolio. With the settings below in conjunction with the previously defined functions and stock data to generate the portfolios (risk free rate determined from <a href="http://www.worldgovernmentbonds.com/country/australia/">this website</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">returns = stocks_df.pct_change()
mean_returns = returns.mean()
cov_matrix = returns.cov()
num_portfolios = 25000
risk_free_rate = 0.01977

display_random_efficient_frontier(mean_returns,cov_matrix,num_portfolios,risk_free_rate)
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:image {"id":267} -->
<figure class="wp-block-image"><img src="https://jmckew.com/wp-content/uploads/2019/04/image-1.png" alt="" class="wp-image-267"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":268,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/04/image-2.png" alt="" class="wp-image-268"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>With the two portfolios determined, the one gives us the best risk-adjusted (as long as the trader is prepared to take the risk) is the one with the maximum Sharpe ratio, allocating a 67% portion to WOW and 32% to BHP, as these stocks were quite volatile from the daily percentage change calculations. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the other hand, the minimum volatility portfolio is reflecting the more stable of the stocks from the daily percentage change calculations distributing portions over NAB and TLS due to their stability from the percentage change calculations and reducing the portion to WOW.<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date><![CDATA[2019-04-19 06:30:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-18 20:30:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[portfolio-balancing-with-historical-stock-data]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Portfolio Balancing with Historical Stock Data

Following last week's post, this article aims to demonstrate how to balance a portfolio based on historical stock data with Python.

#finance #stocks #python #optimisation #asx ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[268]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Lucas Wrightson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lucas.wrightson@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[49.180.52.126]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-04-19 16:49:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-04-19 06:49:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very interesting, well done]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Zoe]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ZoeFinnegan@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[120.88.173.247]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-04-26 19:05:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-04-26 09:05:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is fantastic!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>Efficient Frontier for Balancing Portfolios</title>
		<link>https://jmckew.com/2019/04/26/efficient-frontier-for-balancing-portfolios/</link>
		<pubDate>Thu, 25 Apr 2019 20:30:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=276</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Following last 2 weeks’ posts (<a href="https://jmckew.com/2019/04/12/python-for-the-finance-industry/">Python for the Finance Industry</a>  &amp; <a href="https://jmckew.com/2019/04/19/portfolio-balancing-with-historical-stock-data/">Portfolio Balancing with Historical Stock Data</a>), we now know how to extract historical records on stock information from the ASX through an API, present it in a graph using matplotlib, and how to balance a portfolio using randomly generated portfolios. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This post is to demonstrate a method in balancing portfolios that does not depend on generating random portfolios, but rather mathematically determining the extremities of boundaries for effective portfolios using the <a href="https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html">SciPy optimize function</a> (similar to that of <a href="https://support.office.com/en-ie/article/define-and-solve-a-problem-by-using-solver-5d1a388f-079d-43ac-a7eb-f63e45925040">Excel's 'solver'</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Returning to last weeks' post when the budget allocations  to assets were determined from randomly generated portfolios, it was presented on the graph below:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":268} -->
<figure class="wp-block-image"><img src="https://jmckew.com/wp-content/uploads/2019/04/image-2.png" alt="" class="wp-image-268"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>From this plot, it can be visualized that it forms an arch line between the yellow and red crosses. This line is called the <a href="https://www.investopedia.com/terms/e/efficientfrontier.asp">efficient frontier</a>. The efficient frontier represents the set of optimal portfolios that offer the highest expected return for a defined level of risk or the lowest risk for a given level of expected return. Simply this means, all the dots (portfolios) to the right of the line will give you a higher risk for the same returns.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First of all we must mathematically determine the portfolio with the maximum Sharpe ratio as the greater a portfolio's Sharpe ratio, the better it's risk-adjusted performance. Sharpe ratio is calculated using the formula below:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":278,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/04/chrome_dUqVqnTloj.png" alt="" class="wp-image-278"/><figcaption> <br><a href="https://www.investopedia.com/terms/s/sharperatio.asp">https://www.investopedia.com/terms/s/sharperatio.asp</a> </figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To find the maximum of the Sharpe Ratio programmatically we follow these steps:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Firstly, define the formula as the function neg_sharpe_ratio (take note that to find the <a href="https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html#constrained-minimization-of-multivariate-scalar-functions-minimize">maximum of function in SciPy</a>, we use the minimize function with an inverse  sign),</li><li>In the max_sharpe_ratio function, define arguments to be passed into the SciPy minimize function:<ul><li>neg_sharpe_ratio: function to be minimized,</li><li>num*[1/num_assets]: initial guess which is evenly distributed array of values,</li><li>Arguments that are to be passed into the objective function (neg_sharpe_ratio),</li><li>Method of Sequential Lease Squares Programming, there are <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html">many others which can be seen here,</a></li><li>Bounds: between 0% and 100% of our budget allocation,</li><li>Constraints: given as a dictionary, 'eq' type for equality and 'fun' for the anonymous function which limits the total summed asset allocation to 100% of the budget.</li></ul></li><li>The result from the minimize function is returned as a <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult">OptimizeResult</a> type.</li></ul>
<!-- /wp:list -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def neg_sharpe_ratio(weights, average_returns, covariance_matrix, risk_free_rate):
    returns, volatility = portfolio_performance(weights, average_returns, covariance_matrix)
    return -(returns - risk_free_rate) / volatility

def max_sharpe_ratio(average_returns, covariance_matrix,risk_free_rate):
    num_assets = len(average_returns)
    args = (average_returns, covariance_matrix, risk_free_rate)
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bound = (0,1)
    bounds = tuple(bound for asset in range(num_assets))
    result = sco.minimize(neg_sharpe_ratio,num_assets*[1/num_assets,],args=args,method='SLSQP',bounds=bounds,constraints=constraints)
    return result</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Similarly to the maximum sharpe ratio we do the same for determining the minimum volatility portfolio programmatically. We minimise volatility by trying different weightings on our asset allocations to find the minima.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def portfolio_volatility(weights, average_returns, covariance_matrix):
    return portfolio_performance(weights, average_returns, covariance_matrix)[1]

def min_variance(average_returns, covariance_matrix):
    num_assets = len(average_returns)
    args = (average_returns, covariance_matrix)
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bound = (0.0,1.0)
    bounds = tuple(bound for asset in range(num_assets))

    result = sco.minimize(portfolio_volatility, num_assets*[1./num_assets,], args=args, method='SLSQP', bounds=bounds, constraints=constraints)

    return result</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>As above, we can also draw a line which depicts the efficient frontier for the portfolios for a given risk rate. Below some functions are defined for computing the efficient frontier. The first function, efficient_return is calculating the most efficient portfolio for a given target return, and the second function efficient frontier is compiling the  most efficient portfolio for a range of targets.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def efficient_return(average_returns, covariance_matrix, target):
    num_assets = len(average_returns)
    args = (average_returns, covariance_matrix)

    def portfolio_return(weights):
        return portfolio_performance(weights, average_returns, covariance_matrix)[0]

    constraints = ({'type': 'eq', 'fun': lambda x: portfolio_return(x) - target},
                   {'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bounds = tuple((0,1) for asset in range(num_assets))
    result = sco.minimize(portfolio_volatility, num_assets*[1./num_assets,], args=args, method='SLSQP', bounds=bounds, constraints=constraints)
    return result


def efficient_frontier(average_returns, covariance_matrix, returns_range):
    efficients = []
    for ret in returns_range:
        efficients.append(efficient_return(average_returns, covariance_matrix, ret))
    return efficients</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now it's time to plot the efficient frontier on the graph with the randomly selected portfolios to check if they have been calculated correctly. It is also an opportune time to check if the maximum Sharpe ratio and minimum volatility portfolios have been calculated correctly by comparing them to the previously randomly determined portfolios.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def display_efficient_frontier(average_returns,covariance_matrix,num_portfolios,risk_free_rate):
    results, weights = generate_portfolios(num_portfolios,average_returns,covariance_matrix,risk_free_rate)

    max_sharpe = max_sharpe_ratio(average_returns,covariance_matrix,risk_free_rate)
    max_sharpe_return, max_sharpe_volatility = portfolio_performance(max_sharpe['x'],average_returns,covariance_matrix)
    max_sharpe_allocations = allocations_ef(max_sharpe.x,stocks_df).T

    print("MAX SHARPE RATIO\n")
    print("Return: {0:.2f}".format(max_sharpe_return))
    print("Volatility: {0:.2f}".format(max_sharpe_volatility))
    print(max_sharpe_allocations)

    min_vol = min_variance(average_returns,covariance_matrix)
    min_vol_return, min_vol_volatility = portfolio_performance(min_vol['x'],average_returns,covariance_matrix)
    min_vol_allocations = allocations_ef(min_vol.x,stocks_df).T

    print("\nMINIMUM VOLATILITY\n")
    print("Return: {0:.2f}".format(min_vol_return))
    print("Volatility: {0:.2f}".format(min_vol_volatility))
    print(min_vol_allocations)

    an_vol = np.std(returns) * np.sqrt(253)
    an_rt = average_returns * 253

    for i, txt in enumerate(stocks_df.columns):
        print(txt,":","Annuaised return",round(an_rt[i],2),", Annualised volatility:",round(an_vol[i],2))

    plt.figure(figsize=(10, 7))
    plt.scatter(results[0,:],results[1,:],c=results[2,:],cmap='YlGnBu', marker='o', s=10, alpha=0.3)
    plt.colorbar()
    plt.scatter(max_sharpe_volatility,max_sharpe_return,marker='X',color='r',s=400, label='Maximum Sharpe ratio')
    plt.scatter(min_vol_volatility,min_vol_return,marker='X',color='y',s=400, label='Minimum volatility')

    target = np.linspace(min_vol_return, max(an_rt), 50)
    efficient_portfolios = efficient_frontier(average_returns, covariance_matrix, target)
    
    plt.plot([p['fun'] for p in efficient_portfolios], target, linestyle='-.', color='white', label='efficient frontier')

    plt.title('Calculated Portfolio Optimization based on Efficient Frontier')
    plt.xlabel('Volatility')
    plt.ylabel('Returns')
    plt.legend(labelspacing=0.8)

def allocations_ef(solution,stocks_df):
    allocation = pd.DataFrame(solution,index=stocks_df.columns,columns=['allocation'])
    return allocation

returns = stocks_df.pct_change()
average_returns = returns.mean()
covariance_matrix = returns.cov()
num_portfolios = 25000
risk_free_rate = 0.01977

display_efficient_frontier(average_returns,covariance_matrix,num_portfolios,risk_free_rate)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:image {"id":281} -->
<figure class="wp-block-image"><img src="https://jmckew.com/wp-content/uploads/2019/04/Code_lDUKAxc9JU.png" alt="" class="wp-image-281"/></figure>
<!-- /wp:image -->

<!-- wp:image {"id":282} -->
<figure class="wp-block-image"><img src="https://jmckew.com/wp-content/uploads/2019/04/Code_R2bA54PriC.png" alt="" class="wp-image-282"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The surprising part is that the calculated result is very close to what we have previously simulated by picking from randomly generated portfolios. The slight differences in allocations between the simulated vs calculated are in most cases less than 1%, which shows how powerful randomly estimating calculations can be albeit sometimes not reliable in small sample spaces.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Rather than plotting every randomly generated portfolio, we can plot the individual stocks on the plot with the corresponding values of each stock's return and risk. This way we can compare how diversification is lowering the risk by optimizing the allocations.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">def display_efficient_frontier_selected(average_returns,covariance_matrix,risk_free_rate):

    max_sharpe = max_sharpe_ratio(average_returns,covariance_matrix,risk_free_rate)
    max_sharpe_return, max_sharpe_volatility = portfolio_performance(max_sharpe['x'],average_returns,covariance_matrix)
    max_sharpe_allocations = allocations_ef(max_sharpe.x,stocks_df).T

    print("MAX SHARPE RATIO\n")
    print("Return: {0:.2f}".format(max_sharpe_return))
    print("Volatility: {0:.2f}".format(max_sharpe_volatility))
    print(max_sharpe_allocations)

    min_vol = min_variance(average_returns,covariance_matrix)
    min_vol_return, min_vol_volatility = portfolio_performance(min_vol['x'],average_returns,covariance_matrix)
    min_vol_allocations = allocations_ef(min_vol.x,stocks_df).T

    print("\nMINIMUM VOLATILITY\n")
    print("Return: {0:.2f}".format(min_vol_return))
    print("Volatility: {0:.2f}".format(min_vol_volatility))
    print(min_vol_allocations)

    an_vol = np.std(returns) * np.sqrt(253)
    an_rt = average_returns * 253

    for i, txt in enumerate(stocks_df.columns):
        print(txt,":","Annuaised return",round(an_rt[i],2),", Annualised volatility:",round(an_vol[i],2))

    plt.figure(figsize=(10, 7))
    plt.scatter(an_vol,an_rt,marker='o',s=200)

    for i, txt in enumerate(stocks_df.columns):
        plt.annotate(txt, (an_vol[i],an_rt[i]), xytext=(10,0), textcoords='offset points')


    plt.scatter(max_sharpe_volatility,max_sharpe_return,marker='X',color='r',s=400, label='Maximum Sharpe ratio')
    plt.scatter(min_vol_volatility,min_vol_return,marker='X',color='y',s=400, label='Minimum volatility')

    target = np.linspace(min_vol_return, max(an_rt), 50)
    efficient_portfolios = efficient_frontier(average_returns, covariance_matrix, target)
    
    plt.plot([p['fun'] for p in efficient_portfolios], target, linestyle='-.', color='white', label='efficient frontier')

    plt.title('Calculated Portfolio Optimization based on Efficient Frontier')
    plt.xlabel('Volatility')
    plt.ylabel('Returns')
    plt.legend(labelspacing=0.8)

display_efficient_frontier_selected(average_returns,covariance_matrix,risk_free_rate)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:image {"id":284} -->
<figure class="wp-block-image"><img src="https://jmckew.com/wp-content/uploads/2019/04/Code_3sKudlcKG6.png" alt="" class="wp-image-284"/></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>From the plot above, the stock with the highest risk is BHP, which accompanies the highest returns. This shows that if the investor is willing to take the risk than they will be rewarded with the higher return. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This concludes the 3 part series on Python in the finance industry, if there is any topics in particular you would like to see how software can integrate and improve a service/product please feel free to get in touch!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date><![CDATA[2019-04-26 06:30:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-25 20:30:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[efficient-frontier-for-balancing-portfolios]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[282]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Efficient Frontier for Balancing Portfolios

This post is to demonstrate a method in balancing portfolios that mathematically determines the range of most efficient risk-adjusted portfolios along with their allocations.

#python #finance #stocks #asx #code]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>What is MongoDB?</title>
		<link>https://jmckew.com/2019/05/03/what-is-mongodb/</link>
		<pubDate>Thu, 02 May 2019 20:30:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=289</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Recently after looking for a different flavour of database apart from MySQL (which is what I am personally use to), I had always heard about MongoDB. So after some investigation, I found that MongoDB has a platform MongoDB University to familiarize yourself with their product.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I completed their very first introductory course M001: MongoDB Basics last week, I found it very gentle in the introduction to database management and exploring data sets. This post is dedicated my take on the course and the key takeaways from my point of view.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The course is broken into multiple chapters in which a chapter is released each week for the duration of the course. For example, the basics course was broken up into:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Intro to MongoDB, Mongo Compass and Basic Queries,</li><li>Create, Read, Update and Delete (CRUD) operations and more,</li><li>MongoDB queries.</li><li></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Following all the chapters, you are faced with a final exam which tests if you were participating/listening in the earlier chapters. If you are concerned that you may struggle, this final exam is made up of a few multiple choice questions based on querying the data sets used in the chapters.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>MongoDB is a open source document-oriented database program, classified as a NoSQL database and utilises JSON-like documents with a schema. They also provide a tool to help sift through the database called 'Compass'.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Personally, I really enjoy the functionality within Compass with plotting geographical data, presenting data type variances across the fields in a document and many other features. I found Compass one of the most appealing features as someone that constantly seeks to gain insight from data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Queries within MongoDB are structured like a dictionary in Python, where the field in the document is passed the key and the criteria is the value. For example, a basic query to return all documents within a MongoDB database with score equal to 7 would be:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">{score:7}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>As a mainly Python developer, I found this to be very appealing as I find myself using dictionaries constantly when writing Python code, and by MongoDB using this format makes for an easy connection between the two.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>CRUD operations, are the fundamentals on actually using a database usefully. Through the Mongo shell you are able to add documents to the MongoDB database through JSON, XML, etc data formats. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Projections within MongoDB are used to specify or restrict the fields to return with the filtered documents if you are specifically looking at a few fields within a densely populated document.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition to the way queries are structured for filtering documents, it is also possible to use one of the many query or projection operators to further filter the documents. For example a query to return all documents with a score <strong>greater than</strong> 7 would be:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">{score: {$gte: 7}}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>This sums up all of the takeaways from the M001 course for MongoDB that I found. I look forward to taking more of the courses on MongoDB university to gain a greater understanding and be able to utilise MongoDB across some of my projects.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date><![CDATA[2019-05-03 06:30:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-02 20:30:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[what-is-mongodb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[What is MongoDB?

This post is dedicated my take on the course M001: MongoDB Basics on MongoDB university and the key takeaways from my point of view.

#mongodb #data #database #nosql #sql ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Explained: Voltage Drop</title>
		<link>https://jmckew.com/2019/05/10/explained-voltage-drop/</link>
		<pubDate>Thu, 09 May 2019 20:30:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=295</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Voltage drop is a electrical phenomenon in that wires carrying current always have resistance, or impedance to the current flow. Voltage drop is defined as the amount of loss that occurs through part of or all of a circuit due to resistance/impedance.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The most well known analogy for explaining voltage, current and voltage drop is a hose carrying water. In the garden hose, the water pressure is the voltage, the amount of water flowing is the current and the type and size of the hose makes up the resistance. Thus meaning that voltage drop is the loss of water pressure from the supply end of the hose to the output.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When designing electrical systems within Australia and New Zealand, we are required to design to Australian standards. For voltage drop, the relevant standards as AS/NZS3000 (Wiring Rules) and AS/NZS3008 (Cable Selection). Where AS/NZS3000 nominates the limits to conform to (5% maximum from point of supply) and AS3008 dictates multiple ways that voltage drop can be calculated.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this post, I will demonstrate a simplified method that is outlined in AS3000 Table C7 where it specifies 'Am per %Vd' (Amp meters per % voltage drop) for each cable size:</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td>Cable Conductor Size</td><td>Single Phase (230V) Am per %Vd</td><td>Three Phase (400V) Am per %Vd</td></tr><tr><td>1mm^2</td><td>45</td><td>90</td></tr><tr><td>1.5mm^2</td><td>70</td><td>140</td></tr><tr><td>2.5mm^2</td><td>128</td><td>256</td></tr><tr><td>4mm^2</td><td>205</td><td>412</td></tr><tr><td>6mm^2</td><td>306</td><td>615</td></tr><tr><td>10mm^2</td><td>515</td><td>1034</td></tr><tr><td>16mm^2</td><td>818</td><td>1643</td></tr><tr><td>25mm^2</td><td>1289</td><td>2588</td></tr><tr><td>35mm^2</td><td>1773</td><td>3560</td></tr><tr><td>50mm^2</td><td>2377</td><td>4772</td></tr><tr><td>70mm^2</td><td>3342</td><td>6712</td></tr><tr><td>95mm^2</td><td>4445</td><td>8927</td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>For example, a 50m run of 10mm^2 cable carrying 3 phase 32A will result in 5% drop: 32A * 50m = 1600 / 1034 = 1.5%.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In future posts, I will go into the various ways that AS/NZS3008 demonstrates ways of calculating voltage drop.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date><![CDATA[2019-05-10 06:30:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-09 20:30:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[explained-voltage-drop]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Explained: Voltage Drop

Voltage drop is a electrical phenomenon in that wires carrying current always have resistance, or impedance to the current flow. This posts aims to show you how to calculate it to Australian Standards.

#electrical #engineering]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Python Decorators Explained</title>
		<link>https://jmckew.com/2019/05/24/python-decorators-explained/</link>
		<pubDate>Thu, 23 May 2019 20:30:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=307</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Python decorators are one of the most difficult concepts in Python to grasp, and subsequently a lot of beginners struggle. However they help to shorten code and make it more 'Pythonic'. This post is going to go through some basic examples where decorators can shorten your code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Firstly you have to understand functions within python:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def hello(name='Jack'):
    return "Hello " + name

print(hello())
# output: 'Hello Jack'

greeting = hello
# assign a function to a variable, with no parentheses as we are not calling it

print(greeting())
# output: 'Hello Jack'

del hello
print(hello())
# output: NameError

print(greeting())
# output: 'Hello Jack'</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>As we can see above we can give functions default arguments (the string 'Jack' for the name variable in hello). Assign functions to variables (ensuring the parentheses are not included otherwise we would be assigning to the returning value from the function. Remove previous functions now that we have 'copied' the function over.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now to take the next step into functions within Python, by defining functions within functions:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def hello(name='Jack'):
    print("You're now inside the hello() function")
    def greeting():
        return "Now you are in the greeting() function"
    def welcome():
        return "Now you are in the welcome() function"
    print(greet())
    print(welcome())
    print("You are now back in the hello() function"
hello()
# outputs: "You're now inside the hello() function"
#          "Now you are in the greeting() function"
#          "Now you are in the welcome() function" 
#          "You are now back in the hello() function"

welcome()
# output: NameError: name 'welcome' is not defined</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now we can make nested functions (functions within functions), the next step is, functions returning functions.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def hello(name='Jack'):
    def greeting():
        return "Now you are in the greeting() function"
    def welcome():
        return "Now you are in the welcome() function"
    if(name == 'Jack'):
        return greeting
    else:
        return welcome

returned_function = hello()
print(returned_function)
# output: &lt;function greeting at 0x7f2143c01500>

# This clearly shows that the returned function is the greeting() function within the hello() function

print(returned_function()):
# output: "Now you are in the greeting() function"</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>From earlier, we know that if we don't include the parentheses then the function does not executed. Another extension of the way this is formatted is that we can now call hello()() which outputs "Now you are in the greeting() function". </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def hello(name="Jack"):
    return "Hello " + name

def preFunction(function):
    print("This is the prefunction function")
    print(hello())

preFunction(hello)
# output: "This is the prefunction function"
#         "Hello Jack"</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now you have all the knowledge to learn what decorators really are, they let you execute code before and after a function. The code above is actually a decorator, but let's make it more usable.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def new_decorator(function):
    def functionWrapped():
        print("This is the pre function")
        function()
        print("This is the post function")
    return functionWrapped

def function_requiring_decoration():
    print("I need some decorations!")

function_requiring_decoration()
# output: "I need some decorations"

function_requiring_decoration = new_decorator(function_requiring_decoration)
# Now our function is wrapped by functionWrapped()

function_requiring_decoration()
# output: "This is the pre function"
#         "I need some decoration"
#         "This is the post function"</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now you've made a decorator! We've just used what we learned previously to modify it's behaviour in one way or another. Now to make it even more concise we can just the @ symbol. Here is how we could have used the previous code with @ symbol.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">@new_decorator
def function_requiring_decoration():
    print("I need some decorations!")

function_requiring_decoration()
# output: "This is the pre function"
#         "I need some decoration"
#         "This is the post function"

# The @ operator is a short way of saying:
function_requiring_decoration = new_decorator(function_requiring_decoration)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Hopefully now you are ready to go and explore the world of -decorators within Python, they can be used quite powerfully and allow for you to reuse code and extend capabilities. Some of the best examples for decorators are for authentication or logging, however I will not cover them as they are extensively documented over the internet.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date><![CDATA[2019-05-24 06:30:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-23 20:30:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-decorators-explained]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Python Decorators Explained

Python decorators are one of the most difficult concepts in Python to grasp, and subsequently a lot of beginners struggle.This post is going to go through some basic examples where decorators can shorten your code.

#python]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Distributing Python Code</title>
		<link>https://jmckew.com/2019/05/31/distributing-python-code/</link>
		<pubDate>Thu, 30 May 2019 20:30:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=310</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This post will cover a way of distributing Python code such that is can be used by someone that does not have Python installed. One of the major drawbacks with Python that the gap is slowly being closed is how easy it is to distribute Python code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At a minimum, the computer that is to run the code must have the Python compiler (or equivalent). Now while this has been progressively included in more operating systems as a default (May update of Windows being the latest), you must still develop as such that is not present on the users' PC.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this post, I will show you a basic piece of code to demonstrate how it will be packaged and distributed to your users. To show a basic dialog box on the screen with the following code:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">import ctypes

ctypes.windll.user32.MessageBoxW(0, "Hello Windows!", "PyInstaller Example", 1)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which shows the user with this dialog box:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":311,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/05/python_Dh0hFJKqDx.png" alt="" class="wp-image-311"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now to package this code into an executable (.exe), there are multiple packages out there that are possible to use, some examples of these are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://anthony-tuininga.github.io/cx_Freeze/">cx_freeze</a></li><li><a href="http://www.py2exe.org/">py2exe</a></li><li><a href="https://www.pyinstaller.org/">PyInstaller</a></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For this post, I will use PyInstaller as it is what I am most familiar, please get in touch with me if you believe any other package is better suited. I have created an environment in anaconda named "pyinstall", in which I have installed PyInstaller with the command "conda install -c conda-forge pyinstaller", which includes Python 3.7.3 due to anaconda's packaging system (thereby including ctypes from the standard library).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now to use the PyInstaller package, just open Anaconda Prompt (or cmd if anaconda.exe is in your PATH). Navigate to where the python code is stored, and run the command "pyinstaller &lt;name_of_program>.py. See below for an example:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":313,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i1.wp.com/jmckew.com/wp-content/uploads/2019/05/cmd_PXbANiLF4N.png?fit=640%2C364&amp;ssl=1" alt="" class="wp-image-313"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This will create a build &amp; dist folder within the directory you navigated to, which contains the python application and all the required files will be put inside the dist folder which will be shipped to the user later on. There are many other settings that you can use to customize how your package gets built and more, but I won't go into that in this post.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":314,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/05/explorer_409CFHxhyh.png" alt="" class="wp-image-314"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now if we go into the dist folder and find the .exe (which will have the same name as your python file unless you change this setting). Once you hit run, you'll be met by this screen:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":315,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i1.wp.com/jmckew.com/wp-content/uploads/2019/05/pyinstall_example_w5KP1B327W.png?fit=640%2C364&amp;ssl=1" alt="" class="wp-image-315"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now you can send this executable to anyone (although most antivirus will stop you) and it will run on their PC!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date><![CDATA[2019-05-31 06:30:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-30 20:30:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[distributing-python-code]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Distributing Python Code

This post will cover a way of distributing Python code such that is can be used by someone that does not have Python installed.

#python #software #distribution #programming #code #pyinstaller]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Parallel Processing in Python</title>
		<link>https://jmckew.com/2019/06/07/parallel-processing-in-python/</link>
		<pubDate>Thu, 06 Jun 2019 20:30:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=322</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Parallel processing is a mode of operation where the task is executed simultaneously in multiple processors in the same computer. The purpose of this is intended to reduce the overall processing time, however, there is often overhead between communicating processes. For small tasks, the overhead is detrimental to the length of processing, increasing the overall time taken.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this post we will be using the multiprocessing package in Python. Multiprocessing is apart of the standard library within Python and is a package that supports spawning processes using an API similar to the threading module (also apart of the standard library). The main benefit of the multiprocessing package, is that it disregards the global interpreter lock (GIL), by using sub processes instead of threads.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The number of processors or threads in your computer dictates the maximum number of processes you can run at a time. To add flexibility to your program when it may be run across multiple machines, it is good practice to make use of the cpu_count() function apart of the multiprocessing, as shown below (please note f strings were only introduced in Python 3.6).</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">import multiprocessing as mp
print(f"Maximum number of processes: {mp.cpu_count()}")</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>In parallel processing, there are two types of execution: Synchronous and Asynchronous. Synchronous meaning where the processes are completed in the same order in which it was started, such that, the output is (normally) in order. While asynchronous means the processes can be in any order, and while the output can be mixed, is usually computed faster.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Within multiprocessing there are 2 main classes that you will use for parallel processing: Pool &amp; Process. The two classes are intended to be used in completely different scenarios, but still utilize parallel processing. Pool is beneficial for when you have a long list that need to be processed and combined back together at the end. Process is beneficial for when you need multiple functions running simultaneously, albeit not the same.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Pool Class</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The pool class has four methods that are particular useful:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Pool.apply</li><li>Pool.map</li><li>Pool.apply_async</li><li>Pool.map_async</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Before we tackle the asynchronous variants of the pool methods (async suffix). Here is a simple example using Pool.apply and Pool.map. We initialize the number of processes to however many is available or the maximum of the system.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def power_n_minus_1(value):
    return value**value-1
if __name__ == '__main__':
    pool = mp.Pool(processes=mp.cpu_count())
    results = [pool.apply(power_n_minus_1,args=(x,)) for x in range(1,5)]
    print(results)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>With the results being: [1, 2, 9, 64] or 1^0, 2^1,3^2,4^3. This can also be achieved similarly with Pool.map.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def power_n_minus_1(value):
    return value**value-1
if __name__ == '__main__':
    pool = mp.Pool(processes=mp.cpu_count())
    results = pool.map(power_n_minus_1,range(1,5))
    print(results)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Both of these will lock the main program that is calling them until all processes in the pool are finished, use this if you want to obtain results in a particular order. However if you don't care about the order and want to retrieve results as soon as they finished, then use the async variant.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def power_n_minus_1(value):
    return value**value-1
if __name__ == '__main__':
    pool = mp.Pool(processes=mp.cpu_count())
    outputs = [pool.apply_async(power_n_minus_1,args=(x,)) for x in range(1,5)]
    results = [p.get() for p in outputs]
    print(results)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading {"level":3} -->
<h3>The Process Class</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The process class is the most basic approach to parallel processing from multiprocessing package. Here we will use a simple queue function to generate 10 random numbers in parallel.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">import multiprocessing as mp
import random

output = mp.Queue()

def rand_number(lower_limit,upper_limit,output):
    output.put(random.randint(lower_limit,upper_limit))

if __name__ == "__main__":
    processes = [mp.Process(target=rand_number,args=(1,101,output)) for x in range(10)]
    for p in processes:
        p.start()
    for p in processes:
        p.join()
    results = [output.get() for p in processes]
    print(results)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>With the result being: [76, 40, 76, 27, 64, 94, 30, 71, 70, 40].</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By utilizing the multiprocessing package in Python or parallel computing concepts in general, you will now be able to dramatically increase computation times (for large processes).</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date><![CDATA[2019-06-07 06:30:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-06 20:30:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[parallel-processing-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Parallel Processing in Python

Parallel processing is a mode of operation where the task is executed simultaneously in multiple processors in the same computer. 

#python #computing #parallel #multiprocessing #code #synchronous #asynchronous]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Hands On Machine Learning Chapter 1</title>
		<link>https://jmckew.com/2019/06/14/hands-on-machine-learning-chapter-1/</link>
		<pubDate>Thu, 13 Jun 2019 20:30:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=325</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I've recently been making my way through the book "Hands-On Machine Learning with Scikit-Learn and Tensorflow", and thought I will put a summary of the chapter as a post, along with my personal answers to each of the chapter's exercises. The book in particular is published by O'Reilly and can be found <a href="https://www.oreilly.com/library/view/hands-on-machine-learning/9781491962282/">https://www.oreilly.com/library/view/hands-on-machine-learning/9781491962282/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Chapter 1 is around defining when and where to apply machine learning to a problem, as it is not always the best approach to solving a problem. Following, making sure to be aware of the strengths and weaknesses of each 'type' of machine learning systems. Types of machine learning systems can be broken into three broad categories:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Is the model trained with human supervision? (supervised, unsupervised, semisupervised and reinforcement learning)</li><li>Does the model learn incrementally on the fly or not? (online or batch learning)</li><li>Does the model work by simply comparing new vs known data or detect patterns to build a prediction? (instance based or model based learning)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The book then goes into detail around these, I will not as many resources around these topics are abundantly available on the internet. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Chapter 1 also goes onto to detail the importance of defining the problem, 'clean' data, training vs testing data and comparing different techniques. From here on are the chapter 1 exercise questions, with my personal answer, and the book's answer.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>  1. How would you define Machine Learning? </p><cite>My answer: Self-sufficiently improving on a technique.<br>Book's answer:  Machine  Learning  is  about  building  systems  that  can  learn  from  data.  Learning means getting better at some task, given some performance measure.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p> 2.  Can you name four types of problems where it shines? </p><cite>My answer: Processes which either involve: many complex steps, steps that require 'tuning', ever-changing systems based on variables or to gain insight on a problem from a new perspective.<br>Book's answer:  Machine Learning is great for complex problems for which we have no algorithmic solution, to replace long lists of hand-tuned rules, to build systems that adapt to fluctuating environments, and finally to help humans learn (e.g., data mining). </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>3.  What is a labeled training set? </p><cite>My answer: A data set with the associated desired answer. <br>Book's answer:  A labeled training set is a training set that contains the desired solution (a.k.a. alabel) for each instance. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>4. What are the two most common supervised tasks? </p><cite>My answer: Regression and classification.<br>Book's answer: The two most common supervised tasks are regression and classification. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>5.  Can you name four common unsupervised tasks? </p><cite>My answer: Association rule learning, anomaly detection, simplification and clustering.<br>Book's answer: Common  unsupervised  tasks  include  clustering,  visualization,  dimensionality reduction, and association rule learning. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>6. What type of Machine Learning algorithm would you use to allow a robot to walk in various unknown terrains? </p><cite>My answer; Reinforcement learning.<br>Book's answer:  Reinforcement  Learning is likely to perform best if we want a robot to learn to walk in various unknown terrains since this is typically the type of problem that Reinforcement Learning tackles. It might be possible to express the problem as a supervised or semisupervised learning problem, but it would be less natural. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>7.  What type of algorithm would you use to segment your customers into multiple groups? </p><cite>My answer: k-neighbour clustering.<br>Book's answer:  If you don’t know how to define the groups, then you can use a clustering algorithm (unsupervised learning) to segment your customers into clusters of similar customers. However, if you know what groups you would like to have, then you can feed many examples of each group to a classification algorithm (supervised learning), and it will classify all your customers into these groups .</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>8. Would you frame the problem of spam detection as a supervised learning problem or an unsupervised learning problem? </p><cite>My answer: Supervised or semisupervised.<br>Book's answer: Spam detection is a typical supervised learning problem: the  algorithm is fed many emails along with their label (spam or not spam). </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>9. What is an online learning system </p><cite>My answer: A system that learns incrementally on the fly from new data.<br>Book's answer: An online learning system can learn incrementally, as opposed to a batch learning system. This makes it capable of adapting rapidly to both changing data and autonomous systems, and of training on very large quantities of data. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>10.  What is out-of-core learning? </p><cite>My answer: Whenever the data set is too large to fit on a single machine.<br>Book's answer:  Out-of-core algorithms can handle vast quantities of data that cannot fit in a computer’s main memory. An out-of-core learning algorithm chops the data into mini-batches and uses online learning techniques to learn from these minibatches.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>11. What type of learning algorithm relies on a similarity measure to make predictions? </p><cite>My answer: Instance based learning (comparison of new vs old).<br>Book's answer:  An instance-based learning system learns the training data by heart; then, when given a new instance, it uses a similarity measure to find the most similar learned instances and uses them to make predictions.</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>12. What is the difference between a model parameter and a learning algorithm’s hyperparameter? </p><cite>My answer: A model parameter directly influences and influenced by the way the model behaves, while a hyperparameter is dictates how the model should behave (eg, learn fast or slow).<br>Book's answer: A model has one or more model parameters that determine what it will predict given a new instance (e.g., the slope of a linear model). A learning algorithm tries to find optimal values for these parameters such that the model generalizes well to new instances. A hyperparameter is a parameter of the learning algorithm itself, not of the model (e.g., the amount of regularization to apply). </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>13. What do model-based learning algorithms search for? What is the most common strategy they use to succeed? How do they make predictions? </p><cite>My answer: Relationships or trends within the data. Regression is used to find a possible solution to fit to the data and predictions are then extrapolated.<br>Book's answer:  Model-based learning algorithms search for an optimal value for the model parameters such that the model will generalize well to new instances. We usually train such systems by minimizing a cost function that measures how bad the system is at making predictions on the training data, plus a penalty for model complexity if the model is regularized. To make predictions, we feed the new instance’s features into the model’s prediction function, using the parameter values found by the learning algorithm. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>14.  Can you name four of the main challenges in Machine Learning? </p><cite>My answer: Quality, quantity, irrelevant sections and incorrectly modeled.<br>Book's answer:  Some of the main challenges in Machine Learning are the lack of data, poor data quality, nonrepresentative data, uninformative features, excessively simple models that underfit the training data, and excessively complex models that overfit the data </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>15. If your model performs great on the training data but generalizes poorly to new instances, what is happening? Can you name three possible solutions?</p><cite>My answer: Overfitted or underfitted to the data. Simplify the model, get more useful data and/or reduce noise.<br>Book's answer:  If a model performs great on the training data but generalizes poorly to new instances, the model is likely overfitting the training data (or we got extremely lucky on the training data). Possible solutions to overfitting are getting more data, simplifying the model (selecting a simpler algorithm, reducing the number of parameters or features used, or regularizing the model), or reducing the noise in the training data. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>16.  What is a test set and why would you want to use it? </p><cite>My answer: A test set is used to understand how your model interacts with unseen data without having to collect new information.<br>Book's answer:  A test set is used to estimate the generalization error that a model will make on new instances, before the model is launched in production. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>17. What is the purpose of a validation set? </p><cite>My answer: To understand how accurate the system interfaces with unseen data.<br>Book's answer:  A validation set is used to compare models. It makes it possible to select the best model and tune the hyperparameters. </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>18. What can go wrong if you tune hyperparameters using the test set? </p><cite>My answer: The system has been specifically setup to perform under these conditions and may perform unexpectedly in new situations.<br>Book's answer:  If you tune hyperparameters using the test set, you risk overfitting the test set, and the generalization error you measure will be optimistic (you may launch a model that performs worse than you expect). </cite></blockquote>
<!-- /wp:quote -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>19. What is cross-validation and why would you prefer it to a validation set? </p><cite>My answer: By dividing the training set further into categories, then trained and validated against combinations of other categories.<br>Book's answer:  Cross-validation is a technique that makes it possible to compare models (for model selection and hyperparameter tuning) without the need for a separate vali‐ dation set. This saves precious training data.</cite></blockquote>
<!-- /wp:quote -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date><![CDATA[2019-06-14 06:30:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-13 20:30:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hands-on-machine-learning-chapter-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Hands On Machine Learning Chapter 1

Chapter 1 is around defining when and where to apply machine learning to a problem, as it is not always the best approach to solving a problem. 

#machinelearning #ai #programming #ML #oreilly #python #code]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Python and Data Security (Hashing Algorithms)</title>
		<link>https://jmckew.com/2019/06/21/python-and-data-security-hashing-algorithms/</link>
		<pubDate>Thu, 20 Jun 2019 20:30:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=336</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Data security is becoming more and more prevalent in today's society than ever before. We must make a conscious effort to secure both our physical lives, but also our digital lives as well. With data privacy, sharing of information and access control becoming integrated into most people's life in some way or another. Since this topic is so wide and deep, this will most likely become a series of posts as I am passionate around data security and enjoy getting stuck right into the math behind it. This post will be around hashing algorithms but future topics will include:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Hashing Algorithms (this post),</li><li>Modular Arithmetic and why it's used,</li><li>Securely sharing keys,</li><li>Methods of encryption,</li><li>Methods of data security,</li><li>Analysing security weaknesses,</li><li>Many more.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>As above, this post is dedicated to hashing algorithms and how to interface with them with Python for data security. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What is a Hashing Algorithm?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The sole purpose of a hashing algorithm is to generate a safe hash which in turn raises the questions of what is a hash and what makes it safe?</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>A hash is a value computed from a base input number using a hashing function.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>With a hashing function being:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p> A <strong>hash function</strong> is any <a href="https://en.wikipedia.org/wiki/Function_(mathematics)">function</a> that can be used to map <a href="https://en.wikipedia.org/wiki/Data_(computing)">data</a> of arbitrary size onto data of a fixed size. </p><cite>https://en.wikipedia.org/wiki/Hash_function</cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>The hashing algorithm is intrinsically designed to be a one-way function, meaning it is impractical to revert. Although, as history has shown, as computing advances are made hashing algorithms are becoming compromised. A prime example of this being the MD5 algorithm, which was designed and used a cryptographic hash function (data security), but is now so simply reverse, that it is used for verifying data transfers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are certain characteristics around what the perfect or ideal hash function for data security should possess:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Easy/speed of computation,</li><li>Impossible/impractical to regenerate source data/message (brute force as only option),</li><li>Unique hashes for data (also known as hash collisions when there are duplicate hashes),</li><li>Any change is source data should change the hash value (known as the avalanche effect).</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>What is hashing used for in practice?</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hashing algorithms for data security in the real world is used in a variety of situations from ensuring files were successfully delivered correctly or to store sensitive/private information. If you are reading this, I can almost guarantee that you have some interface with a hashing algorithm right now! Whether it be how you're password is stored to indexing data in a database.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Using hashes with Python</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This will be a simple use-case of a hashing algorithm using Python to securely convert passwords and how to verify against them (storing the hashed data is it's own beast in itself). Please note I will be utilising the <a href="https://passlib.readthedocs.io/en/stable/">passlib</a> package which contains over 30 password hashing algorithms, as well as a framework for managing existing password hashes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First of all we must select a hashing algorithm to use, to help with this from the team at passlib they have provided a <a href="https://passlib.readthedocs.io/en/stable/narr/quickstart.html">basic guideline of questions</a>:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Does the hash need to be natively supported by your operating system’s <code>crypt()</code> api,
in order to allow inter-operation with third-party applications on the host?
<ul><li>If yes, the right choice is either <a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.bcrypt.html#passlib.hash.bcrypt"><code>bcrypt</code></a> for BSD variants,
or <a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.sha512_crypt.html#passlib.hash.sha512_crypt"><code>sha512_crypt</code></a> for Linux; since these are natively supported.</li><li>If no, continue...</li></ul>
</li><li>Does your hosting provider allow you to install C extensions?
<ul><li>If no, you probably want to use <a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.pbkdf2_digest.html#passlib.hash.pbkdf2_sha256"><code>pbkdf2_sha256</code></a>,
as this currently has the fastest pure-python backend.</li><li>If they allow C extensions, continue...</li></ul>
</li><li>Do you want to use the latest &amp; greatest, and don’t mind increased memory usage
when hashing?
<ul><li><a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.argon2.html#passlib.hash.argon2"><code>argon2</code></a> is a next-generation hashing algorithm,
attempting to become the new standard.  It’s design has been being slightly tweaked
since 2013, but will quite likely become <em>the</em> standard in the next few years.
You’ll need to install the <a href="https://pypi.python.org/pypi/argon2_cffi">argon2_cffi</a>
support library.</li><li>If you want something secure, but more battle tested, continue...</li></ul>
</li><li>The top choices left are <a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.bcrypt.html#passlib.hash.bcrypt"><code>bcrypt</code></a> and <a href="https://passlib.readthedocs.io/en/stable/lib/passlib.hash.pbkdf2_digest.html#passlib.hash.pbkdf2_sha256"><code>pbkdf2_sha256</code></a>.
Both have advantages, and their respective rough edges;
though currently the balance is in favor of bcrypt
(pbkdf2 can be cracked somewhat more efficiently).
<ul><li>If choosing bcrypt, we strongly recommend installing the <a href="https://pypi.python.org/pypi/bcrypt">bcrypt</a>
support library on non-BSD operating systems.</li><li>If choosing pbkdf2, especially on python2 &lt; 2.7.8 and python 3 &lt; 3.4,
you will probably want to install <a href="https://pypi.python.org/pypi/fastpbkdf2">fastpbk2</a>
support library.</li></ul>
</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>From this, we will use the argon2 hashing algorithm. As normal, it is best practice to set up a virtual environment (or conda environment) and install the dependencies, in this case passlib.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First of all, import the hashing algorithm you wish to use from the passlib package:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">from passlib.hash import argon2</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Following importing the hashing algorithm, to hash the password in our case is very simple and we can have a peak at what the output hash looks like:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">hash = argon2.hash("super_secret_password")

print(hash)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>$argon2i$v=19$m=102400,t=2,p=8$NqY05lyrtdb6v/ee03pvrQ$mvLTquN71JPjuC+S9QNXYA</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>The first section ("$argon2i$v=19$m=102400,t=2,p=8$") is the header information, showing the parameters that the algorithm used to generate the hash. While this seems as if it would make the algorithm easier to break, imagine a scenario where every password is hashed using an hashing algorithm with randomised parameters; verifying passwords would be a nightmare. Let's further break down what this represents:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>$argon2i - the variant of Argon2 algorithm being used,</li><li>$v=19 - the version of Argon2 being used,</li><li>$m=102400,t=2,p=8 - the memory (m), iterations (t) and parallelism (p) parameters being used,</li><li>$NqY05lyrtdb6v/ee03pvrQ - the base64-encoded salt (added randomness), using standard base64 encoding and no padding,</li><li>$mvLTquN71JPjuC+S9QNXYA - the base64-encoded hashed password (derived key), using standard base64 encoding and no padding.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>If we run this again, we can check that the outputs are completely different due to the randomly generated salt.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">hash = argon2.hash("super_secret_password")

print(hash)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>$argon2i$v=19$m=102400,t=2,p=8$8f4/x7hXitGacy6F8N67dw$/jPKQ98vLQCxkboxRlHa/g</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Now that we've generated our new passwords, stored them away in a secure database somewhere, using a secure method of communication somehow, our user wants to login with the password they signed up with ("super_secret_password") and we have to check if this is the correct password.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To do this with passlib, it is as simply as calling the .verify function with the plaintext and the equivalent hash which will return a boolean value determining whether of not the password is correct or not.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">print(argon2.verify("super_secret_password",hash))</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>True</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Hooray! Our password verification system works, now we would like to check that if the user inputs a incorrect password that our algorithm returns correctly (false).</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">print(argon2.verify("user_name",hash))</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>False</p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hopefully this has given you some insight into what hashing algorithms are, how they are used and how to use them with Python. They can both be an extremely powerful tool for securing data, however, must always be revisited later on down the track as advancements are made and your system may now be compromised.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date><![CDATA[2019-06-21 06:30:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-20 20:30:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-and-data-security-hashing-algorithms]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Python and Data Security (Hashing Algorithms)

Data security is becoming more and more prevalent in today's society than ever before. We must make a conscious effort to secure both our physical lives, but also our digital lives as well.

#python #security]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Python and OCR</title>
		<link>https://jmckew.com/2019/06/28/python-and-ocr/</link>
		<pubDate>Thu, 27 Jun 2019 20:30:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=342</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This post will demonstrate how to extract the text out of a photo, whether it being handwritten, typed or just a photo of text in the world using Python and OCR (Optical Character Recognition). While this is something that humans do particularly well at distinguishing letters, it is a form of semi-structured data. OCR just like humans also has it's limitations, for example, if you were trying to read someone with really difficult handwriting, it could be a big challenge. In this post, we will use the <a href="https://opensource.google.com/projects/tesseract">Tesseract </a>engine (an open source Google project) to undertake the OCR process for us.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First of all, as always, we must create a new virtual environment for our project to live in or use a package manager such as Anaconda (as explained in my post <a href="https://jmckew.com/2019/01/11/episode-8-anaconda/">Episode - 8: Anaconda</a>. Once initialized, we want to install a few packages to help us on our quest for OCR. Both <a href="https://pillow.readthedocs.io/en/stable/">Pillow </a>and <a href="https://pypi.org/project/pytesseract/">PyTesseract</a>, if you are using Anaconda like I did, you will want to specifically use pip, not conda, to install these packages. Further to this, you will need to install the binary of the Tesseract-OCR engine, which installation instructions can be found: <a href="https://github.com/UB-Mannheim/tesseract/wiki">https://github.com/UB-Mannheim/tesseract/wiki</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we are finally ready to test the engine and see if we can extract text out of an image, first of all we will start with a 'well' written example, the 'logo' of this website!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":343,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/06/example.png" alt="" class="wp-image-343"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Of course, we have still yet to write any code, so naturally, that is the next step. As always in a python project, you will need to import all the dependencies of the project, in this case, it will be Image from the PIL (pillow) package, and pytesseract (the python wrapper around the Tesseract Engine).</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">from PIL import Image
import pytesseract</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that we have our dependencies loaded, it's time to check out the documentation behind Pillow and pytesseract to know how to operate the tools, consider these an instruction manual. The documentation for these tools can be found:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://pillow.readthedocs.io/en/stable/">Pillow</a>,</li><li><a href="https://pytesseract.readthedocs.io/">PyTesseract</a>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Luckily for us, the developers have made this so simple it could be a one liner:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">print(pytesseract.image_to_string(Image.open('images/example.png')))</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which outputs in the console from the example image above:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>JACK MCKEW'S<br> BLOG<br> Python enthusiast, electrical engineer and<br> tinkerer</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Great! We can confirm that the text that the tesseract engine detected, is in fact, exactly what the example we gave it was.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, let's go a bit out of the way to make this a function such that it can be called more easily with the filepath to the image as a string.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">from PIL import Image
import pytesseract

def ocr_convert_to_text(filename):
    text = pytesseract.image_to_string(Image.open(filename))
    return text

extracted_text = ocr_convert_to_text('images/example.png')

print(extracted_text)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now we have a function that we can call with a file path to easily convert our images to text. Now let's give the tesseract engine a bit of challenge with a full page of handwritten text:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":345,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i2.wp.com/jmckew.com/wp-content/uploads/2019/06/example_2.jpg?fit=640%2C887&amp;ssl=1" alt="" class="wp-image-345"/><figcaption><a href="https://graphicdesign.stackexchange.com/questions/96496/imitate-handwritten-text">Source</a></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Ad Bb Cc Da Fe FEF Ge Hh Ii IS RR lt Hm We<br> 00 PP Ag Rr SsT# Uu Vv Ww Xx 44 Le<br> Aa BS (36 72 Re bebe nme #% Ua ti ke<br> At Au Hee Bo In Fn Le Sim $y Rep Ha Wy<br> Ye Unu Uppy bb otn tx 79 Ww 2A<br> Sr be Liki 4<br> IR AS67890<br> so cool! New |neerndtinas release of mast<br> famous APP for exhorting Printed text 40<br> handwritten "Sinyak<br> PacK mY box with. five dozen uguor Jugs<br> Don't 62 @. Earn $ &amp; Put 12 Jar.<br> Ingredienes: Zuss, Chis, CAR Lid.<br> (Sécrez info), kndw tb. 3<br> Wo xr dA h-(H4+F 060 Cheah]<br> ChiP &amp; Dae." fava ys ie m4 mind.<br> Jackdaws uve m4 bi? sPhinx Of quare 2.<br> The five boxing withrds JumP quick.<br> How vexiegi quick date 2ebras sump!<br> {0.0} ainsa &amp; crepim pa. bau! -)</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Using the same code, we were able to determine most of the text out of the picture that the tesseract engine was given. Obviously this is not perfect, but it is a whole lot easier than typing it all in by hand.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For a bit of another challenge and to demonstrate the capabilities, let's try some Australian number plates:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":347,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/06/example_3.jpg" alt="" class="wp-image-347"/><figcaption><a href="http://www.worldlicenseplates.com/world/AU_WAXX.html">Source</a></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>(CSE) XcB-962 (66M-059<br> X2ZH:709) EEH:133) (GAA729)</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Obviously this can and has had a big impact on the way people can utilize images to make their life easier, from scanning in your handwritten notes at school and converting straight on to the computer, to being able to add all the contact information in your phone from a business card. How can OCR help your life at work or at home? Please let me know in the comments..</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date><![CDATA[2019-06-28 06:30:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-27 20:30:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-and-ocr]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Python and OCR

This post will demonstrate how to extract the text out of a photo, whether it being handwritten, typed or just a photo of text in the world using Python and OCR (Optical Character Recognition).

#python #codefridays #ocr #data ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Hands On Machine Learning Chapter 2</title>
		<link>https://jmckew.com/2019/07/12/hands-on-machine-learning-chapter-2/</link>
		<pubDate>Thu, 11 Jul 2019 20:30:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=363</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Chapter 2 is an end to end machine learning project, in which you pretend to be a recently hired data scientist for a real estate company. It cannot be emphasized enough that when learning about machine learning or any topic for that matter, it is best to actually experiment with real-world data and scenarios.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Firstly my personal opinion on how a machine learning (or data science) project is structured is a series of steps:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Get an understanding of the expected goal or outcome (eg frame the problem),</li><li>Get an understanding of the current process (if there is one),</li><li>Get the data behind the problem (or what you expect will be useful for solving the problem),</li><li>Explore and visualize the data to gain insights,</li><li>Prepare/massage the data ready for input into algorithms or models,</li><li>Select a model/algorithm and train it,</li><li>Tune your model/algorithm to the best you can,</li><li>Present the solution to the original stakeholder (take the stakeholder on a journey),</li><li>Launch, monitor and maintain your system.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>I believe, that if you follow these steps at a minimum, you will find success with your data science/machine learning projects. This methodology also applies for any type of project and can be enhanced with tweaks where you see fit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anyway, back to Chapter 2, it is very much so reinforced that you should select an appropriate way of scoring performance of your algorithms/models (otherwise you can't compare them effectively). For regression tasks, generally the preferred performance measure is RMSE (Root Mean Square Error), but this may not always be the case depending on the context of the problem. For example, if the data set has many outliers (or outlier groups), it may prove beneficial to consider MAE (Mean Absolute Error).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Assumptions are in my opinion, the downfall of any collaborative project if they are not transparent or communicated. A practice that I personally do and recommend doing is to try your best to document every assumption you may make in a project, such that anyone later on can pick up where you were and understand why you chose to do something a certain way.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As per Chapter 1, it is again reinforced to split your data set up into a training set, a testing set and a validation set; albeit a more practical example of this concept in action. Whereas you use the K-fold validations with GridSearchCV to understand the best performing hyper parameters for your algorithm/model.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Personally, in Chapter 2, the most difficult part to understand is around the pipeline for preparing data ready for use in algorithms/models. Pipelines are essentially a sequence of steps that need to be completed in order before the data is ready. Stemming from the <a href="https://arxiv.org/pdf/1309.0238v1.pdf">Scikit-learn</a> design principles, I found this the best way to understand the possible steps in a data preparation pipeline:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Estimators<ul><li>Any object that estimates parameters based on a data set is known as an Estimator. For example, if you had a data set with lots of missing values, you could estimate what to fill these gaps with an imputer, then you could choose to use the median of the dataset if appropriate.</li></ul></li><li>Transformers<ul><li>Any object that transformers a data set is known as a Transformer. For example, if you wanted to now fill those gaps in the data set previously mentioned with the mean, you would use a transformer to 'insert' the median wherever empty values were found.</li></ul></li><li>Predictors<ul><li>Any object that is capable of making predictions given a dataset is known as a Predictor. For example, a linear regression model is a predictor, using one feature to extrapolate another feature.</li></ul></li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date><![CDATA[2019-07-12 06:30:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-11 20:30:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hands-on-machine-learning-chapter-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Hands On Machine Learning Chapter 2

Chapter 2 is an end to end machine learning project and it cannot be emphasized enough that when learning about machine learning or any topic for that matter, it is best to actually experiment with real-world data.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>PyCon AU 2019 Saturday In Summary</title>
		<link>https://jmckew.com/2019/08/06/pycon-au-2019-saturday-in-summary/</link>
		<pubDate>Mon, 05 Aug 2019 20:30:04 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=371</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>My first ever conference, learning things I'd never even think of, meeting lots of new people and making my to-do list full of new things to learn. All this happened over the weekend at <a href="https://2019.pycon-au.org/">PyConAU 2019</a>. This post is dedicated to all the fantastic people I met that gave me new perspectives on python programming and all the amazing talks I had the pleasure of attending.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Please note that all the talks written about here were only the ones I was able to attend, there were many other amazing talks that I didn't get the opportunity to go to (will list the follow up ones later in the post) and would recommend to go through the youtube playlist of all the talks found here: <a href="https://www.youtube.com/user/PyConAU">https://www.youtube.com/user/PyConAU</a>. A link to all the talks and descriptions can also be found in the headings.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To make this post more digestible for the reader (you!), I have broken into parts which are linked here:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Day 1 - How to communicate with businesses, metaclasses in python, making generative art, python applications in engineering, refactoring a large scale OSS project and the antipodean approach;</li><li>Day 1 - Lightning talks;</li><li>All the great ideas people gave me;</li><li>My further to-do list following day 1.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Day 1</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4><a href="https://2019.pycon-au.org/talks/aurynn">Creating Lasting Change</a> <a href="https://twitter.com/aurynn">@aurynn</a></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Day 1 kicked off with a keynote talk from <a href="https://github.com/aurynn">aurynn</a>, who spoke about the lessons learned from talking to your boss. My personal key takeaways were:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>One word slides directs your focus to the talk rather than distracting,</li><li>Communicating with people outside your discipline, interest area, etc is made much easier if you put whatever the topic is from their perspective, particularly in the workplace, putting things in terms of risk as this is what matters to businesses.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4> <a rel="noreferrer noopener" target="_blank" href="https://2019.pycon-au.org/talks/its-pythons-all-the-way-down-python-types-metaclasses-made-simple">It's Pythons All The Way Down: Python Types &amp; Metaclasses Made Simple</a> <a href="https://twitter.com/judy2k">@judy2k</a></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now classes are admittedly one of my weak points, so what better to do then go straight to metaclasses! My personal key takeaways were:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>If you run dir() on a type, it'll tell you all the capabilities of that type (eg, dir(int) returns [...,'__add__',...]);</li><li>Complex numbers and functions have their own type in python;</li><li>Descriptors override attribute access;</li><li>There are two types of descriptors (data and non-data) where data descriptors are mutators;</li><li>Metaclasses can be used as blueprints for generating classes;</li><li>You can ensure classes are made appropriately with metaclasses.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4><a rel="noreferrer noopener" target="_blank" href="https://2019.pycon-au.org/talks/pretty-vector-graphics--playing-with-svg-in-python">Pretty vector graphics - Playing with SVG in Python</a>  Amanda J Hogan </h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>By feeding strings of text (which are instructions), you can generate graphics with SVG, mix this with loops and you get generative art! Art being generally a very visual process, watch the video to get a better understanding, personally I liked this one:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":372,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i1.wp.com/jmckew.com/wp-content/uploads/2019/08/image.png?fit=640%2C281&amp;ssl=1" alt="" class="wp-image-372"/></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":4} -->
<h4><a rel="noreferrer noopener" target="_blank" href="https://2019.pycon-au.org/talks/python-applications-in-infrastructure-planning-and-civil-engineering">Python Applications in Infrastructure Planning and Civil Engineering</a> <a href="https://au.linkedin.com/in/ben-chu-2643aa131">Ben Chu</a></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As someone that works for a large engineering firm, this talk resonated with the possibilities of using python to automate jobs and get better results. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Firstly, Ben spoke about using Jupyter notebooks to make interactive reports for the environmental teams to utilise for their analysis and using papermill to export these into different formats (excel, pdf, etc).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ben also used python to automate the verification stages of a proposed rail corridor location. By using <a href="https://2.python-requests.org/en/master/">requests </a>&amp; <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">beautiful soup</a> to scrape the NSW development application website along with a machine learning classification algorithm (<a href="https://xgboost.readthedocs.io/en/latest/">XGBoost</a>) for the developments impact on the rail corridor. Finally plotting this on an interactive map for the rail designers to use.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><a rel="noreferrer noopener" target="_blank" href="https://2019.pycon-au.org/talks/how-i-migrated-a-huge-oss-project-to-use-pytest">How I auto-refactored a huge OSS project to use pytest</a> <a href="https://twitter.com/craigds2">@craigds2</a></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Craig gave a great talk about how he used PyBowler, Pytest and importantly pytest-sugar to automatically refactor existing testing framework for a huge open source project <a href="https://gdal.org/">GDAL</a>. This post has inspired me to do more testing &amp; refactoring on my code as I develop things!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4><strong><a href="https://2019.pycon-au.org/talks/brandon">The Antipodes</a></strong> <a href="https://twitter.com/brandon_rhodes">@brandon_rhodes</a></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Personally this talk really resonated with a habit that I have been trying to employ in my life recently. The basic principle being behind the meaning of the idea of <a href="https://en.wiktionary.org/wiki/antipodean"><a href="https://en.wiktionary.org/wiki/antipodean">antipodean</a>s</a>, someone standing on the exact other side of the planet from you. I thought this was an amazing segway for moving to a new framework for structuring communications.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As most of us do, whenever replying to communication from someone, we normally start with me, me, me, me, you. For example, if someone asked us to make a decision, typically &amp; personally, I would start the reply with stating why I had got to the decision, finally ending the message with the decision and the next steps.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A technique that I have recently started employing on my messaging is writing as I normally would and before hitting send, moving what matters most to the reader (the decision) to the top, followed by next steps and then going through all the reasons why I possibly had made that decision.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong><a href="https://2019.pycon-au.org/talks/saturday-lightning-talks">Saturday Lightning Talks</a></strong></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Personally, I thought the most interesting lightning talk was about procedurally generating planets, modelling them in 3D and then trying to estimate if the climate on them <a href="https://youtu.be/AJqcxEzRdSY?t=140">https://youtu.be/AJqcxEzRdSY?t=140</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What I think was the crowd favourite, was the <a href="https://youtu.be/AJqcxEzRdSY?t=1097">History and Politics of Australian supermarkets and their mergers</a>. Definitely worth the watch.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>All the great ideas people gave me!</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Shoutout to <a href="https://twitter.com/davidjb_">@davidjb_</a> who made me aware of modern static html sites with using <a href="https://docs.getpelican.com/en/stable/">Pelican</a> and <a href="https://www.netlify.com/">Netlify</a>. By using a repository to store all the content, you can use these tools in combination to make an automated workflow for a CMS (Content management system) for deploying a website. Will definitely be looking into this for this very website!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Shoutout to a guy (who doesn't have socials) that I met a pub that made me aware of <a href="https://singularity.lbl.gov/">Singularity</a>, an alternative to docker, will have to do further research and testing on this one, so watch this space!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Further to this, I was also made aware of the <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">Gitflow Workflow</a>, as using Git is admittedly one of my other weakpoints, so will definitely be trying to bring this principle into my development pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>My to-do list after Pycon Day 1</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li>Write this blog post!</li><li>Look into <a href="https://tilemill-project.github.io/tilemill/">tilemill</a>,</li><li>Understand <a href="https://medium.com/@meghamohan/mutable-and-immutable-side-of-python-c2145cf72747">mutable and immutable</a> better,</li><li>Learn what <a href="https://realpython.com/python-super/">super does in Python</a>,</li><li>Try make some generative art,</li><li>Looking into <a href="https://papermill.readthedocs.io/en/latest/">papermill</a> + <a href="https://jupyterlab.readthedocs.io/en/stable/">jupyterlab</a>,</li><li>Have a go at using <a href="https://xgboost.readthedocs.io/en/latest/">XGBoost</a> and text,</li><li>Get (much) better at testing with <a href="https://docs.pytest.org/en/latest/">pytest</a>,</li><li>Look into structuring python projects better,</li><li>Move this website to static html with <a href="https://www.netlify.com/">netlify</a> and more,</li><li>Look into <a href="https://singularity.lbl.gov/">singularity</a>,</li><li>Look into <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">GitFlow Workflow</a>.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>371</wp:post_id>
		<wp:post_date><![CDATA[2019-08-06 06:30:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-05 20:30:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pycon-au-2019-saturday-in-summary]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="pyconau"><![CDATA[pyconau]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[PyCon AU 2019 Saturday In Summary

My first ever conference, learning things I'd never even think of, meeting lots of new people and making my to-do list full of new things to learn. All this happened over the weekend at PyConAU 2019.

#pyconau #python]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>PyCon AU 2019 Sunday In Summary</title>
		<link>https://jmckew.com/2019/08/07/pycon-au-2019-sunday-in-summary/</link>
		<pubDate>Tue, 06 Aug 2019 20:30:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=376</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This is a follow on from my last post <a href="https://jmckew.com/2019/08/06/pycon-au-2019-saturday-in-summary/">PyCon AU 2019 Saturday In Summary</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><a href="https://2019.pycon-au.org/schedule/sunday/">Day 2</a></h2>
<!-- /wp:heading -->

<!-- wp:heading {"level":3} -->
<h3><a rel="noreferrer noopener" target="_blank" href="https://2019.pycon-au.org/talks/vicky">The real costs of Open Source Sustainability</a>  <a href="https://twitter.com/vmbrasseur">@vmbrasseur</a></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The key takeaway that I got from this talk, was the typical reaction for problems which are far away from yourself or out of your control is to donate money. Vicky spoke about how sometimes money is not the solution to problems, specifically, for open source projects. Ways you can contribute can be summed up using the term Time, Talent, Treasure.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Time: you can donate your time to help a cause,</li><li>Talent: you can donate your skills and talents,</li><li>Treasure: you can donate your treasures.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3><a rel="noreferrer noopener" target="_blank" href="https://2019.pycon-au.org/talks/shipping-your-first-python-package-and-automating-future-publishing">Shipping your first Python package and automating future publishing</a> <a href="https://twitter.com/chriswilcox47">@chriswilcox47</a></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Packaging has always been a bit of enigma to me, and Chris Wilcox did an excellent job at explaining not only the structure behind a package, but also how to ship a package. One thing that I have noticed to make sure is to ensure your project structure is in place, and <a href="https://cookiecutter.readthedocs.io/en/latest/">cookie cutter</a> helps with this.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://tox.readthedocs.io/en/latest/">Tox</a> &amp; <a href="https://nox.thea.codes/en/stable/">Nox</a> can be used to automate testing of your package over multiple versions and distributions of Python, so you can reassure your users that the package will work no matter the environment.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><a rel="noreferrer noopener" target="_blank" href="https://2019.pycon-au.org/talks/its-dark-and-my-lights-arent-working-an-asyncio-success-story">It's dark and my lights aren't working (an asyncio success story)</a> <a href="https://twitter.com/jim_mussared">@jim_mussared</a></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This was one of the talks that really resonated with my previous experience in my thesis project working with the ESP8266. Jim gave a very funny and relatable talk on the experience of using Zigbee communications to link the lights in a new home.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><a rel="noreferrer noopener" target="_blank" href="https://2019.pycon-au.org/talks/the-universe-as-balls-and-springs-molecular-dynamics-in-python">The universe as balls and springs: molecular dynamics in Python</a> <a href="https://twitter.com/Lilyminium">@lilyminium</a></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Jupyter notebooks can not only be used for developing, but also as presentations. Lily gave an in-depth talk about the analysis of molecular dynamics, presenting from a jupyter notebook which showed off the power of interactive visualizations making a very complex topic, simple and easy to understand.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><a rel="noreferrer noopener" target="_blank" href="https://2019.pycon-au.org/talks/git-hooked-on-images-up-your-documentation-game">"Git hook[ed]” on images &amp; up your documentation game</a> <a href="https://twitter.com/veronica_hanus">@veronica_hanus</a></h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As another person that appreciates visual cues to what changes were made in the past, I can definitely see why using <a href="https://pypi.org/project/pyppeteer/">Pyppeteer</a> to hook a screenshot onto a git commit can make a massive difference on going back to the commit history and be able to see exactly what changes were made.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2><a href="https://2019.pycon-au.org/talks/sunday-lightning-talks">Sunday Lightning Talks</a></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Personally, I really appreciated the talk on <a href="https://www.growstuff.org/">https://www.growstuff.org/</a>, a self proclaimed 'Tinder for Potatos'. Where users can put their plants they are growing &amp; get a progress bar! Then they can interact with other growers, so possibly exchange and grow both the community and the plants. <a href="https://youtu.be/q2VmIUaOS9o?t=9">https://youtu.be/q2VmIUaOS9o?t=9</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A few of the lightning talks really demonstrated how welcoming the Python &amp; software community is. From <a href="https://youtu.be/q2VmIUaOS9o?t=1385">Fashion at PyConAU 2019</a> showing how people can be their true self around a welcoming community to learning what it is like to be <a href="https://youtu.be/q2VmIUaOS9o?t=829">Jewish at a conference</a>. To quote <a href="https://twitter.com/UrcherAus">@UrcherAus ,</a>"And can come out, presenting as female in public for the very first time, and we say to you, ‘welcome to <a href="https://twitter.com/hashtag/pyconau?src=hashtag_click">#pyconau</a>, I love your outfit’".</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>All the great ideas people gave me!</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Learning that Google has a monolithic "Monorepo", where they store all of their projects in one repository to alleviate the problems of maintaining multiple repositories for varying projects that all depend on each other.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finding out that Blender has native support for Python scripting, and produces amazing renders. Very much so looking forward to finding some time to try out Blender and see if I can integrate Python and Blender. Watch this space for a future post on this topic!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>My to-do list after Pycon Day 2</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><s>Write this blog post!</s> (Day 1),</li><li>Look into <a href="https://tilemill-project.github.io/tilemill/">tilemill</a> (Day 1), </li><li><s>Understand </s><a href="https://medium.com/@meghamohan/mutable-and-immutable-side-of-python-c2145cf72747"><s>mutable and immutable</s></a><s> better (Day 1), </s></li><li><s>Learn what </s><a href="https://realpython.com/python-super/"><s>super does in Python</s></a><s> (Day 1), </s></li><li>Try make some generative art (Day 1), </li><li>Looking into <a href="https://papermill.readthedocs.io/en/latest/">papermill</a> + <a href="https://jupyterlab.readthedocs.io/en/stable/">jupyterlab</a> (Day 1), </li><li>Have a go at using <a href="https://xgboost.readthedocs.io/en/latest/">XGBoost</a> and text (Day 1), </li><li>Get (much) better at testing with <a href="https://docs.pytest.org/en/latest/">pytest</a> (Day 1), </li><li><s>Look into structuring python projects better</s> (Day 1), </li><li>Move this website to static html with <a href="https://www.netlify.com/">netlify</a> and more (Day 1), </li><li><s>Look into </s><a href="https://singularity.lbl.gov/"><s>singularity</s></a><s> (Day 1), </s></li><li><s>Look into </s><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"><s>GitFlow Workflow</s></a><s> (Day 1), </s></li><li>Have a go at using <a href="https://www.blender.org/">Blender</a> (Day 2),</li><li>Try make and give a presentation with Jupyter (Day 2),</li><li>Try making a plot in <a href="https://plot.ly/">Plotly</a> (Day 2),</li><li>Look into <a href="https://mybinder.org/">Binder </a>for distributing code (Day 2),</li><li>Listen to <a href="https://pythonbytes.fm/">Python Bytes podcasts</a> (Day 2).</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Talks to catch up on</h3>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><li><a href="https://www.youtube.com/watch?v=99A9Fz6uHAA&amp;list=PLs4CJRBY5F1LKqauI3V4E_xflt6Gow611&amp;index=5">"Extracting tabular data from PDFs with Camelot &amp; Excalibur" - Vinayak Mehta</a>,</li><li><a href="https://www.youtube.com/watch?v=O1gvNeJlIs0&amp;list=PLs4CJRBY5F1LKqauI3V4E_xflt6Gow611&amp;index=7">"Using Dash by Plotly for Interactive Visualisation of Crime Data" - Leo Broska</a>,</li><li><a href="https://www.youtube.com/watch?v=l0Sazyzs1IY&amp;list=PLs4CJRBY5F1LKqauI3V4E_xflt6Gow611&amp;index=16">"Using Python, Flask and Docker To Teach Web Pentesting" - Zain Afzal, Carey Li</a>,</li><li><a href="https://www.youtube.com/watch?v=lV7rtDW94do&amp;list=PLs4CJRBY5F1LKqauI3V4E_xflt6Gow611&amp;index=21">"cuDF: RAPIDS GPU-Accelerated Dataframe Library" - Mark Harris</a>,</li><li><a href="https://www.youtube.com/watch?v=3oAgsQji6m4&amp;list=PLs4CJRBY5F1LKqauI3V4E_xflt6Gow611&amp;index=28">"3D Rendering with Python" - Andrew Williams</a>,</li><li><a href="https://www.youtube.com/watch?v=ZhvlfNi-0aY&amp;list=PLs4CJRBY5F1LKqauI3V4E_xflt6Gow611&amp;index=32">Machine Learning and Cyber Security - Detecting malicious URLs in the haystack</a>,</li><li><a href="https://www.youtube.com/watch?v=aeZOVaULoNI&amp;list=PLs4CJRBY5F1LKqauI3V4E_xflt6Gow611&amp;index=38">Tunnel Snakes Rule! Bringing the many worlds of Python together</a>,</li><li><a href="https://www.youtube.com/watch?v=HHrVBKZLolg&amp;list=PLs4CJRBY5F1LKqauI3V4E_xflt6Gow611&amp;index=40">"Goodbye Print Statements, Hello Debugger!" - Nina Zakharenko</a>,</li><li><a href="https://www.youtube.com/watch?v=lW5ZJcrjYLw&amp;list=PLs4CJRBY5F1LKqauI3V4E_xflt6Gow611&amp;index=59">"Insights into Social Media Data using Entropy Theory" - Mars Geldard</a>.</li></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>376</wp:post_id>
		<wp:post_date><![CDATA[2019-08-07 06:30:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-06 20:30:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pycon-au-2019-sunday-in-summary]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="python"><![CDATA[python]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[PyCon AU 2019 Sunday In Summary

This is a follow on from my last post PyCon AU 2019 Saturday In Summary. 

#pycon #python #pyconau

@vmbrasseur
@chriswilcox47
@jim_mussared
@lilyminium
@veronica_hanus
@UrcherAus]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Looking for Patterns in City Names &amp; Interactive Plotting</title>
		<link>https://jmckew.com/2019/08/16/looking-for-patterns-in-city-names-interactive-plotting/</link>
		<pubDate>Thu, 15 Aug 2019 20:30:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=383</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Recently, I was traveling around New Zealand, and noticed in the Maori language they use letters back to back a lot like in the original Maori name for Stratford ("whakaahurangi"). So as any normal person does, I thought, well what town has the most repeated letters, and the idea for this blog post was born. Before we get into the nitty gritty, here is the output of the analysis!</p>
<!-- /wp:paragraph -->

<!-- wp:block {"ref":387} /-->

<!-- wp:paragraph -->
<p>Firstly, we have to find a dataset of all the town names, and I found a database of all world cities names hosted on Kaggle here: <a rel="noreferrer noopener" href="https://www.kaggle.com/max-mind/world-cities-database" target="_blank">https://www.kaggle.com/max-mind/world-cities-database</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="Get-the-data!">Get the data!</h2>
<!-- /wp:heading -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code"># data source https://www.kaggle.com/max-mind/world-cities-database
cities_df = pd.read_csv('./data/worldcitiespop.csv', header=0, sep=',', quotechar='"')
cities_df = cities_df[cities_df['Country'] == "nz"]</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>After inspecting the data of this data set, we're able to filter out to look at just New Zealand with the prefix of "nz" in the Country column. It must be noted that this data set represents the names of the towns currently, and not the original Maori names (more on this will be covered in a later post). Now we want to extract the town names out of the dataframe with the ones we want to analyze. For ease later on, we will extract this as a dictionary, such that we can assign the value of each to the count of each letter. </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">nz_cities = cities_df[cities_df['Country'] == "nz"]['AccentCity'].tolist()
nz_dict = { i : 0 for i in nz_cities }</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now we will create an ordered dictionary with the help from the collections package which will store the values of the count for each letter in the town name.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
lcount = dict(OrderedDict([(l, 0) for l in letters]))</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now it's time for the data crunch. To count how many times a letter repeats in a town name we follow these steps:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>we create a for loop, to loop through all the city names in the table,</li><li>initialise an ordered dictionary similar to above for each city in the value field of that town's dictionary entry</li><li>loop through each letter in the town name</li><li>check if the letter appears in our letter dictionary (mainly to not count spaces),</li><li>Then if the letter does appear, increment the value for that letter by 1.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>This results in a dictionary for each town name, with the count of repeated letters.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">for city in nz_cities:
    nz_dict[city] = dict(OrderedDict([(l, 0) for l in letters]))
    city_dict = nz_dict[city]
    for c in city:
        if c.upper() in letters:
            city_dict[c.upper()] += 1</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Hooray! Now we have all the data we need broken down and ready for analysis. To help ease the analysis and make it more readable for a human, we convert from our nested dictionaries to a pandas dataframe and transpose it such that we have the town name as the index, the letters as the column and the count of that letter as the values.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">total_df = pd.DataFrame.from_dict(nz_dict)
total_df = total_df.T</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now we want to find which of these names have the maximum count for any particular letter and store it in a summary dataframe. It is to be noted that we could use the pivot function with aggregate types, however, I have not figured a nice way to do this yet. If you do know a nicer way to determine this, please let me know.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">summary_df = pd.DataFrame()
scale = 1
summary_df['City_Name'] = total_df.idxmax()
summary_df['Count'] = total_df.loc[total_df.idxmax()].max()</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p> Now by using the equivalent of an index-match in excel which you can read more about here (<a rel="noreferrer noopener" href="https://towardsdatascience.com/name-your-favorite-excel-function-and-ill-teach-you-its-pandas-equivalent-7ee4400ada9f" target="_blank">https://towardsdatascience.com/name-your-favorite-excel-function-and-ill-teach-you-its-pandas-equivalent-7ee4400ada9f</a>). Admittedly, we could've made the join earlier, but since I use index-match so often in Excel, I wanted to learn how to do the same in pandas. This is achieved by using the map function (which is the equivalent of the index), but by using the index of another dataframe as the argument (the match function), we can rejoin the data set by matching the city name from our original data set. </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">summary_df['Latitude'] = summary_df['City_Name'].map(cities_df.set_index(['AccentCity'])['Latitude'].to_dict()) * scale
summary_df['Longitude'] = summary_df['City_Name'].map(cities_df.set_index(['AccentCity'])['Longitude'].to_dict()) * scale</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now we have a dataframe that contains:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>an index of the letters,</li><li>the town name with the most repeated letters,</li><li>the count of the letters within the name,</li><li>the longitude and latitude of the town</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For plotting with <a href="https://bokeh.pydata.org/en/latest/">Bokeh </a>on a basemap, we need to convert from longitude &amp; latitude to easting and northing. To do this we use the pyproj package to make this very simple.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">def LongLat_to_EN(long, lat):
    try:
      easting, northing = transform(
        Proj(init='epsg:4326'), Proj(init='epsg:3857'), long, lat)
      return easting, northing
    except:
      return None, None</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p> This function can be used to generate the easting and northing for every town from it's longitude &amp; latitude and add it to the dataframe. </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">summary_df['E'], summary_df['N'] = zip(*summary_df.apply(lambda x: LongLat_to_EN(x['Longitude'], x['Latitude']), axis=1))</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Finally, it's time to plot our findings on a map. Before we initialise the map in <a href="https://bokeh.pydata.org/en/latest/">Bokeh</a>, for most plots, data tables and more in <a href="https://bokeh.pydata.org/en/latest/">Bokeh</a>, we need to put it in the <a href="https://bokeh.pydata.org/en/latest/docs/reference/models/sources.html">ColumnDataSource </a>form. We also initialise the interactivity when the user hovers over the data points on the plot.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">source = ColumnDataSource(data=dict(
                        longitude=list(summary_df['E']), 
                        latitude=list(summary_df['N']),
                        sizes=list(summary_df['Count']*3),
                        lettercount = list(summary_df['Count']),
                        city_name=list(summary_df['City_Name']),
                        letters = list(summary_df.index)))

hover = HoverTool(tooltips=[
    ("Repeated Letter" , "@letters"),
    ("City Name", "@city_name"),
    ("Count","@lettercount")
    
])
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Finally time for the plot! Now admittedly, I haven't found an easy way to find the limits of the graph, so this was made with a lot of trial and error (If you know a better way, please let me know!). </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">p = figure(x_range=(20000000,17900000), y_range=(-6000000,-4000000),x_axis_type="mercator", y_axis_type="mercator",tools=[hover, 'wheel_zoom','save'])
p.add_tile(CARTODBPOSITRON)
p.circle(x='longitude',
         y='latitude', 
         size='sizes',
         source=source,
         line_color="#FF0000", 
         fill_color="#FF0000",
         fill_alpha=0.05)</pre>
<!-- /wp:syntaxhighlighter/code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>383</wp:post_id>
		<wp:post_date><![CDATA[2019-08-16 06:30:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-15 20:30:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[looking-for-patterns-in-city-names-interactive-plotting]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Looking for Patterns in City Names & Interactive Plotting

In this post I go through my thought process in analyzing how many characters are repeated in New Zealand town names and how to make an interactive visualization of the data.

#python #nz #bokeh]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>NZ_Letter_Analysis</title>
		<link>https://jmckew.com/2019/08/15/untitled-reusable-block/</link>
		<pubDate>Thu, 15 Aug 2019 10:21:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/2019/08/15/untitled-reusable-block/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->




<!DOCTYPE html>
<html lang="en">
  
  <head>
    
      <meta charset="utf-8">
      <title>Bokeh Plot</title>
      
      
        
          
        
        
          
        <script type="text/javascript" src="https://cdn.pydata.org/bokeh/release/bokeh-1.3.1.min.js"></script>
        <script type="text/javascript">
            Bokeh.set_log_level("info");
        </script>
        
      
      
    
  </head>
  
  
  <body>
    
      
        
          
          
            
              <div class="bk-root" id="ab12bd75-b332-4cfb-9a21-9937fb408a9d" data-root-id="2021"></div>
            
          
        
      
      
        <script type="application/json" id="2407">
          {"6a02b173-1e10-4d4a-9732-e0a845a09ea3":{"roots":{"references":[{"attributes":{"below":[{"id":"2030","type":"MercatorAxis"}],"center":[{"id":"2038","type":"Grid"},{"id":"2047","type":"Grid"}],"left":[{"id":"2039","type":"MercatorAxis"}],"renderers":[{"id":"2054","type":"TileRenderer"},{"id":"2059","type":"GlyphRenderer"}],"title":{"id":"2116","type":"Title"},"toolbar":{"id":"2050","type":"Toolbar"},"x_range":{"id":"2022","type":"Range1d"},"x_scale":{"id":"2026","type":"LinearScale"},"y_range":{"id":"2024","type":"Range1d"},"y_scale":{"id":"2028","type":"LinearScale"}},"id":"2021","subtype":"Figure","type":"Plot"},{"attributes":{"text":""},"id":"2116","type":"Title"},{"attributes":{"data_source":{"id":"1685","type":"ColumnDataSource"},"glyph":{"id":"2057","type":"Circle"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"2058","type":"Circle"},"selection_glyph":null,"view":{"id":"2060","type":"CDSView"}},"id":"2059","type":"GlyphRenderer"},{"attributes":{"source":{"id":"1685","type":"ColumnDataSource"}},"id":"2060","type":"CDSView"},{"attributes":{"ticker":{"id":"2031","type":"MercatorTicker"}},"id":"2038","type":"Grid"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"size":{"field":"sizes","units":"screen"},"x":{"field":"longitude"},"y":{"field":"latitude"}},"id":"2058","type":"Circle"},{"attributes":{"callback":null,"data":{"city_name":["Kaingapai Hakataramea Station","Abbotsford","Christchurch","Edendale Town District","Earnscleugh Settlement","Flagstaff","Kyeburn Diggings","Christchurch","Kihikihi Town District","Clarks Junction","Kokakoriki","Bell Hill","Benmore Stream","Frankton Junction","Goodwood","Upper Papamoa","Quarry Hills","Sherry River","Simons Pass","Otautau Town District","Murumuru","Five Rivers","Kawakawa Town District","Bexley","Admiralty Bay","Fitzroy"],"latitude":[-5558767.960998884,-5761672.922065697,-5393506.130539223,-5831241.362079489,-5655696.009663975,-5753680.824788744,-5621521.486192067,-5393506.130539223,-4584135.718572788,-5737718.1425425,-4726447.364137138,-5243726.168310261,-5519766.216040407,-4551210.9196918905,-5708527.338604558,-4546515.922191398,-5868929.46316788,-5076469.831602914,-5496444.98987784,-5804419.495079225,-4759941.634140226,-5719131.201735792,-4216097.3615601715,-5365398.062254726,-5004969.470230386,-4728836.17627514],"lettercount":[9,2,3,3,5,3,3,3,6,1,4,4,2,4,4,4,1,4,4,5,4,2,3,1,2,1],"letters":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],"longitude":[18987394.516745858,18970696.593126863,19217454.72350563,18788874.683951527,18848245.15325427,18978117.8183001,18955853.92014144,19217454.72350563,19519872.710600525,18929879.40939617,19493898.19985525,19102424.620125744,18924313.434856508,19510596.12347424,19004092.44036485,19620060.252314463,18816704.556649845,19228586.67258496,18955853.92014144,18701674.453269962,19495753.45048881,18751768.224126928,19377012.734522317,19154373.75293577,19360314.810903326,19380723.34710893],"sizes":[27,6,9,9,15,9,9,9,18,3,12,12,6,12,12,12,3,12,12,15,12,6,9,3,6,3]},"selected":{"id":"1780","type":"Selection"},"selection_policy":{"id":"1781","type":"UnionRenderers"}},"id":"1685","type":"ColumnDataSource"},{"attributes":{"dimension":"lat"},"id":"2040","type":"MercatorTicker"},{"attributes":{"attribution":"&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors,&amp;copy; &lt;a href=\"https://cartodb.com/attributions\"&gt;CartoDB&lt;/a&gt;","url":"https://tiles.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png"},"id":"1831","type":"WMTSTileSource"},{"attributes":{},"id":"2049","type":"SaveTool"},{"attributes":{"callback":null,"tooltips":[["Repeated Letter","@letters"],["City Name","@city_name"],["Count","@lettercount"]]},"id":"1686","type":"HoverTool"},{"attributes":{"fill_alpha":{"value":0.05},"fill_color":{"value":"#FF0000"},"line_color":{"value":"#FF0000"},"size":{"field":"sizes","units":"screen"},"x":{"field":"longitude"},"y":{"field":"latitude"}},"id":"2057","type":"Circle"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_multi":null,"active_scroll":"auto","active_tap":"auto","tools":[{"id":"1686","type":"HoverTool"},{"id":"2048","type":"WheelZoomTool"},{"id":"2049","type":"SaveTool"}]},"id":"2050","type":"Toolbar"},{"attributes":{},"id":"1780","type":"Selection"},{"attributes":{"tile_source":{"id":"1831","type":"WMTSTileSource"}},"id":"2054","type":"TileRenderer"},{"attributes":{"formatter":{"id":"2033","type":"MercatorTickFormatter"},"ticker":{"id":"2031","type":"MercatorTicker"}},"id":"2030","type":"MercatorAxis"},{"attributes":{"dimension":"lat"},"id":"2042","type":"MercatorTickFormatter"},{"attributes":{"callback":null,"end":17900000,"start":20000000},"id":"2022","type":"Range1d"},{"attributes":{},"id":"2048","type":"WheelZoomTool"},{"attributes":{"callback":null,"end":-4000000,"start":-6000000},"id":"2024","type":"Range1d"},{"attributes":{},"id":"2026","type":"LinearScale"},{"attributes":{"dimension":1,"ticker":{"id":"2040","type":"MercatorTicker"}},"id":"2047","type":"Grid"},{"attributes":{},"id":"2028","type":"LinearScale"},{"attributes":{},"id":"1781","type":"UnionRenderers"},{"attributes":{"formatter":{"id":"2042","type":"MercatorTickFormatter"},"ticker":{"id":"2040","type":"MercatorTicker"}},"id":"2039","type":"MercatorAxis"},{"attributes":{"dimension":"lon"},"id":"2031","type":"MercatorTicker"},{"attributes":{"dimension":"lon"},"id":"2033","type":"MercatorTickFormatter"}],"root_ids":["2021"]},"title":"Bokeh Application","version":"1.3.1"}}
        </script>
        <script type="text/javascript">
          (function() {
            var fn = function() {
              Bokeh.safely(function() {
                (function(root) {
                  function embed_document(root) {
                    
                  var docs_json = document.getElementById('2407').textContent;
                  var render_items = [{"docid":"6a02b173-1e10-4d4a-9732-e0a845a09ea3","roots":{"2021":"ab12bd75-b332-4cfb-9a21-9937fb408a9d"}}];
                  root.Bokeh.embed.embed_items(docs_json, render_items);
                
                  }
                  if (root.Bokeh !== undefined) {
                    embed_document(root);
                  } else {
                    var attempts = 0;
                    var timer = setInterval(function(root) {
                      if (root.Bokeh !== undefined) {
                        embed_document(root);
                        clearInterval(timer);
                      }
                      attempts++;
                      if (attempts > 100) {
                        console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing");
                        clearInterval(timer);
                      }
                    }, 10, root)
                  }
                })(window);
              });
            };
            if (document.readyState != "loading") fn();
            else document.addEventListener("DOMContentLoaded", fn);
          })();
        </script>
    
  </body>
  
</html>
<!-- /wp:html -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date><![CDATA[2019-08-15 20:21:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-15 10:21:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[untitled-reusable-block]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Intro to Web Scraping</title>
		<link>https://jmckew.com/2019/08/23/intro-to-web-scraping/</link>
		<pubDate>Thu, 22 Aug 2019 20:30:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=404</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Following on from last weeks post where we analysed the amount of <a href="https://jmckew.com/2019/08/16/looking-for-patterns-in-city-names-interactive-plotting/">repeated letters within current New Zealand town names</a>. There was still one part of that analysis that really bugged me, and if you noticed it was from the data set that was used was using the European town names not the original Maori names. This post will be dedicated to introducing web scraping where we will extract the Maori names and run a similar analysis to present an interactive graph.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As like previously, let's take a look at the interactive graph before getting into how it was created. </p>
<!-- /wp:paragraph -->

<!-- wp:html -->

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Bokeh Plot</title>
        
<link rel="stylesheet" href="https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.css" type="text/css" />
        
<script type="text/javascript" src="https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.js"></script>
<script type="text/javascript">
    Bokeh.set_log_level("info");
</script>
    </head>
    <body>
        
        <div class="bk-root">
            <div class="bk-plotdiv" id="8e1813b4-1acc-4b99-89bc-d981199c6595"></div>
        </div>
        
        <script type="application/json" id="73752ed4-fbfe-44be-807a-de7b5b0557a3">
          {"73b0459f-e2b7-4a05-90f5-bbcad7202eb2":{"roots":{"references":[{"attributes":{},"id":"29935170-108a-4964-bb87-cb87fd1b2db4","type":"SaveTool"},{"attributes":{"grid_line_color":{"value":null},"plot":{"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},"ticker":{"id":"23753f85-0723-4cec-b333-548833f2f524","type":"CategoricalTicker"}},"id":"eef709ab-2da4-4c8f-b044-a0b534a137eb","type":"Grid"},{"attributes":{},"id":"cdca0fb6-04fe-4f41-9358-82a3eb6ed5d5","type":"PanTool"},{"attributes":{},"id":"55e034c1-08f4-481d-bc8a-60378fb383d0","type":"UnionRenderers"},{"attributes":{"bottom_units":"screen","fill_alpha":{"value":0.5},"fill_color":{"value":"lightgrey"},"left_units":"screen","level":"overlay","line_alpha":{"value":1.0},"line_color":{"value":"black"},"line_dash":[4,4],"line_width":{"value":2},"plot":null,"render_mode":"css","right_units":"screen","top_units":"screen"},"id":"78eacd1e-2a0b-4daa-a658-935d58b38dbc","type":"BoxAnnotation"},{"attributes":{},"id":"d3afc276-cf99-4b82-b1cf-fb713e19d58e","type":"CategoricalScale"},{"attributes":{},"id":"5f418d38-62b3-4f74-b266-89a000064992","type":"BasicTickFormatter"},{"attributes":{"callback":null,"factors":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"id":"745bcbe2-ddb2-4e22-9ee8-dd7349a203cc","type":"FactorRange"},{"attributes":{},"id":"1ec3600e-b5b9-46ba-9f76-ba1b435bd140","type":"ResetTool"},{"attributes":{"callback":null,"factors":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"id":"27407847-e1db-4850-9c75-9108b84e9dd5","type":"FactorRange"},{"attributes":{},"id":"044e7fda-38a2-471d-a835-a365a9bb6e2b","type":"HelpTool"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_scroll":"auto","active_tap":"auto","tools":[{"id":"f258ac42-17bb-44a4-8619-ef38ef8aeb80","type":"PanTool"},{"id":"f5469f9a-381c-40ae-8f88-40263d955a34","type":"WheelZoomTool"},{"id":"565f3dc0-817e-4c56-8817-4f3f77fb1d6a","type":"BoxZoomTool"},{"id":"6bba88dd-d5d7-41cb-b503-6f8e51dcda68","type":"SaveTool"},{"id":"1ec3600e-b5b9-46ba-9f76-ba1b435bd140","type":"ResetTool"},{"id":"e7a154ea-6923-4600-afb1-8936cd9fd3a4","type":"HelpTool"},{"id":"ffc1b6f9-b862-4f95-a74a-739131a02a18","type":"HoverTool"}]},"id":"a72accc9-811d-4c9d-b9ee-e5a619ab1e39","type":"Toolbar"},{"attributes":{"callback":null,"data":{"top":[10,1,0,1,4,1,6,3,5,0,4,2,3,6,6,3,0,5,2,4,4,1,3,0,1,0],"x":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"selected":{"id":"4a950782-bf0f-4f20-996c-7b0255db16bb","type":"Selection"},"selection_policy":{"id":"44bf1225-e44e-4b43-b6dc-b26ccb21063b","type":"UnionRenderers"}},"id":"444923e5-2037-4332-8570-9bc3a70380df","type":"ColumnDataSource"},{"attributes":{},"id":"19757f5e-7f69-4adb-ade6-ea785e548dd3","type":"BasicTicker"},{"attributes":{"data_source":{"id":"14d2286f-e47b-4e25-a596-a6804e90b1dc","type":"ColumnDataSource"},"glyph":{"id":"bf24ee32-7ab1-45ba-960f-e15eff7176e6","type":"VBar"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"92953010-1c46-4087-aca4-0a1bfd425381","type":"VBar"},"selection_glyph":null,"view":{"id":"92b4afd0-1401-420e-a8f2-1f61d6faea8b","type":"CDSView"}},"id":"b48ef1a0-0885-4a69-a7eb-cfdae1d48f49","type":"GlyphRenderer"},{"attributes":{"formatter":{"id":"ab9338e2-a827-4cfe-be8a-a64e798329ae","type":"CategoricalTickFormatter"},"plot":{"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},"ticker":{"id":"23753f85-0723-4cec-b333-548833f2f524","type":"CategoricalTicker"}},"id":"d94a9469-06e7-47cc-86b8-4352808192b9","type":"CategoricalAxis"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"top":{"field":"Count"},"width":{"value":0.9},"x":{"field":"index"}},"id":"92953010-1c46-4087-aca4-0a1bfd425381","type":"VBar"},{"attributes":{},"id":"65857b78-9f89-4432-a7ea-8b8d36d3c7ed","type":"BasicTickFormatter"},{"attributes":{"dimension":1,"plot":{"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},"ticker":{"id":"99db28db-545d-4ece-908f-d6620c0afd0e","type":"BasicTicker"}},"id":"3d8e860e-4db2-4deb-850d-16d0575627de","type":"Grid"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"top":{"field":"top"},"width":{"value":0.9},"x":{"field":"x"}},"id":"86223091-eed7-4fce-bbe6-beb74f1b75f1","type":"VBar"},{"attributes":{"plot":null,"text":"Letter Counts"},"id":"65841ae8-b846-4ca4-b5c8-4ac2bf22829e","type":"Title"},{"attributes":{},"id":"f6c38e28-7950-43f0-8015-c728b1aa4254","type":"CategoricalScale"},{"attributes":{},"id":"bb5b260d-ab83-414d-8c39-c93aaffb49cb","type":"BasicTickFormatter"},{"attributes":{"callback":null,"start":0},"id":"9c77872f-9e44-41c7-ba33-ffbf0330b0dd","type":"DataRange1d"},{"attributes":{},"id":"44bf1225-e44e-4b43-b6dc-b26ccb21063b","type":"UnionRenderers"},{"attributes":{"overlay":{"id":"526d04e7-eeda-4422-afcf-82932e56feb4","type":"BoxAnnotation"}},"id":"f3def2df-3bde-4fdb-a689-549fe4ba5c29","type":"BoxZoomTool"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_scroll":"auto","active_tap":"auto"},"id":"2d532231-9d58-448c-8849-585e28682b0a","type":"Toolbar"},{"attributes":{},"id":"85be1581-ca22-468e-9c90-0c3687bb0251","type":"Selection"},{"attributes":{},"id":"cc7e7239-a125-49a8-bad1-addd18783077","type":"LinearScale"},{"attributes":{"below":[{"id":"a55a3784-ef78-4c71-9826-930aac658467","type":"CategoricalAxis"}],"left":[{"id":"47c4e9be-8076-4504-b180-57f82733a2d1","type":"LinearAxis"}],"plot_height":250,"renderers":[{"id":"a55a3784-ef78-4c71-9826-930aac658467","type":"CategoricalAxis"},{"id":"110405de-1b0b-47b9-a443-ad5fd54e5929","type":"Grid"},{"id":"47c4e9be-8076-4504-b180-57f82733a2d1","type":"LinearAxis"},{"id":"d13aa0a1-f514-4db8-a8ac-76c335595b46","type":"Grid"},{"id":"78eacd1e-2a0b-4daa-a658-935d58b38dbc","type":"BoxAnnotation"},{"id":"0744c1a3-ad4d-40a8-b1bb-a152b432664d","type":"GlyphRenderer"}],"title":{"id":"3d28fa86-9500-4516-91ce-db1ffa76f02f","type":"Title"},"toolbar":{"id":"a72accc9-811d-4c9d-b9ee-e5a619ab1e39","type":"Toolbar"},"toolbar_location":null,"x_range":{"id":"0d347938-d15e-4176-a588-97cb7a826d50","type":"FactorRange"},"x_scale":{"id":"d3afc276-cf99-4b82-b1cf-fb713e19d58e","type":"CategoricalScale"},"y_range":{"id":"9c77872f-9e44-41c7-ba33-ffbf0330b0dd","type":"DataRange1d"},"y_scale":{"id":"835cb8b0-5983-432d-8d7b-783fadd6dee7","type":"LinearScale"}},"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"7cf71453-a726-48c3-8ef9-16d8743a3825","type":"UnionRenderers"},{"attributes":{},"id":"ab9338e2-a827-4cfe-be8a-a64e798329ae","type":"CategoricalTickFormatter"},{"attributes":{"formatter":{"id":"638191f8-dfa2-44f7-8587-e7bcc6c379fc","type":"CategoricalTickFormatter"},"plot":{"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},"ticker":{"id":"28f714cc-9f59-4798-9f38-721d01017bdf","type":"CategoricalTicker"}},"id":"a55a3784-ef78-4c71-9826-930aac658467","type":"CategoricalAxis"},{"attributes":{"callback":null,"data":{"top":[10,1,0,1,4,1,6,3,5,0,4,2,3,6,6,3,0,5,2,4,4,1,3,0,1,0],"x":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"selected":{"id":"85be1581-ca22-468e-9c90-0c3687bb0251","type":"Selection"},"selection_policy":{"id":"7cf71453-a726-48c3-8ef9-16d8743a3825","type":"UnionRenderers"}},"id":"f02a5350-4f96-4528-8a3f-420596077214","type":"ColumnDataSource"},{"attributes":{},"id":"69419fd7-cb77-4f6a-85ba-c38e6b7cd09d","type":"CategoricalScale"},{"attributes":{"callback":null,"renderers":"auto","tooltips":[["Word","@Word"]]},"id":"826f3b34-6bdf-4455-8e68-736a64253629","type":"HoverTool"},{"attributes":{},"id":"5a776903-61b6-409e-bbdf-3369586270c3","type":"Selection"},{"attributes":{"callback":null,"factors":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"id":"0d347938-d15e-4176-a588-97cb7a826d50","type":"FactorRange"},{"attributes":{"grid_line_color":{"value":null},"plot":{"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},"ticker":{"id":"2a642c48-8379-4e83-88ac-62a734f04092","type":"CategoricalTicker"}},"id":"f42ebc66-8a8d-41c5-bea4-a290a1681294","type":"Grid"},{"attributes":{"below":[{"id":"f0ed13a6-15e3-4b1f-88a1-bc0418de9c67","type":"CategoricalAxis"}],"left":[{"id":"e74b23ce-f457-4921-b3c1-814639293b20","type":"LinearAxis"}],"plot_height":250,"renderers":[{"id":"f0ed13a6-15e3-4b1f-88a1-bc0418de9c67","type":"CategoricalAxis"},{"id":"f42ebc66-8a8d-41c5-bea4-a290a1681294","type":"Grid"},{"id":"e74b23ce-f457-4921-b3c1-814639293b20","type":"LinearAxis"},{"id":"03518864-c262-4167-89f9-16b7fdd25d7b","type":"Grid"},{"id":"8346db2c-6086-4d83-bc4f-f2f7c26b135f","type":"GlyphRenderer"}],"title":{"id":"65841ae8-b846-4ca4-b5c8-4ac2bf22829e","type":"Title"},"toolbar":{"id":"2d532231-9d58-448c-8849-585e28682b0a","type":"Toolbar"},"toolbar_location":null,"x_range":{"id":"27407847-e1db-4850-9c75-9108b84e9dd5","type":"FactorRange"},"x_scale":{"id":"f6c38e28-7950-43f0-8015-c728b1aa4254","type":"CategoricalScale"},"y_range":{"id":"4d9623e0-0c60-4d48-806c-d3cfd07115f6","type":"DataRange1d"},"y_scale":{"id":"cc7e7239-a125-49a8-bad1-addd18783077","type":"LinearScale"}},"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"28f714cc-9f59-4798-9f38-721d01017bdf","type":"CategoricalTicker"},{"attributes":{},"id":"835cb8b0-5983-432d-8d7b-783fadd6dee7","type":"LinearScale"},{"attributes":{"source":{"id":"14d2286f-e47b-4e25-a596-a6804e90b1dc","type":"ColumnDataSource"}},"id":"92b4afd0-1401-420e-a8f2-1f61d6faea8b","type":"CDSView"},{"attributes":{"formatter":{"id":"cbfc0fa6-0e1c-4b58-8a6a-ad36e65d8d13","type":"CategoricalTickFormatter"},"plot":{"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},"ticker":{"id":"2a642c48-8379-4e83-88ac-62a734f04092","type":"CategoricalTicker"}},"id":"f0ed13a6-15e3-4b1f-88a1-bc0418de9c67","type":"CategoricalAxis"},{"attributes":{"data_source":{"id":"444923e5-2037-4332-8570-9bc3a70380df","type":"ColumnDataSource"},"glyph":{"id":"b38ba18e-d206-4896-81e0-1d6b8ef37150","type":"VBar"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"86223091-eed7-4fce-bbe6-beb74f1b75f1","type":"VBar"},"selection_glyph":null,"view":{"id":"b673eb74-1278-449a-b46a-7e3983de8261","type":"CDSView"}},"id":"8346db2c-6086-4d83-bc4f-f2f7c26b135f","type":"GlyphRenderer"},{"attributes":{},"id":"9ed538a5-faf0-48f9-8e6c-c4ec883ea74d","type":"BasicTicker"},{"attributes":{"callback":null,"start":0},"id":"4d9623e0-0c60-4d48-806c-d3cfd07115f6","type":"DataRange1d"},{"attributes":{"source":{"id":"444923e5-2037-4332-8570-9bc3a70380df","type":"ColumnDataSource"}},"id":"b673eb74-1278-449a-b46a-7e3983de8261","type":"CDSView"},{"attributes":{},"id":"e7a154ea-6923-4600-afb1-8936cd9fd3a4","type":"HelpTool"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"top":{"field":"top"},"width":{"value":0.9},"x":{"field":"x"}},"id":"da49dff4-9b46-42cf-958e-ce999b85a769","type":"VBar"},{"attributes":{"formatter":{"id":"65857b78-9f89-4432-a7ea-8b8d36d3c7ed","type":"BasicTickFormatter"},"plot":{"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},"ticker":{"id":"99db28db-545d-4ece-908f-d6620c0afd0e","type":"BasicTicker"}},"id":"7b80926a-de6b-4f48-bf42-7cc9a9250f93","type":"LinearAxis"},{"attributes":{"callback":null,"start":0},"id":"8dfed35f-5dd7-44bc-804d-3b655201ccf0","type":"DataRange1d"},{"attributes":{"fill_color":{"value":"#1f77b4"},"line_color":{"value":"#1f77b4"},"top":{"field":"top"},"width":{"value":0.9},"x":{"field":"x"}},"id":"a80c4e84-813c-4e0a-ad6c-d5d237d6ba21","type":"VBar"},{"attributes":{"fill_color":{"value":"#1f77b4"},"line_color":{"value":"#1f77b4"},"top":{"field":"Count"},"width":{"value":0.9},"x":{"field":"index"}},"id":"bf24ee32-7ab1-45ba-960f-e15eff7176e6","type":"VBar"},{"attributes":{"overlay":{"id":"78eacd1e-2a0b-4daa-a658-935d58b38dbc","type":"BoxAnnotation"}},"id":"565f3dc0-817e-4c56-8817-4f3f77fb1d6a","type":"BoxZoomTool"},{"attributes":{"plot":null,"text":"Letter Counts"},"id":"3d28fa86-9500-4516-91ce-db1ffa76f02f","type":"Title"},{"attributes":{"plot":null,"text":"Letter Counts"},"id":"6a0c24a6-b9dd-4f8c-848b-619629492a08","type":"Title"},{"attributes":{"fill_color":{"value":"#1f77b4"},"line_color":{"value":"#1f77b4"},"top":{"field":"top"},"width":{"value":0.9},"x":{"field":"x"}},"id":"b38ba18e-d206-4896-81e0-1d6b8ef37150","type":"VBar"},{"attributes":{"data_source":{"id":"f02a5350-4f96-4528-8a3f-420596077214","type":"ColumnDataSource"},"glyph":{"id":"a80c4e84-813c-4e0a-ad6c-d5d237d6ba21","type":"VBar"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"da49dff4-9b46-42cf-958e-ce999b85a769","type":"VBar"},"selection_glyph":null,"view":{"id":"c902427e-f345-4681-899d-cd0481e4352a","type":"CDSView"}},"id":"0744c1a3-ad4d-40a8-b1bb-a152b432664d","type":"GlyphRenderer"},{"attributes":{"below":[{"id":"d94a9469-06e7-47cc-86b8-4352808192b9","type":"CategoricalAxis"}],"left":[{"id":"7b80926a-de6b-4f48-bf42-7cc9a9250f93","type":"LinearAxis"}],"plot_height":250,"renderers":[{"id":"d94a9469-06e7-47cc-86b8-4352808192b9","type":"CategoricalAxis"},{"id":"eef709ab-2da4-4c8f-b044-a0b534a137eb","type":"Grid"},{"id":"7b80926a-de6b-4f48-bf42-7cc9a9250f93","type":"LinearAxis"},{"id":"3d8e860e-4db2-4deb-850d-16d0575627de","type":"Grid"},{"id":"526d04e7-eeda-4422-afcf-82932e56feb4","type":"BoxAnnotation"},{"id":"b48ef1a0-0885-4a69-a7eb-cfdae1d48f49","type":"GlyphRenderer"}],"title":{"id":"6a0c24a6-b9dd-4f8c-848b-619629492a08","type":"Title"},"toolbar":{"id":"e3765549-a91b-433f-8a48-0e5d2f6d56e2","type":"Toolbar"},"toolbar_location":null,"x_range":{"id":"745bcbe2-ddb2-4e22-9ee8-dd7349a203cc","type":"FactorRange"},"x_scale":{"id":"69419fd7-cb77-4f6a-85ba-c38e6b7cd09d","type":"CategoricalScale"},"y_range":{"id":"8dfed35f-5dd7-44bc-804d-3b655201ccf0","type":"DataRange1d"},"y_scale":{"id":"42142970-6d41-4790-a88e-6b0e38e02096","type":"LinearScale"}},"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"42142970-6d41-4790-a88e-6b0e38e02096","type":"LinearScale"},{"attributes":{"dimension":1,"plot":{"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},"ticker":{"id":"19757f5e-7f69-4adb-ade6-ea785e548dd3","type":"BasicTicker"}},"id":"d13aa0a1-f514-4db8-a8ac-76c335595b46","type":"Grid"},{"attributes":{"source":{"id":"f02a5350-4f96-4528-8a3f-420596077214","type":"ColumnDataSource"}},"id":"c902427e-f345-4681-899d-cd0481e4352a","type":"CDSView"},{"attributes":{"grid_line_color":{"value":null},"plot":{"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},"ticker":{"id":"28f714cc-9f59-4798-9f38-721d01017bdf","type":"CategoricalTicker"}},"id":"110405de-1b0b-47b9-a443-ad5fd54e5929","type":"Grid"},{"attributes":{"bottom_units":"screen","fill_alpha":{"value":0.5},"fill_color":{"value":"lightgrey"},"left_units":"screen","level":"overlay","line_alpha":{"value":1.0},"line_color":{"value":"black"},"line_dash":[4,4],"line_width":{"value":2},"plot":null,"render_mode":"css","right_units":"screen","top_units":"screen"},"id":"526d04e7-eeda-4422-afcf-82932e56feb4","type":"BoxAnnotation"},{"attributes":{},"id":"23753f85-0723-4cec-b333-548833f2f524","type":"CategoricalTicker"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_scroll":"auto","active_tap":"auto","tools":[{"id":"cdca0fb6-04fe-4f41-9358-82a3eb6ed5d5","type":"PanTool"},{"id":"70544e79-cabc-4791-9e14-48fecced38f9","type":"WheelZoomTool"},{"id":"f3def2df-3bde-4fdb-a689-549fe4ba5c29","type":"BoxZoomTool"},{"id":"29935170-108a-4964-bb87-cb87fd1b2db4","type":"SaveTool"},{"id":"294653a0-5b62-4f8f-ac45-ad6d6487c2fc","type":"ResetTool"},{"id":"044e7fda-38a2-471d-a835-a365a9bb6e2b","type":"HelpTool"},{"id":"826f3b34-6bdf-4455-8e68-736a64253629","type":"HoverTool"}]},"id":"e3765549-a91b-433f-8a48-0e5d2f6d56e2","type":"Toolbar"},{"attributes":{},"id":"f258ac42-17bb-44a4-8619-ef38ef8aeb80","type":"PanTool"},{"attributes":{},"id":"99db28db-545d-4ece-908f-d6620c0afd0e","type":"BasicTicker"},{"attributes":{},"id":"294653a0-5b62-4f8f-ac45-ad6d6487c2fc","type":"ResetTool"},{"attributes":{},"id":"cbfc0fa6-0e1c-4b58-8a6a-ad36e65d8d13","type":"CategoricalTickFormatter"},{"attributes":{},"id":"6bba88dd-d5d7-41cb-b503-6f8e51dcda68","type":"SaveTool"},{"attributes":{"callback":null,"data":{"Count":[10,1,0,1,4,1,6,3,5,0,4,2,3,6,6,3,0,5,2,4,4,1,3,0,1,0],"Word":["Aratiatia Lakes, Aratiatia Rapids","Kaik\u016bmera Bay","Ahuroa","Aratiatia Lakes, Aratiatia Rapids","Keteketerau","Kaipara Flats","Mangangarongaro: Mangangarongaro Stream","Whatiwhatihoe","Aratiatia Lakes, Aratiatia Rapids","Ahuroa","Pukek\u0101k\u0101riki","M\u0101k\u014dhine Valley","Mangangarongaro: Mangangarongaro Stream","Mangangarongaro: Mangangarongaro Stream","Mokoroa: Mokoroa Stream","Pukepiripiri","Ahuroa","Mangangarongaro: Mangangarongaro Stream","Aratiatia Lakes, Aratiatia Rapids","Aratiatia Lakes, Aratiatia Rapids","Motukauri: Motukauri Island","Awah\u014dhonu River","Waianiwaniwa","Ahuroa","Kaik\u016bmera Bay","Ahuroa"],"index":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"selected":{"id":"5a776903-61b6-409e-bbdf-3369586270c3","type":"Selection"},"selection_policy":{"id":"55e034c1-08f4-481d-bc8a-60378fb383d0","type":"UnionRenderers"}},"id":"14d2286f-e47b-4e25-a596-a6804e90b1dc","type":"ColumnDataSource"},{"attributes":{"dimension":1,"plot":{"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},"ticker":{"id":"9ed538a5-faf0-48f9-8e6c-c4ec883ea74d","type":"BasicTicker"}},"id":"03518864-c262-4167-89f9-16b7fdd25d7b","type":"Grid"},{"attributes":{"callback":null,"renderers":"auto","tooltips":[["Word","@Word"]]},"id":"ffc1b6f9-b862-4f95-a74a-739131a02a18","type":"HoverTool"},{"attributes":{},"id":"f5469f9a-381c-40ae-8f88-40263d955a34","type":"WheelZoomTool"},{"attributes":{"formatter":{"id":"5f418d38-62b3-4f74-b266-89a000064992","type":"BasicTickFormatter"},"plot":{"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},"ticker":{"id":"19757f5e-7f69-4adb-ade6-ea785e548dd3","type":"BasicTicker"}},"id":"47c4e9be-8076-4504-b180-57f82733a2d1","type":"LinearAxis"},{"attributes":{},"id":"70544e79-cabc-4791-9e14-48fecced38f9","type":"WheelZoomTool"},{"attributes":{"formatter":{"id":"bb5b260d-ab83-414d-8c39-c93aaffb49cb","type":"BasicTickFormatter"},"plot":{"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},"ticker":{"id":"9ed538a5-faf0-48f9-8e6c-c4ec883ea74d","type":"BasicTicker"}},"id":"e74b23ce-f457-4921-b3c1-814639293b20","type":"LinearAxis"},{"attributes":{},"id":"638191f8-dfa2-44f7-8587-e7bcc6c379fc","type":"CategoricalTickFormatter"},{"attributes":{},"id":"4a950782-bf0f-4f20-996c-7b0255db16bb","type":"Selection"},{"attributes":{},"id":"2a642c48-8379-4e83-88ac-62a734f04092","type":"CategoricalTicker"}],"root_ids":["b15004a8-5bc0-4838-abf8-c0055d1490bf","bbf7ded8-17a7-456f-a437-3d2e309a8652","27812207-f3c0-4798-a74b-b2613835ff63"]},"title":"Bokeh Application","version":"0.12.16"}}
        </script>
        <script type="text/javascript">
          (function() {
            var fn = function() {
              Bokeh.safely(function() {
                (function(root) {
                  function embed_document(root) {
                    
                  var docs_json = document.getElementById('73752ed4-fbfe-44be-807a-de7b5b0557a3').textContent;
                  var render_items = [{"docid":"73b0459f-e2b7-4a05-90f5-bbcad7202eb2","elementid":"8e1813b4-1acc-4b99-89bc-d981199c6595","modelid":"27812207-f3c0-4798-a74b-b2613835ff63"}];
                  root.Bokeh.embed.embed_items(docs_json, render_items);
                
                  }
                  if (root.Bokeh !== undefined) {
                    embed_document(root);
                  } else {
                    var attempts = 0;
                    var timer = setInterval(function(root) {
                      if (root.Bokeh !== undefined) {
                        embed_document(root);
                        clearInterval(timer);
                      }
                      attempts++;
                      if (attempts > 100) {
                        console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing")
                        clearInterval(timer);
                      }
                    }, 10, root)
                  }
                })(window);
              });
            };
            if (document.readyState != "loading") fn();
            else document.addEventListener("DOMContentLoaded", fn);
          })();
        </script>
    </body>
</html>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Similarly with most of my posts of this nature, we always begin by getting the data. To find a data set that gives us as many Maori town or place names as possible proved to be quite challenging, but luckily for Maori Language week NZhistory.gov.nz posted a table of a 1000 Maori place names, their components and the meaning. This data can be found: <a href="https://nzhistory.govt.nz/culture/maori-language-week/1000-maori-place-names">https://nzhistory.govt.nz/culture/maori-language-week/1000-maori-place-names</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unlike last time however with our world city names from <a href="https://www.kaggle.com/">Kaggle</a>, this data isn't nicely supplied to us in an Excel format. While it may be possible to directly copy-paste from the website into a spreadsheet, I think this is a great way to ease into web scraping.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What is Web Scraping?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Web scraping, web harvesting or web data extraction is the process of extracting data from websites. To do this in Python, while there is multiple ways to achieve this (requests + beautiful soup, selenium, etc), my personal favourite package to use is <a href="https://scrapy.org/">Scrapy</a>. While it may be daunting to begin with from a non object-oriented basis, you will soon appreciate it more once you've begun using it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Initially the premise around the <a href="https://scrapy.org/">Scrapy</a> package is to create 'web spiders'. If we take a look of the structure of the first example on the <a href="https://scrapy.org/">Scrapy</a> website we get an understanding on how to structure our web spiders when developing:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">import scrapy

class BlogSpider(scrapy.Spider):
    name = 'blogspider'
    start_urls = ['https://blog.scrapinghub.com']

    def parse(self, response):
        for title in response.css('.post-header>h2'):
            yield {'title': title.css('a ::text').get()}
        for next_page in response.css('a.next-posts-link'):
            yield response.follow(next_page, self.parse)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>First of all we can see that the custom spider is essentially an extension of the scrapy.Spider class. It is to be noted that the name and start_urls variables (which are apart of the class) are special in the sense the scrapy package uses them as configuration settings. When it comes to web scraping, if you have had experience using HTML, CSS and/or Javascript, this experience will become extremely useful; that is not to say it is not possible without experience, it's just a learning curve. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Following on we can see a function for parsing (also specially named) in which there are 2 loops, the first for loop is going to loop through all title's marked as headers (specifically h2) and return a dictionary with the text in the heading.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">class NameSpider(scrapy.Spider):
    name = 'names'
    start_urls = ['https://nzhistory.govt.nz/culture/maori-language-week/1000-maori-place-names/']

    def parse(self,response):
        def extract_from_table(table_row,table_col):
            return response.xpath(f"//tr[{table_row}]//td[{table_col}]//text()").get()
        
        for i in range(2,1000):
            yield {
                'Place Name' : extract_from_table(i,1),
                'Components' : extract_from_table(i,2),
                'Meaning' : extract_from_table(i,3)
            }</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that we have created our spider that looks through each row of the table on the webpage (more information on determining this can be found: <a href="https://docs.scrapy.org/en/latest/intro/tutorial.html">https://docs.scrapy.org/en/latest/intro/tutorial.html</a>). It's time to run the spider and take a look at the output. To run a spider you go into the directory from the command line and run 'scrapy crawl &lt;spider name>' and to store an output at the same time 'scrapy crawl &lt;spider name> -o filename.csv -t csv.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now similar to the previous post, we run a similar analysis and plot with Bokeh!</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">import pandas as pd
import collections
from collections import OrderedDict
import operator
import matplotlib.pyplot as plt
import numpy as np
import math
from bokeh.io import show, output_file
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource
from bokeh.models.tools import HoverTool

names_df = pd.read_csv('names.csv', header=0, sep=',', quotechar='"')
nz_names = names_df['Place Name'].tolist()
nz_dict = { i : 0 for i in nz_names }
letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
lcount = dict(OrderedDict([(l, 0) for l in letters]))

for name in nz_names:
    nz_dict[name] = dict(OrderedDict([(l, 0) for l in letters]))
    city_dict = nz_dict[name]
    for c in name:
        if c.upper() in letters:
            city_dict[c.upper()] += 1

total_df = pd.DataFrame.from_dict(nz_dict)
total_df = total_df.T

max_letters_cities = total_df.idxmax().tolist()
lettercounts = total_df.loc[total_df.idxmax()].max().tolist()
maxletters = dict(OrderedDict([(l, 0) for l in letters]))
for i,l in enumerate(letters):
    maxletters[l] = max_letters_cities[i]
    maxletters[l] = (lettercounts[i])

summary_df = pd.DataFrame()
scale = 1
summary_df['Word_Name'] = total_df.idxmax()
summary_df['Count'] = total_df.loc[total_df.idxmax()].max()

source = ColumnDataSource(summary_df)
output_file("letter_count.html")

hover = HoverTool()
hover.tooltips=[
    ('Word', '@Word')
]

p = figure(x_range=summary_df.index.tolist(), plot_height=250, title="Letter Counts",
           toolbar_location=None)

p.vbar(x='index', top='Count', width=0.9,source=source)
p.add_tools(hover)
p.xgrid.grid_line_color = None
p.y_range.start = 0

show(p)</pre>
<!-- /wp:syntaxhighlighter/code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date><![CDATA[2019-08-23 06:30:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-22 20:30:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[intro-to-web-scraping]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Intro to Web Scraping

This post is to introduce how to do web scraping with Scrapy, analyse the scraped data and make an interactive plot with Bokeh.

#python #webscraping #bokeh #scrapy #coding]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>LetterCount</title>
		<link>https://jmckew.com/2019/08/23/untitled-reusable-block-2/</link>
		<pubDate>Fri, 23 Aug 2019 01:42:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/2019/08/23/untitled-reusable-block-2/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:html -->
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Bokeh Plot</title>
        
<link rel="stylesheet" href="https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.css" type="text/css" />
        
<script type="text/javascript" src="https://cdn.pydata.org/bokeh/release/bokeh-0.12.16.min.js"></script>
<script type="text/javascript">
    Bokeh.set_log_level("info");
</script>
    </head>
    <body>
        
        <div class="bk-root">
            <div class="bk-plotdiv" id="8e1813b4-1acc-4b99-89bc-d981199c6595"></div>
        </div>
        
        <script type="application/json" id="73752ed4-fbfe-44be-807a-de7b5b0557a3">
          {"73b0459f-e2b7-4a05-90f5-bbcad7202eb2":{"roots":{"references":[{"attributes":{},"id":"29935170-108a-4964-bb87-cb87fd1b2db4","type":"SaveTool"},{"attributes":{"grid_line_color":{"value":null},"plot":{"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},"ticker":{"id":"23753f85-0723-4cec-b333-548833f2f524","type":"CategoricalTicker"}},"id":"eef709ab-2da4-4c8f-b044-a0b534a137eb","type":"Grid"},{"attributes":{},"id":"cdca0fb6-04fe-4f41-9358-82a3eb6ed5d5","type":"PanTool"},{"attributes":{},"id":"55e034c1-08f4-481d-bc8a-60378fb383d0","type":"UnionRenderers"},{"attributes":{"bottom_units":"screen","fill_alpha":{"value":0.5},"fill_color":{"value":"lightgrey"},"left_units":"screen","level":"overlay","line_alpha":{"value":1.0},"line_color":{"value":"black"},"line_dash":[4,4],"line_width":{"value":2},"plot":null,"render_mode":"css","right_units":"screen","top_units":"screen"},"id":"78eacd1e-2a0b-4daa-a658-935d58b38dbc","type":"BoxAnnotation"},{"attributes":{},"id":"d3afc276-cf99-4b82-b1cf-fb713e19d58e","type":"CategoricalScale"},{"attributes":{},"id":"5f418d38-62b3-4f74-b266-89a000064992","type":"BasicTickFormatter"},{"attributes":{"callback":null,"factors":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"id":"745bcbe2-ddb2-4e22-9ee8-dd7349a203cc","type":"FactorRange"},{"attributes":{},"id":"1ec3600e-b5b9-46ba-9f76-ba1b435bd140","type":"ResetTool"},{"attributes":{"callback":null,"factors":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"id":"27407847-e1db-4850-9c75-9108b84e9dd5","type":"FactorRange"},{"attributes":{},"id":"044e7fda-38a2-471d-a835-a365a9bb6e2b","type":"HelpTool"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_scroll":"auto","active_tap":"auto","tools":[{"id":"f258ac42-17bb-44a4-8619-ef38ef8aeb80","type":"PanTool"},{"id":"f5469f9a-381c-40ae-8f88-40263d955a34","type":"WheelZoomTool"},{"id":"565f3dc0-817e-4c56-8817-4f3f77fb1d6a","type":"BoxZoomTool"},{"id":"6bba88dd-d5d7-41cb-b503-6f8e51dcda68","type":"SaveTool"},{"id":"1ec3600e-b5b9-46ba-9f76-ba1b435bd140","type":"ResetTool"},{"id":"e7a154ea-6923-4600-afb1-8936cd9fd3a4","type":"HelpTool"},{"id":"ffc1b6f9-b862-4f95-a74a-739131a02a18","type":"HoverTool"}]},"id":"a72accc9-811d-4c9d-b9ee-e5a619ab1e39","type":"Toolbar"},{"attributes":{"callback":null,"data":{"top":[10,1,0,1,4,1,6,3,5,0,4,2,3,6,6,3,0,5,2,4,4,1,3,0,1,0],"x":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"selected":{"id":"4a950782-bf0f-4f20-996c-7b0255db16bb","type":"Selection"},"selection_policy":{"id":"44bf1225-e44e-4b43-b6dc-b26ccb21063b","type":"UnionRenderers"}},"id":"444923e5-2037-4332-8570-9bc3a70380df","type":"ColumnDataSource"},{"attributes":{},"id":"19757f5e-7f69-4adb-ade6-ea785e548dd3","type":"BasicTicker"},{"attributes":{"data_source":{"id":"14d2286f-e47b-4e25-a596-a6804e90b1dc","type":"ColumnDataSource"},"glyph":{"id":"bf24ee32-7ab1-45ba-960f-e15eff7176e6","type":"VBar"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"92953010-1c46-4087-aca4-0a1bfd425381","type":"VBar"},"selection_glyph":null,"view":{"id":"92b4afd0-1401-420e-a8f2-1f61d6faea8b","type":"CDSView"}},"id":"b48ef1a0-0885-4a69-a7eb-cfdae1d48f49","type":"GlyphRenderer"},{"attributes":{"formatter":{"id":"ab9338e2-a827-4cfe-be8a-a64e798329ae","type":"CategoricalTickFormatter"},"plot":{"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},"ticker":{"id":"23753f85-0723-4cec-b333-548833f2f524","type":"CategoricalTicker"}},"id":"d94a9469-06e7-47cc-86b8-4352808192b9","type":"CategoricalAxis"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"top":{"field":"Count"},"width":{"value":0.9},"x":{"field":"index"}},"id":"92953010-1c46-4087-aca4-0a1bfd425381","type":"VBar"},{"attributes":{},"id":"65857b78-9f89-4432-a7ea-8b8d36d3c7ed","type":"BasicTickFormatter"},{"attributes":{"dimension":1,"plot":{"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},"ticker":{"id":"99db28db-545d-4ece-908f-d6620c0afd0e","type":"BasicTicker"}},"id":"3d8e860e-4db2-4deb-850d-16d0575627de","type":"Grid"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"top":{"field":"top"},"width":{"value":0.9},"x":{"field":"x"}},"id":"86223091-eed7-4fce-bbe6-beb74f1b75f1","type":"VBar"},{"attributes":{"plot":null,"text":"Letter Counts"},"id":"65841ae8-b846-4ca4-b5c8-4ac2bf22829e","type":"Title"},{"attributes":{},"id":"f6c38e28-7950-43f0-8015-c728b1aa4254","type":"CategoricalScale"},{"attributes":{},"id":"bb5b260d-ab83-414d-8c39-c93aaffb49cb","type":"BasicTickFormatter"},{"attributes":{"callback":null,"start":0},"id":"9c77872f-9e44-41c7-ba33-ffbf0330b0dd","type":"DataRange1d"},{"attributes":{},"id":"44bf1225-e44e-4b43-b6dc-b26ccb21063b","type":"UnionRenderers"},{"attributes":{"overlay":{"id":"526d04e7-eeda-4422-afcf-82932e56feb4","type":"BoxAnnotation"}},"id":"f3def2df-3bde-4fdb-a689-549fe4ba5c29","type":"BoxZoomTool"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_scroll":"auto","active_tap":"auto"},"id":"2d532231-9d58-448c-8849-585e28682b0a","type":"Toolbar"},{"attributes":{},"id":"85be1581-ca22-468e-9c90-0c3687bb0251","type":"Selection"},{"attributes":{},"id":"cc7e7239-a125-49a8-bad1-addd18783077","type":"LinearScale"},{"attributes":{"below":[{"id":"a55a3784-ef78-4c71-9826-930aac658467","type":"CategoricalAxis"}],"left":[{"id":"47c4e9be-8076-4504-b180-57f82733a2d1","type":"LinearAxis"}],"plot_height":250,"renderers":[{"id":"a55a3784-ef78-4c71-9826-930aac658467","type":"CategoricalAxis"},{"id":"110405de-1b0b-47b9-a443-ad5fd54e5929","type":"Grid"},{"id":"47c4e9be-8076-4504-b180-57f82733a2d1","type":"LinearAxis"},{"id":"d13aa0a1-f514-4db8-a8ac-76c335595b46","type":"Grid"},{"id":"78eacd1e-2a0b-4daa-a658-935d58b38dbc","type":"BoxAnnotation"},{"id":"0744c1a3-ad4d-40a8-b1bb-a152b432664d","type":"GlyphRenderer"}],"title":{"id":"3d28fa86-9500-4516-91ce-db1ffa76f02f","type":"Title"},"toolbar":{"id":"a72accc9-811d-4c9d-b9ee-e5a619ab1e39","type":"Toolbar"},"toolbar_location":null,"x_range":{"id":"0d347938-d15e-4176-a588-97cb7a826d50","type":"FactorRange"},"x_scale":{"id":"d3afc276-cf99-4b82-b1cf-fb713e19d58e","type":"CategoricalScale"},"y_range":{"id":"9c77872f-9e44-41c7-ba33-ffbf0330b0dd","type":"DataRange1d"},"y_scale":{"id":"835cb8b0-5983-432d-8d7b-783fadd6dee7","type":"LinearScale"}},"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"7cf71453-a726-48c3-8ef9-16d8743a3825","type":"UnionRenderers"},{"attributes":{},"id":"ab9338e2-a827-4cfe-be8a-a64e798329ae","type":"CategoricalTickFormatter"},{"attributes":{"formatter":{"id":"638191f8-dfa2-44f7-8587-e7bcc6c379fc","type":"CategoricalTickFormatter"},"plot":{"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},"ticker":{"id":"28f714cc-9f59-4798-9f38-721d01017bdf","type":"CategoricalTicker"}},"id":"a55a3784-ef78-4c71-9826-930aac658467","type":"CategoricalAxis"},{"attributes":{"callback":null,"data":{"top":[10,1,0,1,4,1,6,3,5,0,4,2,3,6,6,3,0,5,2,4,4,1,3,0,1,0],"x":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"selected":{"id":"85be1581-ca22-468e-9c90-0c3687bb0251","type":"Selection"},"selection_policy":{"id":"7cf71453-a726-48c3-8ef9-16d8743a3825","type":"UnionRenderers"}},"id":"f02a5350-4f96-4528-8a3f-420596077214","type":"ColumnDataSource"},{"attributes":{},"id":"69419fd7-cb77-4f6a-85ba-c38e6b7cd09d","type":"CategoricalScale"},{"attributes":{"callback":null,"renderers":"auto","tooltips":[["Word","@Word"]]},"id":"826f3b34-6bdf-4455-8e68-736a64253629","type":"HoverTool"},{"attributes":{},"id":"5a776903-61b6-409e-bbdf-3369586270c3","type":"Selection"},{"attributes":{"callback":null,"factors":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"id":"0d347938-d15e-4176-a588-97cb7a826d50","type":"FactorRange"},{"attributes":{"grid_line_color":{"value":null},"plot":{"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},"ticker":{"id":"2a642c48-8379-4e83-88ac-62a734f04092","type":"CategoricalTicker"}},"id":"f42ebc66-8a8d-41c5-bea4-a290a1681294","type":"Grid"},{"attributes":{"below":[{"id":"f0ed13a6-15e3-4b1f-88a1-bc0418de9c67","type":"CategoricalAxis"}],"left":[{"id":"e74b23ce-f457-4921-b3c1-814639293b20","type":"LinearAxis"}],"plot_height":250,"renderers":[{"id":"f0ed13a6-15e3-4b1f-88a1-bc0418de9c67","type":"CategoricalAxis"},{"id":"f42ebc66-8a8d-41c5-bea4-a290a1681294","type":"Grid"},{"id":"e74b23ce-f457-4921-b3c1-814639293b20","type":"LinearAxis"},{"id":"03518864-c262-4167-89f9-16b7fdd25d7b","type":"Grid"},{"id":"8346db2c-6086-4d83-bc4f-f2f7c26b135f","type":"GlyphRenderer"}],"title":{"id":"65841ae8-b846-4ca4-b5c8-4ac2bf22829e","type":"Title"},"toolbar":{"id":"2d532231-9d58-448c-8849-585e28682b0a","type":"Toolbar"},"toolbar_location":null,"x_range":{"id":"27407847-e1db-4850-9c75-9108b84e9dd5","type":"FactorRange"},"x_scale":{"id":"f6c38e28-7950-43f0-8015-c728b1aa4254","type":"CategoricalScale"},"y_range":{"id":"4d9623e0-0c60-4d48-806c-d3cfd07115f6","type":"DataRange1d"},"y_scale":{"id":"cc7e7239-a125-49a8-bad1-addd18783077","type":"LinearScale"}},"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"28f714cc-9f59-4798-9f38-721d01017bdf","type":"CategoricalTicker"},{"attributes":{},"id":"835cb8b0-5983-432d-8d7b-783fadd6dee7","type":"LinearScale"},{"attributes":{"source":{"id":"14d2286f-e47b-4e25-a596-a6804e90b1dc","type":"ColumnDataSource"}},"id":"92b4afd0-1401-420e-a8f2-1f61d6faea8b","type":"CDSView"},{"attributes":{"formatter":{"id":"cbfc0fa6-0e1c-4b58-8a6a-ad36e65d8d13","type":"CategoricalTickFormatter"},"plot":{"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},"ticker":{"id":"2a642c48-8379-4e83-88ac-62a734f04092","type":"CategoricalTicker"}},"id":"f0ed13a6-15e3-4b1f-88a1-bc0418de9c67","type":"CategoricalAxis"},{"attributes":{"data_source":{"id":"444923e5-2037-4332-8570-9bc3a70380df","type":"ColumnDataSource"},"glyph":{"id":"b38ba18e-d206-4896-81e0-1d6b8ef37150","type":"VBar"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"86223091-eed7-4fce-bbe6-beb74f1b75f1","type":"VBar"},"selection_glyph":null,"view":{"id":"b673eb74-1278-449a-b46a-7e3983de8261","type":"CDSView"}},"id":"8346db2c-6086-4d83-bc4f-f2f7c26b135f","type":"GlyphRenderer"},{"attributes":{},"id":"9ed538a5-faf0-48f9-8e6c-c4ec883ea74d","type":"BasicTicker"},{"attributes":{"callback":null,"start":0},"id":"4d9623e0-0c60-4d48-806c-d3cfd07115f6","type":"DataRange1d"},{"attributes":{"source":{"id":"444923e5-2037-4332-8570-9bc3a70380df","type":"ColumnDataSource"}},"id":"b673eb74-1278-449a-b46a-7e3983de8261","type":"CDSView"},{"attributes":{},"id":"e7a154ea-6923-4600-afb1-8936cd9fd3a4","type":"HelpTool"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"top":{"field":"top"},"width":{"value":0.9},"x":{"field":"x"}},"id":"da49dff4-9b46-42cf-958e-ce999b85a769","type":"VBar"},{"attributes":{"formatter":{"id":"65857b78-9f89-4432-a7ea-8b8d36d3c7ed","type":"BasicTickFormatter"},"plot":{"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},"ticker":{"id":"99db28db-545d-4ece-908f-d6620c0afd0e","type":"BasicTicker"}},"id":"7b80926a-de6b-4f48-bf42-7cc9a9250f93","type":"LinearAxis"},{"attributes":{"callback":null,"start":0},"id":"8dfed35f-5dd7-44bc-804d-3b655201ccf0","type":"DataRange1d"},{"attributes":{"fill_color":{"value":"#1f77b4"},"line_color":{"value":"#1f77b4"},"top":{"field":"top"},"width":{"value":0.9},"x":{"field":"x"}},"id":"a80c4e84-813c-4e0a-ad6c-d5d237d6ba21","type":"VBar"},{"attributes":{"fill_color":{"value":"#1f77b4"},"line_color":{"value":"#1f77b4"},"top":{"field":"Count"},"width":{"value":0.9},"x":{"field":"index"}},"id":"bf24ee32-7ab1-45ba-960f-e15eff7176e6","type":"VBar"},{"attributes":{"overlay":{"id":"78eacd1e-2a0b-4daa-a658-935d58b38dbc","type":"BoxAnnotation"}},"id":"565f3dc0-817e-4c56-8817-4f3f77fb1d6a","type":"BoxZoomTool"},{"attributes":{"plot":null,"text":"Letter Counts"},"id":"3d28fa86-9500-4516-91ce-db1ffa76f02f","type":"Title"},{"attributes":{"plot":null,"text":"Letter Counts"},"id":"6a0c24a6-b9dd-4f8c-848b-619629492a08","type":"Title"},{"attributes":{"fill_color":{"value":"#1f77b4"},"line_color":{"value":"#1f77b4"},"top":{"field":"top"},"width":{"value":0.9},"x":{"field":"x"}},"id":"b38ba18e-d206-4896-81e0-1d6b8ef37150","type":"VBar"},{"attributes":{"data_source":{"id":"f02a5350-4f96-4528-8a3f-420596077214","type":"ColumnDataSource"},"glyph":{"id":"a80c4e84-813c-4e0a-ad6c-d5d237d6ba21","type":"VBar"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"da49dff4-9b46-42cf-958e-ce999b85a769","type":"VBar"},"selection_glyph":null,"view":{"id":"c902427e-f345-4681-899d-cd0481e4352a","type":"CDSView"}},"id":"0744c1a3-ad4d-40a8-b1bb-a152b432664d","type":"GlyphRenderer"},{"attributes":{"below":[{"id":"d94a9469-06e7-47cc-86b8-4352808192b9","type":"CategoricalAxis"}],"left":[{"id":"7b80926a-de6b-4f48-bf42-7cc9a9250f93","type":"LinearAxis"}],"plot_height":250,"renderers":[{"id":"d94a9469-06e7-47cc-86b8-4352808192b9","type":"CategoricalAxis"},{"id":"eef709ab-2da4-4c8f-b044-a0b534a137eb","type":"Grid"},{"id":"7b80926a-de6b-4f48-bf42-7cc9a9250f93","type":"LinearAxis"},{"id":"3d8e860e-4db2-4deb-850d-16d0575627de","type":"Grid"},{"id":"526d04e7-eeda-4422-afcf-82932e56feb4","type":"BoxAnnotation"},{"id":"b48ef1a0-0885-4a69-a7eb-cfdae1d48f49","type":"GlyphRenderer"}],"title":{"id":"6a0c24a6-b9dd-4f8c-848b-619629492a08","type":"Title"},"toolbar":{"id":"e3765549-a91b-433f-8a48-0e5d2f6d56e2","type":"Toolbar"},"toolbar_location":null,"x_range":{"id":"745bcbe2-ddb2-4e22-9ee8-dd7349a203cc","type":"FactorRange"},"x_scale":{"id":"69419fd7-cb77-4f6a-85ba-c38e6b7cd09d","type":"CategoricalScale"},"y_range":{"id":"8dfed35f-5dd7-44bc-804d-3b655201ccf0","type":"DataRange1d"},"y_scale":{"id":"42142970-6d41-4790-a88e-6b0e38e02096","type":"LinearScale"}},"id":"27812207-f3c0-4798-a74b-b2613835ff63","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"42142970-6d41-4790-a88e-6b0e38e02096","type":"LinearScale"},{"attributes":{"dimension":1,"plot":{"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},"ticker":{"id":"19757f5e-7f69-4adb-ade6-ea785e548dd3","type":"BasicTicker"}},"id":"d13aa0a1-f514-4db8-a8ac-76c335595b46","type":"Grid"},{"attributes":{"source":{"id":"f02a5350-4f96-4528-8a3f-420596077214","type":"ColumnDataSource"}},"id":"c902427e-f345-4681-899d-cd0481e4352a","type":"CDSView"},{"attributes":{"grid_line_color":{"value":null},"plot":{"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},"ticker":{"id":"28f714cc-9f59-4798-9f38-721d01017bdf","type":"CategoricalTicker"}},"id":"110405de-1b0b-47b9-a443-ad5fd54e5929","type":"Grid"},{"attributes":{"bottom_units":"screen","fill_alpha":{"value":0.5},"fill_color":{"value":"lightgrey"},"left_units":"screen","level":"overlay","line_alpha":{"value":1.0},"line_color":{"value":"black"},"line_dash":[4,4],"line_width":{"value":2},"plot":null,"render_mode":"css","right_units":"screen","top_units":"screen"},"id":"526d04e7-eeda-4422-afcf-82932e56feb4","type":"BoxAnnotation"},{"attributes":{},"id":"23753f85-0723-4cec-b333-548833f2f524","type":"CategoricalTicker"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_scroll":"auto","active_tap":"auto","tools":[{"id":"cdca0fb6-04fe-4f41-9358-82a3eb6ed5d5","type":"PanTool"},{"id":"70544e79-cabc-4791-9e14-48fecced38f9","type":"WheelZoomTool"},{"id":"f3def2df-3bde-4fdb-a689-549fe4ba5c29","type":"BoxZoomTool"},{"id":"29935170-108a-4964-bb87-cb87fd1b2db4","type":"SaveTool"},{"id":"294653a0-5b62-4f8f-ac45-ad6d6487c2fc","type":"ResetTool"},{"id":"044e7fda-38a2-471d-a835-a365a9bb6e2b","type":"HelpTool"},{"id":"826f3b34-6bdf-4455-8e68-736a64253629","type":"HoverTool"}]},"id":"e3765549-a91b-433f-8a48-0e5d2f6d56e2","type":"Toolbar"},{"attributes":{},"id":"f258ac42-17bb-44a4-8619-ef38ef8aeb80","type":"PanTool"},{"attributes":{},"id":"99db28db-545d-4ece-908f-d6620c0afd0e","type":"BasicTicker"},{"attributes":{},"id":"294653a0-5b62-4f8f-ac45-ad6d6487c2fc","type":"ResetTool"},{"attributes":{},"id":"cbfc0fa6-0e1c-4b58-8a6a-ad36e65d8d13","type":"CategoricalTickFormatter"},{"attributes":{},"id":"6bba88dd-d5d7-41cb-b503-6f8e51dcda68","type":"SaveTool"},{"attributes":{"callback":null,"data":{"Count":[10,1,0,1,4,1,6,3,5,0,4,2,3,6,6,3,0,5,2,4,4,1,3,0,1,0],"Word":["Aratiatia Lakes, Aratiatia Rapids","Kaik\u016bmera Bay","Ahuroa","Aratiatia Lakes, Aratiatia Rapids","Keteketerau","Kaipara Flats","Mangangarongaro: Mangangarongaro Stream","Whatiwhatihoe","Aratiatia Lakes, Aratiatia Rapids","Ahuroa","Pukek\u0101k\u0101riki","M\u0101k\u014dhine Valley","Mangangarongaro: Mangangarongaro Stream","Mangangarongaro: Mangangarongaro Stream","Mokoroa: Mokoroa Stream","Pukepiripiri","Ahuroa","Mangangarongaro: Mangangarongaro Stream","Aratiatia Lakes, Aratiatia Rapids","Aratiatia Lakes, Aratiatia Rapids","Motukauri: Motukauri Island","Awah\u014dhonu River","Waianiwaniwa","Ahuroa","Kaik\u016bmera Bay","Ahuroa"],"index":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]},"selected":{"id":"5a776903-61b6-409e-bbdf-3369586270c3","type":"Selection"},"selection_policy":{"id":"55e034c1-08f4-481d-bc8a-60378fb383d0","type":"UnionRenderers"}},"id":"14d2286f-e47b-4e25-a596-a6804e90b1dc","type":"ColumnDataSource"},{"attributes":{"dimension":1,"plot":{"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},"ticker":{"id":"9ed538a5-faf0-48f9-8e6c-c4ec883ea74d","type":"BasicTicker"}},"id":"03518864-c262-4167-89f9-16b7fdd25d7b","type":"Grid"},{"attributes":{"callback":null,"renderers":"auto","tooltips":[["Word","@Word"]]},"id":"ffc1b6f9-b862-4f95-a74a-739131a02a18","type":"HoverTool"},{"attributes":{},"id":"f5469f9a-381c-40ae-8f88-40263d955a34","type":"WheelZoomTool"},{"attributes":{"formatter":{"id":"5f418d38-62b3-4f74-b266-89a000064992","type":"BasicTickFormatter"},"plot":{"id":"bbf7ded8-17a7-456f-a437-3d2e309a8652","subtype":"Figure","type":"Plot"},"ticker":{"id":"19757f5e-7f69-4adb-ade6-ea785e548dd3","type":"BasicTicker"}},"id":"47c4e9be-8076-4504-b180-57f82733a2d1","type":"LinearAxis"},{"attributes":{},"id":"70544e79-cabc-4791-9e14-48fecced38f9","type":"WheelZoomTool"},{"attributes":{"formatter":{"id":"bb5b260d-ab83-414d-8c39-c93aaffb49cb","type":"BasicTickFormatter"},"plot":{"id":"b15004a8-5bc0-4838-abf8-c0055d1490bf","subtype":"Figure","type":"Plot"},"ticker":{"id":"9ed538a5-faf0-48f9-8e6c-c4ec883ea74d","type":"BasicTicker"}},"id":"e74b23ce-f457-4921-b3c1-814639293b20","type":"LinearAxis"},{"attributes":{},"id":"638191f8-dfa2-44f7-8587-e7bcc6c379fc","type":"CategoricalTickFormatter"},{"attributes":{},"id":"4a950782-bf0f-4f20-996c-7b0255db16bb","type":"Selection"},{"attributes":{},"id":"2a642c48-8379-4e83-88ac-62a734f04092","type":"CategoricalTicker"}],"root_ids":["b15004a8-5bc0-4838-abf8-c0055d1490bf","bbf7ded8-17a7-456f-a437-3d2e309a8652","27812207-f3c0-4798-a74b-b2613835ff63"]},"title":"Bokeh Application","version":"0.12.16"}}
        </script>
        <script type="text/javascript">
          (function() {
            var fn = function() {
              Bokeh.safely(function() {
                (function(root) {
                  function embed_document(root) {
                    
                  var docs_json = document.getElementById('73752ed4-fbfe-44be-807a-de7b5b0557a3').textContent;
                  var render_items = [{"docid":"73b0459f-e2b7-4a05-90f5-bbcad7202eb2","elementid":"8e1813b4-1acc-4b99-89bc-d981199c6595","modelid":"27812207-f3c0-4798-a74b-b2613835ff63"}];
                  root.Bokeh.embed.embed_items(docs_json, render_items);
                
                  }
                  if (root.Bokeh !== undefined) {
                    embed_document(root);
                  } else {
                    var attempts = 0;
                    var timer = setInterval(function(root) {
                      if (root.Bokeh !== undefined) {
                        embed_document(root);
                        clearInterval(timer);
                      }
                      attempts++;
                      if (attempts > 100) {
                        console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing")
                        clearInterval(timer);
                      }
                    }, 10, root)
                  }
                })(window);
              });
            };
            if (document.readyState != "loading") fn();
            else document.addEventListener("DOMContentLoaded", fn);
          })();
        </script>
    </body>
</html>
<!-- /wp:html -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>407</wp:post_id>
		<wp:post_date><![CDATA[2019-08-23 11:42:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-23 01:42:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[untitled-reusable-block-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[wp_block]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														</item>
					<item>
		<title>Python Project Workflow</title>
		<link>https://jmckew.com/2019/08/30/python-project-workflow/</link>
		<pubDate>Thu, 29 Aug 2019 20:30:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=416</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This post will go through my personal preference on project structure and workflow for creating a new project and an insight how I work on my projects from a development point of view. I will go from the very start as if I did not have Python/Git installed on my machine whatsoever.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First of all, we need to get Python! Head over to <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a> to get the version of Python you need (or default to the latest Python 3 stable release). For version control in my projects, I also like to use Git so, head on over to <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> to download Git for your operating system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now once these are installed (if you put them in the default location), Python will default to be located in: C:\Users\Jack\AppData\Local\Programs\Python\Python37-32. For the next few steps to ensure we are setting up virtual environments for our projects open command prompt here if you are on windows. This will look something like this:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":417,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/08/image-1.png" alt="" class="wp-image-417"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The 'cd' command in windows (and other OS) stands for change directory, follow this with a path and you will be brought to that directory. Next whenever I first install Python I like to update pip to it's latest release, to do this use the command in this window:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">python -m pip install --upgrade pip</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>With pip upgraded to it's current release, it's time to install some very helpful packages for setting up projects: virtualenv and cookiecutter. To install these navigate to the the Scripts folder within the current directory with cd ('cd Scripts') and run 'pip.exe install virtualenv cookiecutter', pip will then work it's magic and install these packages for you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you take a peek into the Scripts folder now in your Python directory, it'll look a little like this:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":420,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/08/image-2.png" alt="" class="wp-image-420"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now something that I personally like to do is add this folder to your system environment variables in Windows so it's much easier to run any packages in your root Python installation on your PC. To do this:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li> type in 'system environment' into the search command </li><li>select environment variables from the bottom right corner</li><li>edit system (or user) path variable</li><li>browse and select the Scripts directory in your Python installation</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p> If you chose to do this step, you will now be able to create virtual environments and cookiecutter templates without having to specify the directory to the executables.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's now time to create a project from scratch. So navigate to where you like to keep your projects (mostly mine is in Documents\Github\) but you can put them anywhere you like. Now run command prompt again (or keep the one you have open) and navigate to the dedicated folder (or folders) using cd.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For most of my projects lately being of data science in nature, I like to use the cookiecutter-data-science template which you can find all the information about here: <a href="https://drivendata.github.io/cookiecutter-data-science/">https://drivendata.github.io/cookiecutter-data-science/</a>. To then create a project it is as simple as running:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">cookiecutter https://github.com/drivendata/cookiecutter-data-science</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:image {"id":421,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/08/image-3.png" alt="" class="wp-image-421"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Provide as much information as you wish into the questions and you will now have a folder created wherever you ran the command with all the relevant sections from the template.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Whenever starting a new Python project, my personal preference is to keep the virtual environment within the directory, however this is not always a normal practice. To create a virtual environment for our Python packages, navigate into the project and run (if you added Scripts to your Path):</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">virtualenv env</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>This will then initialise a folder within your current directory to install a copy of Python and all it's relevant tools with a folder ('env').</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Before we go any further, this is the point that I like to initialise a git repository. To do this, run git init from your command line from within the project directory.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now to finish off the final steps of the workflow that will affect the day-to-day development, I like to use pre-commit hooks to reformat my with black and on some projects check for PEP conformance with flake8 on every commit to my projects repository. This is purely a personal preference on how you would like to work, others like to use pytest and more to ensure their projects are working as intended, however I am not at that stage just yet.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To install these pre-commits into our workflow, firstly initialise the virtual environment from within our project by navigating to env/Scripts/activate.bat. This will activate your project's Python package management system and runtime, following this you can install packages from pip and otherwise. For our pre-commits we install the package 'pre-commit':</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">pip install pre-commit</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Following this to set up the commit hooks create a '.pre-commit-config.yaml' within your main project directory. This is where we will specify what hooks we would like to run before being able to commit. Below is a sample .pre-commit-config.yaml that I use in my projects:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">repos:
-   repo: https://github.com/ambv/black
    rev: stable
    hooks:
    - id: black
      language_version: python3.7
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v2.3.0
    hooks:
    -   id: flake8
    -   id: check-yaml
    -   id: end-of-file-fixer
    -   id: trailing-whitespace</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now to install these, activate your virtual environment like above, navigate to the project directory and run 'pre-commit install'. This will install the pre-commit hooks within your git directory. Before going any further, I highly recommend to run 'pre-commit run --all-files' to both ensure pre-commit is working as expected and check if there is any project specific settings you may have to set.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the default cookiecutter data science template with the settings as per above this will show on the pre-commit run (after you have staged changes in git (use git add -A for all)):</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":424,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/08/image-4.png" alt="" class="wp-image-424"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We can see a different opinions in code formatting appearing already from flake8's output. The black code formatter in Python's code length is 88 characters , not 79 like PEP8. So we will add a pyproject.toml to the project directory where we can specify settings within the black tool:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">[tool.black]
line-length = 79
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.docs
  | _build
  | buck-out
  | build
  | dist
)/
'''</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>For any flake8 specific settings (such as error codes to ignore), we can set a .flake8 file in the project directory as well, which may look like:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">[flake8]
ignore = E203, E266, E501, W503, F403, F401
max-line-length = 88
max-complexity = 18
select = B,C,E,F,W,T4,B9</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Finally we are able to run a commit to our project!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":427,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/08/image-5.png" alt="" class="wp-image-427"/></figure></div>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>416</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 06:30:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-29 20:30:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-project-workflow]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Python Project Workflow

This post will go through my personal preference of project structure and workflow for creating a new project and an insight how I work on my projects from a development point of view. 

#python #git #pre-commit #commit hooks]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Dunders in Python</title>
		<link>https://jmckew.com/2019/09/06/dunders-in-python/</link>
		<pubDate>Thu, 05 Sep 2019 20:30:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=439</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A 'dunder' (double underscores) in Python (also known as a magic method) are the functions within classes having two prefix and suffix underscores in the function name. These are normally used for operator overloading (eg, __init__, __add__, __len__, __repr__, etc). For this post we will build a customized class for vectors to understand how the magic methods can be used to make life easier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First of all before we get into the magic methods, let's talk about normal methods. A method in Python is a function that resides in a class. To begin with our Vector class, we initialise our class and give it a function, for example:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">class Vector():

    def say_hello():
        print("Hello! I'm a method")</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now to call the method, we simply call the function name along with the Vector instance we wish to use:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">Vector.say_hello()</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>This will print:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">Hello! I'm a method</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now for our vector class, we want to be able to initialise it with certain constants or variables for both the magnitude and direction of our vector. We use the __init__ magic method for this, as it is invoked without  any call, when an instance of a class is created.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">class Vector():
    def __init__(self, *args):
        self.values = args</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now when we create an instance of our Vector class, we can give it certain values that it will store in a tuple:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">vector_1 = Vector(1,2,3)

print(vector_1)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which will print:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">&lt;__main__.Vector object at 0x03E90530></pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>But to us humans, this doesn't mean much more than we know what the name of the class is of that instance. What we really want to see when we call print on our class is the values inside it. To do this we use the __repr__ magic method:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">class Vector():
    def __init__(self, *args):
        self.values = args
    def __repr__(self):
        return str(self.values)

vector_1 = Vector(1,2,3)

print(vector_1)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which will print:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">(1, 2, 3)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>This is exactly what we want! Now what if we wanted to create a Vector, but we weren't sure what values we wanted to give it yet. What would happen if we didn't give it any values? Would it default to (0,0) like we would hope?</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">empty_vector = Vector()

print(empty_vector)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which will print:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">()</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Not exactly how we need it, so we would need to run a check when the class is being initialized, to ensure that there are values being provided:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">class Vector():
    def __init__(self, *args):
        if len(args) == 0:
            self.values = (0,0)
        else: 
            self.values = args
    def __repr__(self):
        return str(self.values)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which when initialise an empty instance of our Vector now, it will create a (0,0) vector for us!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now what if we wanted to be able to check how many values were inside our vector class? To do this we can use the __len__ magic method:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">class Vector():
    def __init__(self, *args):
        if len(args) == 0:
            self.values = (0,0)
        else: 
            self.values = args
    def __repr__(self):
        return str(self.values)
    def __len__(self):
        return len(self.values)

vector_1 = Vector(1,2,3)

print(vector_1)
print(len(vector_1))</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which will print:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">(1, 2, 3)
3</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Hopefully this post has given you insight into how dunders/magic methods could be used to super power your classes and make life much easier!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can find more information and examples about dunders in Python at: <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names">https://docs.python.org/3/reference/datamodel.html#special-method-names</a></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>439</wp:post_id>
		<wp:post_date><![CDATA[2019-09-06 06:30:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-05 20:30:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dunders-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Dunders in Python

A 'dunder' (double underscores) or magic method in Python are the methods that are normally used for operator overloading (eg, __init__). 

Learn how to supercharge your classes with dunders!

#python #classes #magic #dunders]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Inheritance in Python</title>
		<link>https://jmckew.com/2019/09/13/inheritance-in-python/</link>
		<pubDate>Thu, 12 Sep 2019 20:30:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=454</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>As Python is a high level, general purpose programming language, which supports users to define their own types using classes, which are most often following the concept of object-oriented programming. Object-oriented programming is a type of software design in which users not only define the data type (eg, int) of a data structure, but also the types of functions that can be applied.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Object-oriented programming is built up of a lot of concepts, to name a few:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Inheritance</li><li>Abstraction</li><li>Class</li><li>Encapsulation</li><li>so on</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>This post will cover an introduction to the concept of inheritance using Python and the animal kingdom.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First off, we are going to start by defining our 'base' class (also known as abstract class) of our Animal with common properties:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">class Animal():
    def __init__(self, name='Animal'):
        self.name = name
    
    def family(self):
        print("Animal Kingdom")

    def speak(self):
        raise Exception("Not implemented yet (define speak)")

    def eat(self):
        raise Exception("Not implemented yet (define eat)")

</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that we have our base class, we can define a subclass 'Dog' that will be able to speak if we define the function inside, but we can also see that it derives from it's parent class 'Animal' by printing out it's family.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">class Dog(Animal):
    def __init__(self, name='Animal'):
        super().__init__(name=name)

    def speak(self):
        print("Woof!")
        

dog = Dog("Jay")
dog.speak()
dog.family()</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which will print out:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">Woof!
Animal Kingdom</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>See my post on dunders (double underscores) to get a better understanding of how the __init__ function is working: <a href="https://jmckew.com/2019/09/06/dunders-in-python/">https://jmckew.com/2019/09/06/dunders-in-python/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we can define any subclass which can derive from our parent class 'Animal', or even more we can derive a class from 'Dog' and it will have all it's properties:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">class JackRussell(Dog):
    def __init__(self, name='Animal'):
        super().__init__(name=name)

dog_2 = JackRussell('Jeff')
dog_2.speak()
dog_2.family()</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which will also print:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">Woof!
Animal Kingdom</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now what if we wanted to specify the family that all of our dog classes are, we can do this by overriding their parent class (similar to how we are overriding the speak function):</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">class Dog(Animal):
    def __init__(self, name='Animal'):
        super().__init__(name=name)

    def family(self):
        print("Mammal")

    def speak(self):
        print("Woof!")</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Which then when we run both the below code:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">dog = Dog("Jay")
dog.speak()
dog.family()

class JackRussell(Dog):
    def __init__(self, name='Animal'):
        super().__init__(name=name)

dog_2 = JackRussell('Jeff')
dog_2.speak()
dog_2.family()</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>We will now get:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">Woof!
Mammal
Woof!
Mammal</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>You should now be comfortable in understanding how inheritance works. Normally, it's best practice to inherit only from a single parent class when creating subclasses. As multiple inheritance makes your programs less complicated and easier to manage. However, for large programs, it is very difficult to avoid multiple inheritance.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date><![CDATA[2019-09-13 06:30:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-12 20:30:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[inheritance-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_s2mail]]></wp:meta_key>
		<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Inheritance in Python

This post will cover an introduction to the concept of inheritance using Python and the animal kingdom.

#python #oop #inheritance #classes]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Introduction to Pytest &amp; Pipenv</title>
		<link>https://jmckew.com/2019/09/20/introduction-to-pytest-pipenv/</link>
		<pubDate>Thu, 19 Sep 2019 20:30:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=464</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Unit tests in general are good practice within software development, they are typically automated tests written to ensure that a function or section of a program (a.k.a the 'unit') meets its design and behaves as intended.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This post won't go into testing structures for complex applications, but rather just a simple introduction on how to write, run and check the output of a test in Python with pytest.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As this post is on testing, I also thought it might be quite apt for trialing out a difference package for dependency management. In the past I've used anaconda, virtualenv and just pip, but this time I wanted to try out pipenv.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Similar to my post <a href="https://jmckew.com/2019/08/30/python-project-workflow/">Python Project Workflow</a> where I used virtualenv, you must install pipenv in your base Python directory, and typically add the Scripts folder to your path for ease later on. Now all we need to do is navigate to the folder and run:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">pipenv shell</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>This will create a virtual environment somewhere on your computer (unless specified) and create a pipfile in the current folder. The pipfile is a file that essentially describes all the packages used within the project, their version number &amp; so on. This is extremely useful when you pick it back up later on and find where you were at or if you wish to share this with others, they can generate their own virtual environment simply from the pipfile with:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">pipenv install --dev</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Enough about pipenv, let's get onto trying out pytest.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this post I will place both my function and it's tests in the same file, however, from my understanding it's best practice to separate them, specifically keeping all tests within an aptly named 'tests' directory for your project/package.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First off let's define the function we intend to test later:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">def subtract(number_1, number_2):
    return number_1 - number_2</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now we want to test if our function returns 1 if we give it number_1 = 2 and number_2 = 1:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">import pytest

def test_subtract():
    assert subtract(2,1) == 1</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>To run this test, open the pipenv shell like above in the directory of the file where you've written your tests and run:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">pytest file_name.py</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>This will output the following:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":465,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/09/image.png" alt="" class="wp-image-465"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Each green dot represents a single test, and we can see that our 1 test passes in 0.02 seconds.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To get more information from pytest, use the same command with -v (verbose) option:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">pytest file_name.py -v</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now we might want to check that it works for multiple cases, to do this we can use the parametrize functionality of pytest like so:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">import pytest

def subtract(number_1, number_2):
    return number_1 - number_2

@pytest.mark.parametrize('number_1, number_2, expected', [
    (2,1,1),
    (5,1,4),
    (6,2,4),
    (-2,1,-3),
])
def test_subtract(number_1,number_2,expected):
    assert expected == subtract(number_1,number_2)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Once run with the verbose command, we get the output:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":466,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://jmckew.com/wp-content/uploads/2019/09/image-1.png" alt="" class="wp-image-466"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Hopefully this post is a gentle introduction to what unit testing can be in Python.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date><![CDATA[2019-09-20 06:30:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-19 20:30:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[introduction-to-pytest-pipenv]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_s2mail]]></wp:meta_key>
		<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Introduction to Pytest & Pipenv

This post is a simple introduction to both Pipenv and Pytest and how they might be used.

#python #pytest #testing #pipenv #pip]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Intro to Games in Python with Pyglet</title>
		<link>https://jmckew.com/2019/10/04/intro-to-games-in-python-with-pyglet/</link>
		<pubDate>Thu, 03 Oct 2019 20:30:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">https://jmckew.com/?p=478</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Recently, I've been researching ways that I could run a 2D simulation (and hopefully 3D) with many moving pieces and there was a desire to make it interactive as well. I stumbled through many visualisation frameworks such as:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://pypi.org/project/p5/">p5</a></li><li><a href="https://www.pygame.org/news">pygame</a></li><li><a href="https://plot.ly/">plotly</a></li><li><a href="https://www.panda3d.org/">panda3d</a></li><li><a href="https://bokeh.pydata.org/en/latest/">bokeh</a></li><li>many others</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Eventually, through the motivation of another side project (looking into training neural networks to learn how to play games) and inspired by this video from Code Bullet <a href="https://www.youtube.com/watch?v=r428O_CMcpI">https://www.youtube.com/watch?v=r428O_CMcpI</a>; I decided on attempting to use <a href="https://pyglet.readthedocs.io/en/stable/">Pyglet</a> to do these simulations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While the aforementioned simulations won't be covered in this post, this post aims to demonstrate how I adapted the <a href="https://pyglet.readthedocs.io/en/stable/programming_guide/examplegame.html">in-depth tutorial on the Pyglet website</a> (which goes through how to recreate asteroids in Pyglet) to generate vector based objects which can crash into each other.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First off as always, start by setting up a virtual environment with your preferred method (<a href="https://jmckew.com/2019/01/11/episode-8-anaconda/">Anaconda</a> or <a href="https://jmckew.com/2019/08/30/python-project-workflow/">follow my workflow</a>), since Pyglet has no external dependencies, all you need to do is install the pyglet package.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I won't go through all the code in the example, and how it works, I will only go through what I changed in the case to get where I wanted to go.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To begin, and make things a bit easier, I downloaded the pyglet-master repository from GitHub (<a href="https://github.com/pyglet/pyglet">https://github.com/pyglet/pyglet</a>) so I didn't have to create and copy the file contents one by one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After going through the different versions with the examples > game folder, I decided all I required was the simple functionality of collision and any further into developing the game wasn't needed for this stage, so I copied out the version 3 folder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If we run 'asteroid.py' from within the version 3 folder, we are met with this screen</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":481,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i0.wp.com/jmckew.com/wp-content/uploads/2019/10/image.png?fit=640%2C505&amp;ssl=1" alt="" class="wp-image-481"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p> Now since all I am trying to do is generate multiple objects (which will be shown with the player symbol to indicate direction), I can comment out the lines which give the lives, score, title and interactive player.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code"># Set up the two top labels
# score_label = pyglet.text.Label(text="Score: 0", x=10, y=575, batch=main_batch)
# level_label = pyglet.text.Label(text="Version 3: Basic Collision",
#                                 x=400, y=575, anchor_x='center', batch=main_batch)

# Initialize the player sprite
# player_ship = player.Player(x=400, y=300, batch=main_batch)

# Make three sprites to represent remaining lives
# player_lives = load.player_lives(2, main_batch)

# Make three asteroids so we have something to shoot at 
# asteroids = load.asteroids(3, player_ship.position, main_batch)

asteroids = load.asteroids(100,(window_width//2,window_height//2),main_batch)

# Store all objects that update each frame in a list
# game_objects = [player_ship] + asteroids
game_objects = asteroids

# Tell the main window that the player object responds to events
# game_window.push_handlers(player_ship.key_handler)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now that we've done that, we need to modify the asteroids generator function to use the player sprite.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In load.py, you can change simply the img argument to the player image sprite reference like so:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">new_asteroid = physicalobject.PhysicalObject(img=resources.player_image,                                                     x=asteroid_x, y=asteroid_y,                                                 batch=batch)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now if we run this, the animation will look a little off, because the objects won't be traveling the direction in the direction that the sprite is pointing. This is due to the existing velocity calculation being a random number for both the X and Y component.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To make the player sprites move in the direction they are rotated in, and maintain the existing codebase, we will need to convert from <a href="https://www.mathsisfun.com/polar-cartesian-coordinates.html">polar notation to cartesian</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To do this, we add an extra 2 functions into 'util.py' which will do this for us:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">def cart2pol(x, y):
    rho = math.sqrt(x**2 + y**2)
    phi = math.arctan2(y, x)
    return(rho, phi)

def pol2cart(rho, phi):
    x = rho * math.sin(math.radians(phi))
    y = rho * math.cos(math.radians(phi))
    return(x, y)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Note the use of radians in pol2cart, this is due to the <a href="https://www.sparknotes.com/math/trigonometry/trigonometricfunctions/section3/">affect of quadrants and trigonometric functions</a>. I won't go into detail, but it won't behave like you expect it to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now to get our player sprites moving in the direction they are rotated, update the code which generates the 'asteroids' to utilise our new function:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">new_asteroid.rotation = random.randint(0, 360)
new_asteroid.velocity_speed = random.random() * 40
new_asteroid.velocity_x, new_asteroid.velocity_y = util.pol2cart(new_asteroid.velocity_speed,new_asteroid.rotation)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now when we go and run our main file again, we will met with a screen like this:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":482,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://i1.wp.com/jmckew.com/wp-content/uploads/2019/10/image-1.png?fit=640%2C505&amp;ssl=1" alt="" class="wp-image-482"/></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Where the player sprites will float around in the direction they are pointing, until they crash into another sprite, causing both of them to disappear.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is a quick intro to Pyglet, I am hoping to expand on this simulation and am positive I will be doing further write ups with it in the future.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>478</wp:post_id>
		<wp:post_date><![CDATA[2019-10-04 06:30:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-03 20:30:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[intro-to-games-in-python-with-pyglet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="code-fridays"><![CDATA[Code Fridays]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[@Jac_McQ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_s2mail]]></wp:meta_key>
		<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_mess]]></wp:meta_key>
		<wp:meta_value><![CDATA[Intro to Games in Python with Pyglet

This post is an intro to using Pyglet to make games with Python, and how I adapted a recreation of asteroids to make the basis of a future simulation.

#python #pyglet #games #asteroids]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	